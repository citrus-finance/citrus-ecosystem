{
  "address": "0xd6c3c92a47Cd8f21e7c4B660951941249cBeb90C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract ILendingPool",
          "name": "_lendingPool",
          "type": "address"
        },
        {
          "internalType": "contract IAaveIncentivesController",
          "name": "_incentivesController",
          "type": "address"
        },
        {
          "internalType": "contract IERC4626",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetsPerShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesToHarvester",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxCollateralRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxCollateralRatio",
          "type": "uint256"
        }
      ],
      "name": "MaxCollateralRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTargetCollateralRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTargetCollateralRatio",
          "type": "uint256"
        }
      ],
      "name": "TargetCollateralRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "UpdateAllowedHarvester",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "excluded",
          "type": "bool"
        }
      ],
      "name": "UpdateFeeExclusion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "UpdateHarvestFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "UpdateWithdrawalFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WITHDRAWAL_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_allHarvesters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allHarvesters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "allowHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedHarvesters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "exclude",
          "type": "bool"
        }
      ],
      "name": "excludeFromFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "excludedFromFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowedFromProtocol",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainingProtocolBorrowCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainingProtocolSupplyCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSuppliedToProtocol",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct HarvestCall[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "harvestCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "blockTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint224",
          "name": "assetsPerShare",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestCheckpointsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestable",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Harvestable[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "invertedHarvestCheckpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "assetsPerShare",
              "type": "uint224"
            }
          ],
          "internalType": "struct HarvestCheckpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "selectHarvestCheckpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "assetsPerShare",
              "type": "uint224"
            }
          ],
          "internalType": "struct HarvestCheckpoint[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "selectInvertedHarvestCheckpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "assetsPerShare",
              "type": "uint224"
            }
          ],
          "internalType": "struct HarvestCheckpoint[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTaker",
          "type": "address"
        }
      ],
      "name": "setFeeTaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_harvestFee",
          "type": "uint256"
        }
      ],
      "name": "setHarvestFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxCollateralRatio",
          "type": "uint256"
        }
      ],
      "name": "setMaxCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTargetCollateralRatio",
          "type": "uint256"
        }
      ],
      "name": "setTargetCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalFee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "diffTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "diffAssetsPerShare",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xccc71ac36b8b8bae781f96886c4de1c0469fc8de444ab22fdb786291f877be8e",
  "receipt": {
    "to": null,
    "from": "0x5BAcf7E843fDEF590209521B5541d6E71dc01880",
    "contractAddress": "0xd6c3c92a47Cd8f21e7c4B660951941249cBeb90C",
    "transactionIndex": 3,
    "gasUsed": "3971365",
    "logsBloom": "0x
    "blockHash": "0xfbd76f30810112d6cdf42fcbca75d7ca08fedd43aa36300dda63dc34c5eaaca4",
    "transactionHash": "0xccc71ac36b8b8bae781f96886c4de1c0469fc8de444ab22fdb786291f877be8e",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 30696974,
        "transactionHash": "0xccc71ac36b8b8bae781f96886c4de1c0469fc8de444ab22fdb786291f877be8e",
        "address": "0xd6c3c92a47Cd8f21e7c4B660951941249cBeb90C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005bacf7e843fdef590209521b5541d6e71dc01880"
        ],
        "data": "0x",
        "logIndex": 604,
        "blockHash": "0xfbd76f30810112d6cdf42fcbca75d7ca08fedd43aa36300dda63dc34c5eaaca4"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 30696974,
        "transactionHash": "0xccc71ac36b8b8bae781f96886c4de1c0469fc8de444ab22fdb786291f877be8e",
        "address": "0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d6c3c92a47cd8f21e7c4b660951941249cbeb90c",
          "0x0000000000000000000000005e15d5e33d318dced84bfe3f4eace07909be6d9c"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 605,
        "blockHash": "0xfbd76f30810112d6cdf42fcbca75d7ca08fedd43aa36300dda63dc34c5eaaca4"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 30696974,
        "transactionHash": "0xccc71ac36b8b8bae781f96886c4de1c0469fc8de444ab22fdb786291f877be8e",
        "address": "0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d6c3c92a47cd8f21e7c4b660951941249cbeb90c",
          "0x000000000000000000000000af204776c7245bf4147c2612bf6e5972ee483701"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 606,
        "blockHash": "0xfbd76f30810112d6cdf42fcbca75d7ca08fedd43aa36300dda63dc34c5eaaca4"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 30696974,
        "transactionHash": "0xccc71ac36b8b8bae781f96886c4de1c0469fc8de444ab22fdb786291f877be8e",
        "address": "0xaf204776c7245bF4147c2612BF6e5972Ee483701",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d6c3c92a47cd8f21e7c4b660951941249cbeb90c",
          "0x0000000000000000000000005e15d5e33d318dced84bfe3f4eace07909be6d9c"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 607,
        "blockHash": "0xfbd76f30810112d6cdf42fcbca75d7ca08fedd43aa36300dda63dc34c5eaaca4"
      }
    ],
    "blockNumber": 30696974,
    "cumulativeGasUsed": "21773097",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d",
    "Citrus Leveraged WXDAI/sDai on Agave Vault",
    "clvsdaiagWXDAI",
    "0x5E15d5E33d318dCEd84Bfe3F4EACe07909bE6d9c",
    "0xfa255f5104f129B78f477e9a6D050a02f31A5D86",
    "0xaf204776c7245bF4147c2612BF6e5972Ee483701"
  ],
  "numDeployments": 1,
  "solcInputHash": "edb1b1d62dd588144199ebabb66ecb5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract ILendingPool\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"contract IAaveIncentivesController\",\"name\":\"_incentivesController\",\"type\":\"address\"},{\"internalType\":\"contract IERC4626\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetsPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesToHarvester\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxCollateralRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"MaxCollateralRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTargetCollateralRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTargetCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"TargetCollateralRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"UpdateAllowedHarvester\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"UpdateFeeExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UpdateHarvestFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UpdateWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAWAL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_allHarvesters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allHarvesters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedHarvesters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowedFromProtocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingProtocolBorrowCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingProtocolSupplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuppliedToProtocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct HarvestCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"harvestCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"assetsPerShare\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestCheckpointsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestable\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Harvestable[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"invertedHarvestCheckpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"assetsPerShare\",\"type\":\"uint224\"}],\"internalType\":\"struct HarvestCheckpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"selectHarvestCheckpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"assetsPerShare\",\"type\":\"uint224\"}],\"internalType\":\"struct HarvestCheckpoint[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"selectInvertedHarvestCheckpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"assetsPerShare\",\"type\":\"uint224\"}],\"internalType\":\"struct HarvestCheckpoint[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTaker\",\"type\":\"address\"}],\"name\":\"setFeeTaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvestFee\",\"type\":\"uint256\"}],\"name\":\"setHarvestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"setMaxCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTargetCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"setTargetCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"diffTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"diffAssetsPerShare\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBorrowedFromProtocol()\":{\"returns\":{\"_0\":\"Assets borrowed\"}},\"getProtocolLiquidity()\":{\"details\":\"ignored on this version\",\"returns\":{\"_0\":\"liquidity The diff\"}},\"getRemainingProtocolBorrowCap()\":{\"details\":\"ignored on this versionshould return 0 if the borrow cap is exhausted\",\"returns\":{\"_0\":\"remainingBorrowCap\"}},\"getRemainingProtocolSupplyCap()\":{\"details\":\"ignored on this versionshould return 0 if the supply cap is exhausted\",\"returns\":{\"_0\":\"remainingSupplyCap\"}},\"getSuppliedToProtocol()\":{\"returns\":{\"_0\":\"Assets supplied\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"getBorrowedFromProtocol()\":{\"notice\":\"Get amount of assets borrowed from the protocol by the vault\"},\"getProtocolLiquidity()\":{\"notice\":\"Get liquidity availailable in the protocol\"},\"getRemainingProtocolBorrowCap()\":{\"notice\":\"Get remaining borrow cap in the protocol\"},\"getRemainingProtocolSupplyCap()\":{\"notice\":\"Get remaining supply cap in the protocol\"},\"getSuppliedToProtocol()\":{\"notice\":\"Get amount of assets supplied to the protocol by the vault\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol\":\"Aave2ERC4626LeveragedVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/citrus-vaults/lib/BoringSolidity/contracts/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Simplified by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5c95af9d26812f279c232d8908c3e2e4ab5054ec1a76275589be4b40857a281c\",\"license\":\"MIT\"},\"contracts/citrus-vaults/lib/BoringSolidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\\n    // By removing them you can't accidentally use them.\\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IStrictERC20 {\\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3ab46c194bf6ebcb4ae1b094c7e41061ef651ee1150d1a07beaf9db085dee0ee\",\"license\":\"MIT\"},\"contracts/citrus-vaults/lib/solmate/src/mixins/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa404f6f45bd53f24a90cc5ffe95e16b52e3f2dfd88f0d7a1edcb35f815919a7b\",\"license\":\"AGPL-3.0-only\"},\"contracts/citrus-vaults/lib/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"contracts/citrus-vaults/lib/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9faabac0803e077fb8d8950f5e2fec1984d3e6cd6ad5fc144609b5c9de83d169\",\"license\":\"AGPL-3.0-only\"},\"contracts/citrus-vaults/lib/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x333b56bef66ff71e3838910781df214acbeb6c2d6ace27a04ebb510f0e669300\",\"license\":\"AGPL-3.0-only\"},\"contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"../lib/BoringSolidity/contracts/interfaces/IERC20.sol\\\";\\n\\nimport \\\"./external/aave-v2/ILendingPool.sol\\\";\\nimport \\\"./external/aave-v2/IAaveIncentivesController.sol\\\";\\nimport \\\"./external/erc4626/IERC4626.sol\\\";\\n\\nimport \\\"./mixins/LeveragedLendingVault.sol\\\";\\n\\ncontract Aave2ERC4626LeveragedVault is LeveragedLendingVault {\\n    ILendingPool lendingPool;\\n\\n    IAaveIncentivesController incentivesController;\\n\\n    IERC20 aToken;\\n\\n    IERC20 debtToken;\\n\\n    IERC4626 vault;\\n\\n    constructor(\\n        ERC20 asset,\\n        string memory name,\\n        string memory symbol,\\n        ILendingPool _lendingPool,\\n        IAaveIncentivesController _incentivesController,\\n        IERC4626 _vault\\n    ) LeveragedLendingVault(asset, name, symbol) {\\n        lendingPool = _lendingPool;\\n        incentivesController = _incentivesController;\\n\\n        DataTypes.ReserveData memory assetData = lendingPool.getReserveData(address(asset));\\n        DataTypes.ReserveData memory debtData = lendingPool.getReserveData(address(_vault));\\n\\n        aToken = IERC20(assetData.aTokenAddress);\\n        debtToken = IERC20(debtData.variableDebtTokenAddress);\\n        vault = _vault;\\n\\n        asset.approve(address(lendingPool), type(uint256).max);\\n        asset.approve(address(vault), type(uint256).max);\\n        vault.approve(address(lendingPool), type(uint256).max);\\n    }\\n\\n    function getSuppliedToProtocol() public override view returns (uint256) {\\n        return aToken.balanceOf(address(this));\\n    }\\n\\n    function getBorrowedFromProtocol() public override view returns (uint256) {\\n        return vault.previewMint(debtToken.balanceOf(address(this)));\\n    }\\n\\n    function supplyToProtocol(uint256 amount) internal override {\\n        lendingPool.deposit(address(asset), amount, address(this), 0);\\n    }\\n\\n    function redeemFromProtocol(uint256 amount) internal override {\\n        lendingPool.withdraw(address(asset), amount, address(this));\\n    }\\n\\n    function borrowFromProtocol(uint256 amount) internal override {\\n        uint256 shares = vault.previewWithdraw(amount);\\n        lendingPool.borrow(address(vault), shares, 2, 0, address(this));\\n        vault.redeem(shares, address(this), address(this));\\n    }\\n\\n    function repayToProtocol(uint256 amount) internal override {\\n        uint256 shares = vault.previewDeposit(amount);\\n        vault.mint(shares, address(this));\\n        lendingPool.repay(address(vault), shares, 2, address(this));\\n    }\\n\\n    function getProtocolLiquidity() public override view returns (uint256) {\\n        return aToken.totalSupply() - vault.previewMint(debtToken.totalSupply());\\n    }\\n\\n    function getRemainingProtocolSupplyCap() public override pure returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function getRemainingProtocolBorrowCap() public override pure returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function collectHarvest() internal override {\\n        address[] memory assets = new address[](2);\\n        assets[0] = address(aToken);\\n        assets[1] = address(debtToken);\\n\\n        incentivesController.claimRewards(\\n            assets,\\n            incentivesController.getRewardsBalance(assets, address(this)),\\n            address(this)\\n        );\\n    }\\n\\n    function harvestable() public override view returns (Harvestable[] memory) {\\n        address[] memory assets = new address[](2);\\n        assets[0] = address(aToken);\\n        assets[1] = address(debtToken);\\n\\n        address rewardToken = incentivesController.REWARD_TOKEN();\\n        uint256 amount = incentivesController.getRewardsBalance(assets, address(this));\\n\\n        Harvestable[] memory arr = new Harvestable[](1);\\n        arr[0] = Harvestable({\\n            token: rewardToken,\\n            amount: amount\\n        });\\n        return arr;\\n    }\\n}\\n\",\"keccak256\":\"0x99763551880ab2f99891c57c482393f9445ccd2d3238632fe614213b1fdad090\",\"license\":\"MIT\"},\"contracts/citrus-vaults/src/external/aave-v2/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\",\"keccak256\":\"0x20b0a0d44a1967dff6321de9c8147e41598035b95883a06923e9b25d48e5a380\",\"license\":\"agpl-3.0\"},\"contracts/citrus-vaults/src/external/aave-v2/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\ninterface IAaveIncentivesController {\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /*\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function getAssetData(address asset)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /*\\n   * LEGACY **************************\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function assets(address asset)\\n    external\\n    view\\n    returns (\\n      uint128,\\n      uint128,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @param asset The asset to incentivize\\n   * @return the user index for the asset\\n   */\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function PRECISION() external view returns (uint8);\\n\\n  /**\\n   * @dev Gets the distribution end timestamp of the emissions\\n   */\\n  function DISTRIBUTION_END() external view returns (uint256);\\n}\",\"keccak256\":\"0x11c0b903229aee9e7d11a9dcc43b7b99d6e1c74bc99699d42f71db97e8df67ac\",\"license\":\"agpl-3.0\"},\"contracts/citrus-vaults/src/external/aave-v2/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from './DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\",\"keccak256\":\"0xe82bc9265df3a2a12d7acb6a1aef6eafbbc195c731a51d3c5bffbfd612a26fc2\",\"license\":\"agpl-3.0\"},\"contracts/citrus-vaults/src/external/aave-v2/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\",\"keccak256\":\"0x9ed2c9cf47ec8d8ecc0bf17082dd177ebd81866f63ce62a17fcb0ed2504ee31c\",\"license\":\"agpl-3.0\"},\"contracts/citrus-vaults/src/external/erc4626/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../../../lib/solmate/src/tokens/ERC20.sol\\\";\\n\\n/// @title ERC4626 interface\\n/// See: https://eips.ethereum.org/EIPS/eip-4626\\nabstract contract IERC4626 is ERC20 {\\n    /*////////////////////////////////////////////////////////\\n                      Events\\n    ////////////////////////////////////////////////////////*/\\n\\n    /// @notice `sender` has exchanged `assets` for `shares`,\\n    /// and transferred those `shares` to `receiver`.\\n    event Deposit(address indexed sender, address indexed receiver, uint256 assets, uint256 shares);\\n\\n    /// @notice `sender` has exchanged `shares` for `assets`,\\n    /// and transferred those `assets` to `receiver`.\\n    event Withdraw(address indexed sender, address indexed receiver, uint256 assets, uint256 shares);\\n\\n    /*////////////////////////////////////////////////////////\\n                      Vault properties\\n    ////////////////////////////////////////////////////////*/\\n\\n    /// @notice The address of the underlying ERC20 token used for\\n    /// the Vault for accounting, depositing, and withdrawing.\\n    function asset() external view virtual returns (address asset);\\n\\n    /// @notice Total amount of the underlying asset that\\n    /// is \\\"managed\\\" by Vault.\\n    function totalAssets() external view virtual returns (uint256 totalAssets);\\n\\n    /*////////////////////////////////////////////////////////\\n                      Deposit/Withdrawal Logic\\n    ////////////////////////////////////////////////////////*/\\n\\n    /// @notice Mints `shares` Vault shares to `receiver` by\\n    /// depositing exactly `assets` of underlying tokens.\\n    function deposit(uint256 assets, address receiver) external virtual returns (uint256 shares);\\n\\n    /// @notice Mints exactly `shares` Vault shares to `receiver`\\n    /// by depositing `assets` of underlying tokens.\\n    function mint(uint256 shares, address receiver) external virtual returns (uint256 assets);\\n\\n    /// @notice Redeems `shares` from `owner` and sends `assets`\\n    /// of underlying tokens to `receiver`.\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external virtual returns (uint256 shares);\\n\\n    /// @notice Redeems `shares` from `owner` and sends `assets`\\n    /// of underlying tokens to `receiver`.\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external virtual returns (uint256 assets);\\n\\n    /*////////////////////////////////////////////////////////\\n                      Vault Accounting Logic\\n    ////////////////////////////////////////////////////////*/\\n\\n    /// @notice The amount of shares that the vault would\\n    /// exchange for the amount of assets provided, in an\\n    /// ideal scenario where all the conditions are met.\\n    function convertToShares(uint256 assets) external view virtual returns (uint256 shares);\\n\\n    /// @notice The amount of assets that the vault would\\n    /// exchange for the amount of shares provided, in an\\n    /// ideal scenario where all the conditions are met.\\n    function convertToAssets(uint256 shares) external view virtual returns (uint256 assets);\\n\\n    /// @notice Total number of underlying assets that can\\n    /// be deposited by `owner` into the Vault, where `owner`\\n    /// corresponds to the input parameter `receiver` of a\\n    /// `deposit` call.\\n    function maxDeposit(address owner) external view virtual returns (uint256 maxAssets);\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate\\n    /// the effects of their deposit at the current block, given\\n    /// current on-chain conditions.\\n    function previewDeposit(uint256 assets) external view virtual returns (uint256 shares);\\n\\n    /// @notice Total number of underlying shares that can be minted\\n    /// for `owner`, where `owner` corresponds to the input\\n    /// parameter `receiver` of a `mint` call.\\n    function maxMint(address owner) external view virtual returns (uint256 maxShares);\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate\\n    /// the effects of their mint at the current block, given\\n    /// current on-chain conditions.\\n    function previewMint(uint256 shares) external view virtual returns (uint256 assets);\\n\\n    /// @notice Total number of underlying assets that can be\\n    /// withdrawn from the Vault by `owner`, where `owner`\\n    /// corresponds to the input parameter of a `withdraw` call.\\n    function maxWithdraw(address owner) external view virtual returns (uint256 maxAssets);\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate\\n    /// the effects of their withdrawal at the current block,\\n    /// given current on-chain conditions.\\n    function previewWithdraw(uint256 assets) external view virtual returns (uint256 shares);\\n\\n    /// @notice Total number of underlying shares that can be\\n    /// redeemed from the Vault by `owner`, where `owner` corresponds\\n    /// to the input parameter of a `redeem` call.\\n    function maxRedeem(address owner) external view virtual returns (uint256 maxShares);\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate\\n    /// the effects of their redeemption at the current block,\\n    /// given current on-chain conditions.\\n    function previewRedeem(uint256 shares) external view virtual returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x2ae41afa4cc2b91e41c16c22fc6a38a47729737d5fec6687d44dbe8c6e8d7b48\",\"license\":\"GPL-2.0-or-later\"},\"contracts/citrus-vaults/src/mixins/LeveragedLendingVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./Vault.sol\\\";\\n\\nabstract contract LeveragedLendingVault is Vault {\\n    uint256 public targetCollateralRatio;\\n\\n    uint256 public maxCollateralRatio;\\n\\n    event TargetCollateralRatioUpdated(uint256 oldTargetCollateralRatio, uint256 newTargetCollateralRatio);\\n\\n    event MaxCollateralRatioUpdated(uint256 oldMaxCollateralRatio, uint256 newMaxCollateralRatio);\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) Vault(_asset, _name, _symbol) {}\\n\\n    /////  Leverage logic  /////\\n\\n    function rebalance(uint256 amountToFreeUp, bool totalRampUp) internal {\\n        uint256 assetBalance = asset.balanceOf(address(this));\\n\\n        if (assetBalance > 0) {\\n            supplyToProtocol(assetBalance);\\n        }\\n\\n        uint256 borrowed = getBorrowedFromProtocol();\\n        uint256 supplied = getSuppliedToProtocol();\\n        uint256 targetBorrow = FixedPointMathLib.mulDivDown(targetCollateralRatio, supplied - borrowed - amountToFreeUp, 1e18 - targetCollateralRatio);\\n\\n        if (borrowed < targetBorrow) {\\n            // ramp up\\n            while(borrowed * 1e18 < targetBorrow * 0.995e18) {\\n                uint256 toBorrow = targetBorrow - borrowed;\\n                uint256 maxBorrow = FixedPointMathLib.mulDivDown(supplied, maxCollateralRatio, 1e18) - borrowed;\\n\\n                if (toBorrow > maxBorrow) {\\n                    toBorrow = maxBorrow;\\n                }\\n\\n                borrowFromProtocol(toBorrow);\\n                supplyToProtocol(toBorrow);\\n\\n                if (!totalRampUp) {\\n                    break;\\n                }\\n\\n                borrowed = getBorrowedFromProtocol();\\n                supplied = getSuppliedToProtocol();\\n            }\\n        } else if (borrowed > targetBorrow) {\\n            // ramp down\\n            while(borrowed * 1e18 > targetBorrow * 1.005e18) {\\n                uint256 toRepay = borrowed - targetBorrow;\\n                uint256 maxRepay = FixedPointMathLib.mulDivDown(supplied, maxCollateralRatio, 1e18) - borrowed;\\n\\n                if (toRepay > maxRepay) {\\n                    toRepay = maxRepay;\\n                }\\n                \\n                redeemFromProtocol(toRepay);\\n                repayToProtocol(toRepay);\\n\\n                borrowed = getBorrowedFromProtocol();\\n                supplied = getSuppliedToProtocol();\\n            }\\n        }\\n\\n        if (amountToFreeUp > 0) {\\n            redeemFromProtocol(amountToFreeUp);\\n        }\\n    }\\n\\n    function rebalance() public {\\n        rebalance(0, true);\\n    }\\n\\n    /////  Vault hooks  /////\\n\\n    function onDeposit(uint256) internal override {\\n        rebalance(0, false);\\n    }\\n\\n    function onWithdraw(uint256 assets) internal override {\\n        rebalance(assets, false);\\n    }\\n\\n    function totalAssets() public view override returns (uint256) {\\n        return asset.balanceOf(address(this)) + getSuppliedToProtocol() - getBorrowedFromProtocol();\\n    }\\n\\n    function onHarvest() internal override {\\n        collectHarvest();\\n    }\\n\\n    function afterHarvest() internal override {\\n        rebalance(0, true);\\n    }\\n\\n    /////  Collateral ratios  /////\\n\\n    function setMaxCollateralRatio(uint256 newMaxCollateralRatio) public onlyManagerOrOwner {\\n        uint oldMaxCollateralRatio = maxCollateralRatio;\\n\\n        require(msg.sender == owner || newMaxCollateralRatio < oldMaxCollateralRatio, \\\"Only Owner can raise maxCollateralRatio\\\");\\n\\n        maxCollateralRatio = newMaxCollateralRatio;\\n        emit MaxCollateralRatioUpdated(oldMaxCollateralRatio, newMaxCollateralRatio);\\n    }\\n\\n    function setTargetCollateralRatio(uint256 newTargetCollateralRatio) public onlyManagerOrOwner {\\n        require(newTargetCollateralRatio < maxCollateralRatio, \\\"Cannot set targetCollateralRatio over maxCollateralRatio\\\");\\n        emit TargetCollateralRatioUpdated(targetCollateralRatio, newTargetCollateralRatio);\\n        targetCollateralRatio = newTargetCollateralRatio;\\n    }\\n\\n    /////  Hooks  /////\\n\\n    /**\\n     * @notice Get amount of assets supplied to the protocol by the vault\\n     * @return Assets supplied\\n     */\\n    function getSuppliedToProtocol() public virtual view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of assets borrowed from the protocol by the vault\\n     * @return Assets borrowed\\n     */\\n    function getBorrowedFromProtocol() public virtual view returns (uint256);\\n\\n    /**\\n     * @notice Supply assets to protocol\\n     * @param amount Assets to supply to the protocol\\n     */\\n    function supplyToProtocol(uint256 amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw assets from protocol\\n     * @param amount Assets to redeem from the protocol\\n     */\\n    function redeemFromProtocol(uint256 amount) internal virtual;\\n\\n    /**\\n     * @notice Borrow assets from protocol\\n     * @param amount Assets to borrow from the protocol\\n     */\\n    function borrowFromProtocol(uint256 amount) internal virtual;\\n\\n    /**\\n     * @notice Repay debt to protocol\\n     * @param amount Assets to repay to the protocol\\n     */\\n    function repayToProtocol(uint256 amount) internal virtual;\\n\\n    /**\\n     * @notice Get liquidity availailable in the protocol\\n     * @return liquidity The diff\\n     * @dev ignored on this version\\n     */\\n    function getProtocolLiquidity() public virtual view returns (uint256);\\n\\n    /**\\n     * @notice Get remaining supply cap in the protocol\\n     * @return remainingSupplyCap\\n     * @dev ignored on this version\\n     * @dev should return 0 if the supply cap is exhausted\\n     */\\n    function getRemainingProtocolSupplyCap() public virtual view returns (uint256);\\n\\n    /**\\n     * @notice Get remaining borrow cap in the protocol\\n     * @return remainingBorrowCap\\n     * @dev ignored on this version\\n     * @dev should return 0 if the borrow cap is exhausted\\n     */\\n    function getRemainingProtocolBorrowCap() public virtual view returns (uint256);\\n\\n    /**\\n     * @notice Colect rewards token from protocol\\n     */\\n    function collectHarvest() internal virtual {}\\n}\",\"keccak256\":\"0x8f2522494528b885110c6b705fec5b2b875b2138588941ad6ae71442071a10e6\",\"license\":\"MIT\"},\"contracts/citrus-vaults/src/mixins/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"../../lib/solmate/src/mixins/ERC4626.sol\\\";\\nimport {FixedPointMathLib} from \\\"../../lib/solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport \\\"../../lib/BoringSolidity/contracts/BoringOwnable.sol\\\";\\n\\nstruct HarvestCall {\\n    address target;\\n    bytes callData;\\n}\\n\\nstruct Harvestable {\\n    address token;\\n    uint256 amount;\\n}\\n\\nstruct HarvestCheckpoint {\\n    // rolling block timestamp\\n    uint32 blockTimestamp;\\n\\n    // rolling amount of assets per share\\n    uint224 assetsPerShare;\\n}\\n\\nabstract contract Vault is ERC4626, BoringOwnable {\\n    using FixedPointMathLib for uint256;\\n\\n    event UpdateFeeExclusion(address user, bool excluded);\\n    event UpdateAllowedHarvester(address target, bool allowed);\\n    event Harvest(uint assetsPerShare, uint sharesToHarvester);\\n    event UpdateWithdrawalFee(uint256 oldFee, uint256 newFee);\\n    event UpdateHarvestFee(uint256 oldFee, uint256 newFee);\\n\\n    uint256 public constant MAX_WITHDRAWAL_FEE = 0.01e18; // 1%\\n\\n    // @notice The manager is allowed to perform some privileged actions on the vault, \\n    address public manager;\\n\\n    // @notice This address receive all fees captured by this vault\\n    address public feeTaker;\\n\\n    // @notice Percentage the user has to pay to withdraw. 1e18 is 100%\\n    uint256 public withdrawalFee;\\n\\n    // @notice Harvesting generate . 1e18 is 100%\\n    uint256 public harvestFee;\\n\\n    // @notice stores assetsPerShare evolution over time\\n    // @dev used to calculate yield/apy\\n    HarvestCheckpoint[] public harvestCheckpoints;\\n\\n    // @notice addresses that are excluded from fees\\n    mapping(address => bool) public excludedFromFees;\\n\\n    // @notice address of contracts that could be called during harvest\\n    mapping(address => bool) public allowedHarvesters;\\n\\n    // @notice array of contracts that could be called during harvest\\n    // @dev only use this to check if a contract should be removed, some disabled harvesters can be in this array\\n    address[] public _allHarvesters;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC4626(_asset, _name, _symbol) {\\n        harvestCheckpoints.push(HarvestCheckpoint({\\n            blockTimestamp: uint32(block.timestamp),\\n            assetsPerShare: uint224(convertToAssets(10 ** decimals))\\n        }));\\n    }\\n\\n    /////  Harvest  /////\\n\\n    // modified version of: https://github.com/makerdao/multicall/blob/1e1b44362640820bef92d0ccf5eeee25d9b41474/src/Multicall.sol#L17-L25\\n    // @dev The caller could steal the harvest but should not be able to steal any of the deposited funds.\\n    // Stealing the harvest would result in bad PR and users withdrawing their funds without losing their principal.\\n    function harvest(HarvestCall[] memory calls, uint256 amountOutMin) public virtual onlyManager returns (bytes[] memory returnData) {\\n        uint256 balanceBefore = totalAssets();\\n\\n        onHarvest();\\n\\n        returnData = new bytes[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            require(allowedHarvesters[calls[i].target], \\\"harvestor not allowed\\\");\\n\\n            bool success;\\n            bytes memory ret;\\n\\n            (success, ret) = calls[i].target.delegatecall(calls[i].callData);\\n            \\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (ret.length < 68) revert();\\n                assembly {\\n                    ret := add(ret, 0x04)\\n                }\\n                revert(abi.decode(ret, (string)));\\n            }\\n\\n            returnData[i] = ret;\\n        }\\n\\n        uint256 balanceAfter = totalAssets();\\n\\n        require(balanceAfter >= balanceBefore, \\\"negative harvest\\\");\\n        uint256 diffBalance;\\n        unchecked {\\n          diffBalance = balanceAfter - balanceBefore;\\n        }\\n\\n        require(diffBalance >= amountOutMin, \\\"insufficient output amount\\\");\\n\\n        uint256 denom = balanceBefore + (diffBalance.mulDivUp(1e18 - harvestFee, 1e18));\\n        uint256 harvesterShares = totalSupply.mulDivDown(balanceAfter, denom) - totalSupply;\\n\\n        _mint(feeTaker, harvesterShares);\\n\\n        uint256 assetsPerShare = convertToAssets(10 ** decimals);\\n        harvestCheckpoints.push(HarvestCheckpoint({\\n            blockTimestamp: uint32(block.timestamp),\\n            assetsPerShare: uint224(assetsPerShare)\\n        }));\\n        emit Harvest(assetsPerShare, harvesterShares);\\n\\n        afterHarvest();\\n    }\\n\\n    // @notice approve a contract to be used during harvesting\\n    function allowHarvester(address target, bool allowed) public onlyOwner {\\n        if (allowed) {\\n            _allHarvesters.push(target);\\n        }\\n        allowedHarvesters[target] = allowed;\\n        emit UpdateAllowedHarvester(target, allowed);\\n    }\\n\\n    // @notive get array of all contracts ever allowed\\n    // @dev could contains harvester that are now disabled\\n    function allHarvesters() public view returns (address[] memory) {\\n        return _allHarvesters;\\n    }\\n\\n    /////  Checkpoints  /////\\n\\n    function harvestCheckpointsLength() public view returns (uint256) {\\n        return harvestCheckpoints.length;\\n    }\\n\\n    function invertedHarvestCheckpoints(uint256 index) public view returns (HarvestCheckpoint memory) {\\n        return harvestCheckpoints[harvestCheckpoints.length - 1 - index];\\n    }\\n\\n    function selectHarvestCheckpoints(uint256 start, uint256 end) public view returns (HarvestCheckpoint[] memory) {\\n        uint256 length = end - start + 1;\\n\\n        HarvestCheckpoint[] memory arr = new HarvestCheckpoint[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            arr[i] = harvestCheckpoints[start + i];\\n        }\\n        return arr;\\n    }\\n\\n    function selectInvertedHarvestCheckpoints(uint256 start, uint256 end) public view returns (HarvestCheckpoint[] memory) {\\n        uint256 length = end - start + 1;\\n        uint256 lastIndex = harvestCheckpoints.length - 1;\\n\\n        HarvestCheckpoint[] memory arr = new HarvestCheckpoint[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            arr[i] = harvestCheckpoints[lastIndex - i];\\n        }\\n        return arr;\\n    }\\n\\n    function yield() public view virtual returns (uint256 diffTimestamp, int256 diffAssetsPerShare) {\\n        uint lastHarvestCheckpointsIndex = harvestCheckpoints.length - 1;\\n\\n        if (lastHarvestCheckpointsIndex < 1) {\\n            return (1 days, 0);\\n        }\\n\\n        HarvestCheckpoint memory lastCheckpoint = harvestCheckpoints[lastHarvestCheckpointsIndex];\\n        HarvestCheckpoint memory beforeLastCheckpoint = harvestCheckpoints[lastHarvestCheckpointsIndex - 1];\\n\\n        unchecked { // timestamp is allowed to overflow\\n            diffTimestamp = lastCheckpoint.blockTimestamp - beforeLastCheckpoint.blockTimestamp;\\n        }\\n        diffAssetsPerShare = int256(((int224(lastCheckpoint.assetsPerShare) - int224(beforeLastCheckpoint.assetsPerShare)) * 1e18) / int224(beforeLastCheckpoint.assetsPerShare));\\n    }\\n\\n    /////  Admin  /////\\n\\n    function setManager(address _manager) public onlyOwner {\\n        manager = _manager;\\n    }\\n\\n    /////  Fees  /////\\n\\n    function excludeFromFees(address user, bool exclude) public onlyOwner {\\n        excludedFromFees[user] = exclude;\\n        emit UpdateFeeExclusion(user, exclude);\\n    }\\n\\n    function setFeeTaker(address _feeTaker) public onlyOwner {\\n        feeTaker = _feeTaker;\\n    }\\n\\n    function setWithdrawalFee(uint256 _withdrawalFee) public onlyOwner {\\n        require(_withdrawalFee <= MAX_WITHDRAWAL_FEE, \\\"the withdrawal fee can be max 1%\\\");\\n\\n        uint256 oldFee = withdrawalFee;\\n        withdrawalFee = _withdrawalFee;\\n\\n        emit UpdateWithdrawalFee(oldFee, _withdrawalFee);\\n    }\\n\\n    function setHarvestFee(uint256 _harvestFee) public onlyOwner {\\n        uint256 oldFee = harvestFee;\\n        harvestFee = _harvestFee;\\n\\n        emit UpdateHarvestFee(oldFee, _harvestFee);\\n    }\\n\\n    /////  ERC4626 hooks  /////\\n\\n    function afterDeposit(uint256 assets, uint256) internal override {\\n        onDeposit(assets);\\n    }\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal override {\\n        if (withdrawalFee != 0 && !excludedFromFees[msg.sender]) {\\n            _mint(feeTaker, shares.mulDivUp(withdrawalFee, 1e18));\\n        }\\n        onWithdraw(assets);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view override returns (uint256) {\\n        uint256 _withdrawalFee = withdrawalFee;\\n\\n        if (excludedFromFees[msg.sender]) {\\n            _withdrawalFee = 0;\\n        }\\n\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        uint shares = supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n        return shares.mulDivUp(1e18, 1e18 - _withdrawalFee);\\n    }\\n\\n    function previewRedeem(uint256 shares) public view override returns (uint256) {\\n        uint256 _withdrawalFee = withdrawalFee;\\n\\n        if (excludedFromFees[msg.sender]) {\\n            _withdrawalFee = 0;\\n        }\\n\\n        return convertToAssets(shares).mulDivDown(1e18 - _withdrawalFee, 1e18);\\n    }\\n\\n    ///// Modifiers  /////\\n\\n    modifier onlyManager() {\\n        require(msg.sender == manager, \\\"Only manager is allowed to call\\\");\\n        _;\\n    }\\n\\n    modifier onlyManagerOrOwner() {\\n        require(msg.sender == manager || msg.sender == owner, \\\"Only manager or Owner is allowed to call\\\");\\n        _;\\n    }\\n\\n    /////  Hooks  /////\\n\\n    function onDeposit(uint256 assets) internal virtual {}\\n\\n    function onWithdraw(uint256 assets) internal virtual {}\\n\\n    function onHarvest() internal virtual {}\\n\\n    function afterHarvest() internal virtual {}\\n\\n    function harvestable() public virtual view returns (Harvestable[] memory);\\n}\",\"keccak256\":\"0x61e11bf73dade69978fd4ce22f8b3640b9073469dd6fbc3f211aaddc0751d5d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162004d4038038062004d40833981016040819052620000359162000861565b8585858282828282828181846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200007f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a5919062000938565b6000620000b38482620009e5565b506001620000c28382620009e5565b5060ff81166080524660a052620000d86200048c565b60c0525050506001600160a01b0390921660e0525050600680546001600160a01b031916339081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600c60405180604001604052804263ffffffff16815260200162000162608051600a6200015c919062000bc6565b62000528565b6001600160e01b03908116909152825460018101845560009384526020808520845191909401519092166401000000000263ffffffff90921691909117910155601280546001600160a01b03808d166001600160a01b0319928316811790935560138054918d16919092161790556040516335ea6a7560e01b815291975095506335ea6a7594506200020b93508c925060040190506001600160a01b0391909116815260200190565b61018060405180830381865afa1580156200022a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000250919062000c57565b6012546040516335ea6a7560e01b81526001600160a01b038581166004830152929350600092909116906335ea6a759060240161018060405180830381865afa158015620002a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002c8919062000c57565b60e0830151601480546001600160a01b03199081166001600160a01b03938416179091556101208301516015805483169184169190911790556016805490911686831617905560125460405163095ea7b360e01b81529082166004820152600019602482015291925089169063095ea7b3906044016020604051808303816000875af11580156200035d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000383919062000d5f565b5060165460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529089169063095ea7b3906044016020604051808303816000875af1158015620003d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ff919062000d5f565b5060165460125460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af115801562000457573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200047d919062000d5f565b50505050505050505062000e50565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620004c0919062000d83565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600254600090801562000560576200055a6200054362000569565b82856200060b60201b6200282c179092919060201c565b62000562565b825b9392505050565b6000620005756200062b565b6200057f6200070c565b60e0516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015620005c8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005ee919062000e01565b620005fa919062000e1b565b62000606919062000e36565b905090565b8282028115158415858304851417166200062457600080fd5b0492915050565b6016546015546040516370a0823160e01b81523060048201526000926001600160a01b039081169263b3d7f6b9929116906370a0823190602401602060405180830381865afa15801562000683573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006a9919062000e01565b6040518263ffffffff1660e01b8152600401620006c891815260200190565b602060405180830381865afa158015620006e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000606919062000e01565b6014546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401620006c8565b6001600160a01b03811681146200075457600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60405161018081016001600160401b038111828210171562000793576200079362000757565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620007c457620007c462000757565b604052919050565b600082601f830112620007de57600080fd5b81516001600160401b03811115620007fa57620007fa62000757565b602062000810601f8301601f1916820162000799565b82815285828487010111156200082557600080fd5b60005b838110156200084557858101830151828201840152820162000828565b83811115620008575760008385840101525b5095945050505050565b60008060008060008060c087890312156200087b57600080fd5b865162000888816200073e565b60208801519096506001600160401b0380821115620008a657600080fd5b620008b48a838b01620007cc565b96506040890151915080821115620008cb57600080fd5b50620008da89828a01620007cc565b9450506060870151620008ed816200073e565b608088015190935062000900816200073e565b60a088015190925062000913816200073e565b809150509295509295509295565b805160ff811681146200093357600080fd5b919050565b6000602082840312156200094b57600080fd5b620005628262000921565b600181811c908216806200096b57607f821691505b6020821081036200098c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620009e057600081815260208120601f850160051c81016020861015620009bb5750805b601f850160051c820191505b81811015620009dc57828155600101620009c7565b5050505b505050565b81516001600160401b0381111562000a015762000a0162000757565b62000a198162000a12845462000956565b8462000992565b602080601f83116001811462000a51576000841562000a385750858301515b600019600386901b1c1916600185901b178555620009dc565b600085815260208120601f198616915b8281101562000a825788860151825594840194600190910190840162000a61565b508582101562000aa15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000b0857816000190482111562000aec5762000aec62000ab1565b8085161562000afa57918102915b93841c939080029062000acc565b509250929050565b60008262000b215750600162000bc0565b8162000b305750600062000bc0565b816001811462000b49576002811462000b545762000b74565b600191505062000bc0565b60ff84111562000b685762000b6862000ab1565b50506001821b62000bc0565b5060208310610133831016604e8410600b841016171562000b99575081810a62000bc0565b62000ba5838362000ac7565b806000190482111562000bbc5762000bbc62000ab1565b0290505b92915050565b60006200056260ff84168362000b10565b60006020828403121562000bea57600080fd5b604051602081016001600160401b038111828210171562000c0f5762000c0f62000757565b6040529151825250919050565b80516001600160801b03811681146200093357600080fd5b805164ffffffffff811681146200093357600080fd5b805162000933816200073e565b6000610180828403121562000c6b57600080fd5b62000c756200076d565b62000c81848462000bd7565b815262000c916020840162000c1c565b602082015262000ca46040840162000c1c565b604082015262000cb76060840162000c1c565b606082015262000cca6080840162000c1c565b608082015262000cdd60a0840162000c1c565b60a082015262000cf060c0840162000c34565b60c082015262000d0360e0840162000c4a565b60e082015261010062000d1881850162000c4a565b9082015261012062000d2c84820162000c4a565b9082015261014062000d4084820162000c4a565b9082015261016062000d5484820162000921565b908201529392505050565b60006020828403121562000d7257600080fd5b815180151581146200056257600080fd5b600080835462000d938162000956565b6001828116801562000dae576001811462000dc45762000df5565b60ff198416875282151583028701945062000df5565b8760005260208060002060005b8581101562000dec5781548a82015290840190820162000dd1565b50505082870194505b50929695505050505050565b60006020828403121562000e1457600080fd5b5051919050565b6000821982111562000e315762000e3162000ab1565b500190565b60008282101562000e4b5762000e4b62000ab1565b500390565b60805160a05160c05160e051613e7762000ec9600039600081816105190152818161094b0152818161145c015281816117b501528181611a6f01528181611bbb01528181612a1c01528181612dc30152612fbb01526000610eb101526000610e810152600081816104b501526127440152613e776000f3fe608060405234801561001057600080fd5b50600436106103db5760003560e01c80638bc7e8c41161020a578063c024666811610125578063d905777e116100b8578063dd62ed3e11610087578063dd62ed3e146108a5578063e30c3978146108d0578063eb6ed330146108e3578063ef8b30f7146108f1578063f8eedf4b1461090457600080fd5b8063d905777e1461083c578063dbbd47d414610865578063dbe66ca01461087a578063dbf2c98d1461089d57600080fd5b8063cdc412dd116100f4578063cdc412dd146107f0578063ce96cb7714610803578063d0ebdbe714610816578063d505accf1461082957600080fd5b8063c0246668146107b7578063c63d75b6146105aa578063c6e6f592146107ca578063c866a1e5146107dd57600080fd5b8063ac1e50251161019d578063b460af941161016c578063b460af9414610775578063b596291714610788578063ba08765214610791578063badd2526146107a457600080fd5b8063ac1e502514610747578063b0f58c611461075a578063b3d7f6b914610762578063b45bb10d1461075a57600080fd5b806394bf804d116101d957806394bf804d1461071157806395d89b4114610724578063a0807ae11461072c578063a9059cbb1461073457600080fd5b80638bc7e8c4146106cd5780638da5cb5b146106d6578063918195c5146106e957806391b5fd5f1461070957600080fd5b8063402d267d116102fa5780636e553f651161028d578063792b55b61161025c578063792b55b6146106895780637d7c2a1c1461069c5780637ecebe00146106a45780638422318f146106c457600080fd5b80636e553f651461063b57806370a082311461064e578063725fd9201461066e578063749f10441461067657600080fd5b80634e71e0c8116102c95780634e71e0c8146105f85780634ec5908d1461060057806367a4c944146106135780636dd46b4f1461062657600080fd5b8063402d267d146105aa57806348023e26146105bf578063481c6a75146105d25780634cdad506146105e557600080fd5b806323b872dd11610372578063367fc2fc11610341578063367fc2fc146104f157806338d52e0f1461051457806338dbd5651461055357806339bad3dd1461057357600080fd5b806323b872dd146104805780632859398414610493578063313ce567146104b05780633644e515146104e957600080fd5b8063095ea7b3116103ae578063095ea7b3146104385780630a28a4771461045b57806318160ddd1461046e5780631e12e7ea1461047757600080fd5b806301e1d114146103e057806306fdde03146103fb578063078dfbe71461041057806307a2d13a14610425575b600080fd5b6103e8610924565b6040519081526020015b60405180910390f35b6104036109d7565b6040516103f291906132ea565b61042361041e366004613327565b610a65565b005b6103e861043336600461336c565b610b7d565b61044b610446366004613385565b610baa565b60405190151581526020016103f2565b6103e861046936600461336c565b610c17565b6103e860025481565b6103e860105481565b61044b61048e3660046133b1565b610c88565b61049b610d68565b604080519283526020830191909152016103f2565b6104d77f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016103f2565b6103e8610e7d565b61044b6104ff3660046133f2565b600e6020526000908152604090205460ff1681565b61053b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016103f2565b61056661056136600461340f565b610ed3565b6040516103f29190613431565b61058661058136600461336c565b610feb565b6040805163ffffffff90931683526001600160e01b039091166020830152016103f2565b6103e86105b83660046133f2565b5060001990565b6105666105cd36600461340f565b611023565b60085461053b906001600160a01b031681565b6103e86105f336600461336c565b611151565b6104236111a1565b61042361060e3660046133f2565b61125f565b61042361062136600461336c565b6112ab565b61062e6113a2565b6040516103f291906134db565b6103e86106493660046134ee565b611404565b6103e861065c3660046133f2565b60036020526000908152604090205481565b6103e86114de565b60095461053b906001600160a01b031681565b61042361069736600461336c565b61154c565b6104236115bc565b6103e86106b23660046133f2565b60056020526000908152604090205481565b6103e860115481565b6103e8600a5481565b60065461053b906001600160a01b031681565b6106fc6106f736600461336c565b6115ca565b6040516103f2919061351e565b6103e8611648565b6103e861071f3660046134ee565b61179b565b610403611837565b600c546103e8565b61044b610742366004613385565b611844565b61042361075536600461336c565b6118aa565b6000196103e8565b6103e861077036600461336c565b611969565b6103e8610783366004613544565b611988565b6103e8600b5481565b6103e861079f366004613544565b611a96565b6104236107b236600461336c565b611be2565b6104236107c5366004613586565b611cd3565b6103e86107d836600461336c565b611d59565b61053b6107eb36600461336c565b611d79565b6104236107fe366004613586565b611da3565b6103e86108113660046133f2565b611e7b565b6104236108243660046133f2565b611e9d565b6104236108373660046135bb565b611ee9565b6103e861084a3660046133f2565b6001600160a01b031660009081526003602052604090205490565b61086d61212d565b6040516103f29190613632565b61044b6108883660046133f2565b600d6020526000908152604090205460ff1681565b6103e8612322565b6103e86108b336600461367d565b600460209081526000928352604080842090915290825290205481565b60075461053b906001600160a01b031681565b6103e8662386f26fc1000081565b6103e86108ff36600461336c565b6123bb565b610917610912366004613743565b6123c6565b6040516103f29190613896565b600061092e612322565b6109366114de565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561099a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109be91906138f8565b6109c89190613927565b6109d2919061393f565b905090565b600080546109e490613956565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1090613956565b8015610a5d5780601f10610a3257610100808354040283529160200191610a5d565b820191906000526020600020905b815481529060010190602001808311610a4057829003601f168201915b505050505081565b6006546001600160a01b03163314610a985760405162461bcd60e51b8152600401610a8f90613990565b60405180910390fd5b8115610b5c576001600160a01b038316151580610ab25750805b610af65760405162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b6044820152606401610a8f565b6006546040516001600160a01b038086169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0385166001600160a01b031991821617909155600780549091169055505050565b600780546001600160a01b0319166001600160a01b0385161790555b505050565b6002546000908015610ba157610b9c610b94610924565b84908361282c565b610ba3565b825b9392505050565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610c059086815260200190565b60405180910390a35060015b92915050565b600a54336000908152600d602052604081205490919060ff1615610c39575060005b60025460008115610c5d57610c5882610c50610924565b87919061284b565b610c5f565b845b9050610c7f670de0b6b3a7640000610c77858261393f565b83919061284b565b95945050505050565b6001600160a01b03831660009081526004602090815260408083203384529091528120546000198114610ce457610cbf838261393f565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b03851660009081526003602052604081208054859290610d0c90849061393f565b90915550506001600160a01b0380851660008181526003602052604090819020805487019055519091871690600080516020613e2283398151915290610d559087815260200190565b60405180910390a3506001949350505050565b60008060006001600c80549050610d7f919061393f565b90506001811015610d9857506201518092600092509050565b6000600c8281548110610dad57610dad6139c5565b600091825260208083206040805180820190915292015463ffffffff81168352600160201b90046001600160e01b0316908201529150600c610df060018561393f565b81548110610e0057610e006139c5565b60009182526020918290206040805180820190915291015463ffffffff808216808452600160201b9092046001600160e01b031683850181905286519487015192909403169750909250610e559082906139db565b610e6790670de0b6b3a7640000613a2b565b610e719190613abf565b601b0b93505050509091565b60007f00000000000000000000000000000000000000000000000000000000000000004614610eae576109d2612879565b507f000000000000000000000000000000000000000000000000000000000000000090565b60606000610ee1848461393f565b610eec906001613927565b905060008167ffffffffffffffff811115610f0957610f096136ab565b604051908082528060200260200182016040528015610f4e57816020015b6040805180820190915260008082526020820152815260200190600190039081610f275790505b50905060005b82811015610fe257600c610f688288613927565b81548110610f7857610f786139c5565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091528251839083908110610fc457610fc46139c5565b60200260200101819052508080610fda90613b0b565b915050610f54565b50949350505050565b600c8181548110610ffb57600080fd5b60009182526020909120015463ffffffff81169150600160201b90046001600160e01b031682565b60606000611031848461393f565b61103c906001613927565b600c549091506000906110519060019061393f565b905060008267ffffffffffffffff81111561106e5761106e6136ab565b6040519080825280602002602001820160405280156110b357816020015b604080518082019091526000808252602082015281526020019060019003908161108c5790505b50905060005b8381101561114757600c6110cd828561393f565b815481106110dd576110dd6139c5565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091528251839083908110611129576111296139c5565b6020026020010181905250808061113f90613b0b565b9150506110b9565b5095945050505050565b600a54336000908152600d602052604081205490919060ff1615611173575060005b610ba361118882670de0b6b3a764000061393f565b670de0b6b3a764000061119a86610b7d565b919061282c565b6007546001600160a01b03163381146111fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e65726044820152606401610a8f565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b039092166001600160a01b0319928316179055600780549091169055565b6006546001600160a01b031633146112895760405162461bcd60e51b8152600401610a8f90613990565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b03163314806112ce57506006546001600160a01b031633145b6112ea5760405162461bcd60e51b8152600401610a8f90613b24565b60115481106113615760405162461bcd60e51b815260206004820152603860248201527f43616e6e6f742073657420746172676574436f6c6c61746572616c526174696f60448201527f206f766572206d6178436f6c6c61746572616c526174696f00000000000000006064820152608401610a8f565b60105460408051918252602082018390527f44b56064048acd7afec122889cc6faae3494866375d78c6b4b532f024718589f910160405180910390a1601055565b6060600f8054806020026020016040519081016040528092919081815260200182805480156113fa57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113dc575b5050505050905090565b600061140f836123bb565b90508060000361144f5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b6044820152606401610a8f565b6114846001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612913565b61148e828261299d565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610c1183826129f7565b6014546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024015b602060405180830381865afa158015611528573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d291906138f8565b6006546001600160a01b031633146115765760405162461bcd60e51b8152600401610a8f90613990565b600b80549082905560408051828152602081018490527f1e7b50ac7d699f1fa19946c1c807a39bfb844cb58ea818fa06c8d7da549359c891015b60405180910390a15050565b6115c860006001612a04565b565b6040805180820190915260008082526020820152600c805483906115f09060019061393f565b6115fa919061393f565b8154811061160a5761160a6139c5565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b03169181019190915292915050565b601654601554604080516318160ddd60e01b815290516000936001600160a01b039081169363b3d7f6b9939116916318160ddd916004808201926020929091908290030181865afa1580156116a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c591906138f8565b6040518263ffffffff1660e01b81526004016116e391815260200190565b602060405180830381865afa158015611700573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172491906138f8565b601460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611777573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c891906138f8565b60006117a683611969565b90506117dd6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612913565b6117e7828461299d565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610c1181846129f7565b600180546109e490613956565b3360009081526003602052604081208054839190839061186590849061393f565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020613e2283398151915290610c059086815260200190565b6006546001600160a01b031633146118d45760405162461bcd60e51b8152600401610a8f90613990565b662386f26fc1000081111561192b5760405162461bcd60e51b815260206004820181905260248201527f746865207769746864726177616c206665652063616e206265206d61782031256044820152606401610a8f565b600a80549082905560408051828152602081018490527f9988c10f8391e84fefec36b82a3a26109ad0af79150c6c2ae60baf392b31ee9c91016115b0565b6002546000908015610ba157610b9c611980610924565b84908361284b565b600061199384610c17565b9050336001600160a01b03831614611a03576001600160a01b03821660009081526004602090815260408083203384529091529020546000198114611a01576119dc828261393f565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b611a0d8482612c57565b611a178282612cb3565b60408051858152602081018390526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610ba36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612d15565b6000336001600160a01b03831614611b06576001600160a01b03821660009081526004602090815260408083203384529091529020546000198114611b0457611adf858261393f565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b611b0f84611151565b905080600003611b4f5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b6044820152606401610a8f565b611b598185612c57565b611b638285612cb3565b60408051828152602081018690526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610ba36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168483612d15565b6008546001600160a01b0316331480611c0557506006546001600160a01b031633145b611c215760405162461bcd60e51b8152600401610a8f90613b24565b6011546006546001600160a01b0316331480611c3c57508082105b611c985760405162461bcd60e51b815260206004820152602760248201527f4f6e6c79204f776e65722063616e207261697365206d6178436f6c6c61746572604482015266616c526174696f60c81b6064820152608401610a8f565b601182905560408051828152602081018490527faa915560e9978e01b02ffd7ed7b18b60e842c2772bb4dab6ba9b141e7441693c91016115b0565b6006546001600160a01b03163314611cfd5760405162461bcd60e51b8152600401610a8f90613990565b6001600160a01b0382166000818152600d6020908152604091829020805460ff19168515159081179091558251938452908301527f13e65f4beb0eb8b8336d270aa4ac99e9fa961d9eb25a89ff945d8f1224bbbcda91016115b0565b6002546000908015610ba157610b9c81611d71610924565b85919061282c565b600f8181548110611d8957600080fd5b6000918252602090912001546001600160a01b0316905081565b6006546001600160a01b03163314611dcd5760405162461bcd60e51b8152600401610a8f90613990565b8015611e1f57600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b0384161790555b6001600160a01b0382166000818152600e6020908152604091829020805460ff19168515159081179091558251938452908301527fa85166530e095b84b707bec761a551e9f45e9f2b8d7c0afa50073171b1aaafbb91016115b0565b6001600160a01b038116600090815260036020526040812054610c1190610b7d565b6006546001600160a01b03163314611ec75760405162461bcd60e51b8152600401610a8f90613990565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b42841015611f395760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610a8f565b60006001611f45610e7d565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015612051573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906120875750876001600160a01b0316816001600160a01b0316145b6120c45760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606401610a8f565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b60408051600280825260608083018452926000929190602083019080368337505060145482519293506001600160a01b031691839150600090612172576121726139c5565b6001600160a01b0392831660209182029290920101526015548251911690829060019081106121a3576121a36139c5565b6001600160a01b03928316602091820292909201810191909152601354604080516399248ea760e01b8152905160009492909216926399248ea7926004808401938290030181865afa1580156121fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122219190613b6c565b6013546040516345accf9360e11b81529192506000916001600160a01b0390911690638b599f26906122599086903090600401613b89565b602060405180830381865afa158015612276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229a91906138f8565b60408051600180825281830190925291925060009190816020015b60408051808201909152600080825260208201528152602001906001900390816122b55790505090506040518060400160405280846001600160a01b03168152602001838152508160008151811061230f5761230f6139c5565b6020908102919091010152949350505050565b6016546015546040516370a0823160e01b81523060048201526000926001600160a01b039081169263b3d7f6b9929116906370a0823190602401602060405180830381865afa158015612379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239d91906138f8565b6040518263ffffffff1660e01b815260040161150b91815260200190565b6000610c1182611d59565b6008546060906001600160a01b031633146124235760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c79206d616e6167657220697320616c6c6f77656420746f2063616c6c006044820152606401610a8f565b600061242d610924565b9050612437612d93565b835167ffffffffffffffff811115612451576124516136ab565b60405190808252806020026020018201604052801561248457816020015b606081526020019060019003908161246f5790505b50915060005b845181101561262b57600e60008683815181106124a9576124a96139c5565b602090810291909101810151516001600160a01b031682528101919091526040016000205460ff166125155760405162461bcd60e51b81526020600482015260156024820152741a185c9d995cdd1bdc881b9bdd08185b1b1bddd959605a1b6044820152606401610a8f565b6000606086838151811061252b5761252b6139c5565b6020026020010151600001516001600160a01b0316878481518110612552576125526139c5565b60200260200101516020015160405161256b9190613bb3565b600060405180830381855af49150503d80600081146125a6576040519150601f19603f3d011682016040523d82523d6000602084013e6125ab565b606091505b509092509050816125f8576044815110156125c557600080fd5b600481019050808060200190518101906125df9190613bcf565b60405162461bcd60e51b8152600401610a8f91906132ea565b8085848151811061260b5761260b6139c5565b60200260200101819052505050808061262390613b0b565b91505061248a565b506000612636610924565b90508181101561267b5760405162461bcd60e51b815260206004820152601060248201526f1b9959d85d1a5d99481a185c9d995cdd60821b6044820152606401610a8f565b818103848110156126ce5760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e74206f757470757420616d6f756e740000000000006044820152606401610a8f565b60006126f9600b54670de0b6b3a76400006126e9919061393f565b8390670de0b6b3a764000061284b565b6127039085613927565b60025490915060009061271781868561282c565b612721919061393f565b60095490915061273a906001600160a01b03168261299d565b600061276a6104337f0000000000000000000000000000000000000000000000000000000000000000600a613d21565b60408051808201825263ffffffff42811682526001600160e01b0380851660208401908152600c805460018101825560009190915293519051909116600160201b029116177fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c790910155519091507f6c8433a8e155f0af04dba058d4e4695f7da554578963d876bdf4a6d8d6399d9c906128109083908590918252602082015260400190565b60405180910390a16128206115bc565b50505050505092915050565b82820281151584158583048514171661284457600080fd5b0492915050565b82820281151584158583048514171661286357600080fd5b6001826001830304018115150290509392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516128ab9190613d30565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806129965760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610a8f565b5050505050565b80600260008282546129af9190613927565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020613e2283398151915291015b60405180910390a35050565b612a0082612d9b565b5050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8f91906138f8565b90508015612aa057612aa081612da9565b6000612aaa612322565b90506000612ab66114de565b90506000612af1601054878585612acd919061393f565b612ad7919061393f565b601054612aec90670de0b6b3a764000061393f565b61282c565b905080831015612ba2575b612b0e81670dcef33a6f838000613dcf565b612b2084670de0b6b3a7640000613dcf565b1015612b9d576000612b32848361393f565b9050600084612b4c85601154670de0b6b3a764000061282c565b612b56919061393f565b905080821115612b64578091505b612b6d82612e38565b612b7682612da9565b86612b82575050612c40565b612b8a612322565b9450612b946114de565b93505050612afc565b612c40565b80831115612c40575b612bbd81670df27a2cdf448000613dcf565b612bcf84670de0b6b3a7640000613dcf565b1115612c40576000612be1828561393f565b9050600084612bfb85601154670de0b6b3a764000061282c565b612c05919061393f565b905080821115612c13578091505b612c1c82612fa1565b612c258261303f565b612c2d612322565b9450612c376114de565b93505050612bab565b8515612c4f57612c4f86612fa1565b505050505050565b600a5415801590612c785750336000908152600d602052604090205460ff16155b15612caa57600954600a54612caa916001600160a01b031690612ca5908490670de0b6b3a764000061284b565b61299d565b612a008261316c565b6001600160a01b03821660009081526003602052604081208054839290612cdb90849061393f565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020613e22833981519152906020016129eb565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080612d8d5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610a8f565b50505050565b6115c8613177565b612da6600080612a04565b50565b60125460405163e8eda9df60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052306044830152600060648301529091169063e8eda9df90608401600060405180830381600087803b158015612e2457600080fd5b505af1158015612996573d6000803e3d6000fd5b601654604051630a28a47760e01b8152600481018390526000916001600160a01b031690630a28a47790602401602060405180830381865afa158015612e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea691906138f8565b60125460165460405163a415bcad60e01b81526001600160a01b039182166004820152602481018490526002604482015260006064820152306084820152929350169063a415bcad9060a401600060405180830381600087803b158015612f0c57600080fd5b505af1158015612f20573d6000803e3d6000fd5b5050601654604051635d043b2960e11b815260048101859052306024820181905260448201526001600160a01b03909116925063ba08765291506064015b6020604051808303816000875af1158015612f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7891906138f8565b601254604051631a4ca37b60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052306044830152909116906369328dec906064015b6020604051808303816000875af115801561301b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0091906138f8565b60165460405163ef8b30f760e01b8152600481018390526000916001600160a01b03169063ef8b30f790602401602060405180830381865afa158015613089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ad91906138f8565b6016546040516394bf804d60e01b8152600481018390523060248201529192506001600160a01b0316906394bf804d906044016020604051808303816000875af11580156130ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312391906138f8565b5060125460165460405163573ade8160e01b81526001600160a01b039182166004820152602481018490526002604482015230606482015291169063573ade8190608401612f5e565b612da6816000612a04565b604080516002808252606082018352600092602083019080368337505060145482519293506001600160a01b0316918391506000906131b8576131b86139c5565b6001600160a01b0392831660209182029290920101526015548251911690829060019081106131e9576131e96139c5565b6001600160a01b0392831660209182029290920101526013546040516345accf9360e11b8152911690633111e7b39083908390638b599f26906132329084903090600401613b89565b602060405180830381865afa15801561324f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327391906138f8565b306040518463ffffffff1660e01b8152600401612ffc93929190613dee565b60005b838110156132ad578181015183820152602001613295565b83811115612d8d5750506000910152565b600081518084526132d6816020860160208601613292565b601f01601f19169290920160200192915050565b602081526000610ba360208301846132be565b6001600160a01b0381168114612da657600080fd5b8035801515811461332257600080fd5b919050565b60008060006060848603121561333c57600080fd5b8335613347816132fd565b925061335560208501613312565b915061336360408501613312565b90509250925092565b60006020828403121561337e57600080fd5b5035919050565b6000806040838503121561339857600080fd5b82356133a3816132fd565b946020939093013593505050565b6000806000606084860312156133c657600080fd5b83356133d1816132fd565b925060208401356133e1816132fd565b929592945050506040919091013590565b60006020828403121561340457600080fd5b8135610ba3816132fd565b6000806040838503121561342257600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b8281101561348a5761347a848351805163ffffffff1682526020908101516001600160e01b0316910152565b928401929085019060010161344e565b5091979650505050505050565b600081518084526020808501945080840160005b838110156134d05781516001600160a01b0316875295820195908201906001016134ab565b509495945050505050565b602081526000610ba36020830184613497565b6000806040838503121561350157600080fd5b823591506020830135613513816132fd565b809150509250929050565b815163ffffffff1681526020808301516001600160e01b03169082015260408101610c11565b60008060006060848603121561355957600080fd5b83359250602084013561356b816132fd565b9150604084013561357b816132fd565b809150509250925092565b6000806040838503121561359957600080fd5b82356135a4816132fd565b91506135b260208401613312565b90509250929050565b600080600080600080600060e0888a0312156135d657600080fd5b87356135e1816132fd565b965060208801356135f1816132fd565b95506040880135945060608801359350608088013560ff8116811461361557600080fd5b9699959850939692959460a0840135945060c09093013592915050565b602080825282518282018190526000919060409081850190868401855b8281101561348a57815180516001600160a01b0316855286015186850152928401929085019060010161364f565b6000806040838503121561369057600080fd5b823561369b816132fd565b91506020830135613513816132fd565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156136e4576136e46136ab565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613713576137136136ab565b604052919050565b600067ffffffffffffffff821115613735576137356136ab565b50601f01601f191660200190565b600080604080848603121561375757600080fd5b833567ffffffffffffffff8082111561376f57600080fd5b818601915086601f83011261378357600080fd5b8135602082821115613797576137976136ab565b8160051b6137a68282016136ea565b928352848101820192828101908b8511156137c057600080fd5b83870192505b84831015613884578235868111156137de5760008081fd5b8701808d03601f19018913156137f45760008081fd5b6137fc6136c1565b85820135613809816132fd565b8152818a01358881111561381d5760008081fd5b8083019250508d603f8301126138335760008081fd5b858201356138486138438261371b565b6136ea565b8181528f8c83860101111561385d5760008081fd5b818c85018983013760009181018801919091528187015283525091830191908301906137c6565b9b999092013599505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156138eb57603f198886030184526138d98583516132be565b945092850192908501906001016138bd565b5092979650505050505050565b60006020828403121561390a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561393a5761393a613911565b500190565b60008282101561395157613951613911565b500390565b600181811c9082168061396a57607f821691505b60208210810361398a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600081601b0b83601b0b60008112816401ffffffff60df1b01831281151615613a0657613a06613911565b6001600160df1b0382018313811615613a2157613a21613911565b5090039392505050565b6000601b82810b9084900b6001600160df1b0383821384841380821684840486111615613a5a57613a5a613911565b6001600160df1b03196000851282811687830587121615613a7d57613a7d613911565b60008712925085820587128484161615613a9957613a99613911565b85850587128184161615613aaf57613aaf613911565b5050509290910295945050505050565b600081601b0b83601b0b80613ae457634e487b7160e01b600052601260045260246000fd5b6001600160df1b0319821460001982141615613b0257613b02613911565b90059392505050565b600060018201613b1d57613b1d613911565b5060010190565b60208082526028908201527f4f6e6c79206d616e61676572206f72204f776e657220697320616c6c6f776564604082015267081d1bc818d85b1b60c21b606082015260800190565b600060208284031215613b7e57600080fd5b8151610ba3816132fd565b604081526000613b9c6040830185613497565b905060018060a01b03831660208301529392505050565b60008251613bc5818460208701613292565b9190910192915050565b600060208284031215613be157600080fd5b815167ffffffffffffffff811115613bf857600080fd5b8201601f81018413613c0957600080fd5b8051613c176138438261371b565b818152856020838501011115613c2c57600080fd5b610c7f826020830160208601613292565b600181815b80851115613c78578160001904821115613c5e57613c5e613911565b80851615613c6b57918102915b93841c9390800290613c42565b509250929050565b600082613c8f57506001610c11565b81613c9c57506000610c11565b8160018114613cb25760028114613cbc57613cd8565b6001915050610c11565b60ff841115613ccd57613ccd613911565b50506001821b610c11565b5060208310610133831016604e8410600b8410161715613cfb575081810a610c11565b613d058383613c3d565b8060001904821115613d1957613d19613911565b029392505050565b6000610ba360ff841683613c80565b600080835481600182811c915080831680613d4c57607f831692505b60208084108203613d6b57634e487b7160e01b86526022600452602486fd5b818015613d7f5760018114613d9457613dc1565b60ff1986168952841515850289019650613dc1565b60008a81526020902060005b86811015613db95781548b820152908501908301613da0565b505084890196505b509498975050505050505050565b6000816000190483118215151615613de957613de9613911565b500290565b606081526000613e016060830186613497565b6020830194909452506001600160a01b039190911660409091015291905056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122093191d3fe316616a69cd8be592ff7985f44a21902c8561922978f0af550c039c64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103db5760003560e01c80638bc7e8c41161020a578063c024666811610125578063d905777e116100b8578063dd62ed3e11610087578063dd62ed3e146108a5578063e30c3978146108d0578063eb6ed330146108e3578063ef8b30f7146108f1578063f8eedf4b1461090457600080fd5b8063d905777e1461083c578063dbbd47d414610865578063dbe66ca01461087a578063dbf2c98d1461089d57600080fd5b8063cdc412dd116100f4578063cdc412dd146107f0578063ce96cb7714610803578063d0ebdbe714610816578063d505accf1461082957600080fd5b8063c0246668146107b7578063c63d75b6146105aa578063c6e6f592146107ca578063c866a1e5146107dd57600080fd5b8063ac1e50251161019d578063b460af941161016c578063b460af9414610775578063b596291714610788578063ba08765214610791578063badd2526146107a457600080fd5b8063ac1e502514610747578063b0f58c611461075a578063b3d7f6b914610762578063b45bb10d1461075a57600080fd5b806394bf804d116101d957806394bf804d1461071157806395d89b4114610724578063a0807ae11461072c578063a9059cbb1461073457600080fd5b80638bc7e8c4146106cd5780638da5cb5b146106d6578063918195c5146106e957806391b5fd5f1461070957600080fd5b8063402d267d116102fa5780636e553f651161028d578063792b55b61161025c578063792b55b6146106895780637d7c2a1c1461069c5780637ecebe00146106a45780638422318f146106c457600080fd5b80636e553f651461063b57806370a082311461064e578063725fd9201461066e578063749f10441461067657600080fd5b80634e71e0c8116102c95780634e71e0c8146105f85780634ec5908d1461060057806367a4c944146106135780636dd46b4f1461062657600080fd5b8063402d267d146105aa57806348023e26146105bf578063481c6a75146105d25780634cdad506146105e557600080fd5b806323b872dd11610372578063367fc2fc11610341578063367fc2fc146104f157806338d52e0f1461051457806338dbd5651461055357806339bad3dd1461057357600080fd5b806323b872dd146104805780632859398414610493578063313ce567146104b05780633644e515146104e957600080fd5b8063095ea7b3116103ae578063095ea7b3146104385780630a28a4771461045b57806318160ddd1461046e5780631e12e7ea1461047757600080fd5b806301e1d114146103e057806306fdde03146103fb578063078dfbe71461041057806307a2d13a14610425575b600080fd5b6103e8610924565b6040519081526020015b60405180910390f35b6104036109d7565b6040516103f291906132ea565b61042361041e366004613327565b610a65565b005b6103e861043336600461336c565b610b7d565b61044b610446366004613385565b610baa565b60405190151581526020016103f2565b6103e861046936600461336c565b610c17565b6103e860025481565b6103e860105481565b61044b61048e3660046133b1565b610c88565b61049b610d68565b604080519283526020830191909152016103f2565b6104d77f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016103f2565b6103e8610e7d565b61044b6104ff3660046133f2565b600e6020526000908152604090205460ff1681565b61053b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016103f2565b61056661056136600461340f565b610ed3565b6040516103f29190613431565b61058661058136600461336c565b610feb565b6040805163ffffffff90931683526001600160e01b039091166020830152016103f2565b6103e86105b83660046133f2565b5060001990565b6105666105cd36600461340f565b611023565b60085461053b906001600160a01b031681565b6103e86105f336600461336c565b611151565b6104236111a1565b61042361060e3660046133f2565b61125f565b61042361062136600461336c565b6112ab565b61062e6113a2565b6040516103f291906134db565b6103e86106493660046134ee565b611404565b6103e861065c3660046133f2565b60036020526000908152604090205481565b6103e86114de565b60095461053b906001600160a01b031681565b61042361069736600461336c565b61154c565b6104236115bc565b6103e86106b23660046133f2565b60056020526000908152604090205481565b6103e860115481565b6103e8600a5481565b60065461053b906001600160a01b031681565b6106fc6106f736600461336c565b6115ca565b6040516103f2919061351e565b6103e8611648565b6103e861071f3660046134ee565b61179b565b610403611837565b600c546103e8565b61044b610742366004613385565b611844565b61042361075536600461336c565b6118aa565b6000196103e8565b6103e861077036600461336c565b611969565b6103e8610783366004613544565b611988565b6103e8600b5481565b6103e861079f366004613544565b611a96565b6104236107b236600461336c565b611be2565b6104236107c5366004613586565b611cd3565b6103e86107d836600461336c565b611d59565b61053b6107eb36600461336c565b611d79565b6104236107fe366004613586565b611da3565b6103e86108113660046133f2565b611e7b565b6104236108243660046133f2565b611e9d565b6104236108373660046135bb565b611ee9565b6103e861084a3660046133f2565b6001600160a01b031660009081526003602052604090205490565b61086d61212d565b6040516103f29190613632565b61044b6108883660046133f2565b600d6020526000908152604090205460ff1681565b6103e8612322565b6103e86108b336600461367d565b600460209081526000928352604080842090915290825290205481565b60075461053b906001600160a01b031681565b6103e8662386f26fc1000081565b6103e86108ff36600461336c565b6123bb565b610917610912366004613743565b6123c6565b6040516103f29190613896565b600061092e612322565b6109366114de565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561099a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109be91906138f8565b6109c89190613927565b6109d2919061393f565b905090565b600080546109e490613956565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1090613956565b8015610a5d5780601f10610a3257610100808354040283529160200191610a5d565b820191906000526020600020905b815481529060010190602001808311610a4057829003601f168201915b505050505081565b6006546001600160a01b03163314610a985760405162461bcd60e51b8152600401610a8f90613990565b60405180910390fd5b8115610b5c576001600160a01b038316151580610ab25750805b610af65760405162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b6044820152606401610a8f565b6006546040516001600160a01b038086169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0385166001600160a01b031991821617909155600780549091169055505050565b600780546001600160a01b0319166001600160a01b0385161790555b505050565b6002546000908015610ba157610b9c610b94610924565b84908361282c565b610ba3565b825b9392505050565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610c059086815260200190565b60405180910390a35060015b92915050565b600a54336000908152600d602052604081205490919060ff1615610c39575060005b60025460008115610c5d57610c5882610c50610924565b87919061284b565b610c5f565b845b9050610c7f670de0b6b3a7640000610c77858261393f565b83919061284b565b95945050505050565b6001600160a01b03831660009081526004602090815260408083203384529091528120546000198114610ce457610cbf838261393f565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b03851660009081526003602052604081208054859290610d0c90849061393f565b90915550506001600160a01b0380851660008181526003602052604090819020805487019055519091871690600080516020613e2283398151915290610d559087815260200190565b60405180910390a3506001949350505050565b60008060006001600c80549050610d7f919061393f565b90506001811015610d9857506201518092600092509050565b6000600c8281548110610dad57610dad6139c5565b600091825260208083206040805180820190915292015463ffffffff81168352600160201b90046001600160e01b0316908201529150600c610df060018561393f565b81548110610e0057610e006139c5565b60009182526020918290206040805180820190915291015463ffffffff808216808452600160201b9092046001600160e01b031683850181905286519487015192909403169750909250610e559082906139db565b610e6790670de0b6b3a7640000613a2b565b610e719190613abf565b601b0b93505050509091565b60007f00000000000000000000000000000000000000000000000000000000000000004614610eae576109d2612879565b507f000000000000000000000000000000000000000000000000000000000000000090565b60606000610ee1848461393f565b610eec906001613927565b905060008167ffffffffffffffff811115610f0957610f096136ab565b604051908082528060200260200182016040528015610f4e57816020015b6040805180820190915260008082526020820152815260200190600190039081610f275790505b50905060005b82811015610fe257600c610f688288613927565b81548110610f7857610f786139c5565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091528251839083908110610fc457610fc46139c5565b60200260200101819052508080610fda90613b0b565b915050610f54565b50949350505050565b600c8181548110610ffb57600080fd5b60009182526020909120015463ffffffff81169150600160201b90046001600160e01b031682565b60606000611031848461393f565b61103c906001613927565b600c549091506000906110519060019061393f565b905060008267ffffffffffffffff81111561106e5761106e6136ab565b6040519080825280602002602001820160405280156110b357816020015b604080518082019091526000808252602082015281526020019060019003908161108c5790505b50905060005b8381101561114757600c6110cd828561393f565b815481106110dd576110dd6139c5565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091528251839083908110611129576111296139c5565b6020026020010181905250808061113f90613b0b565b9150506110b9565b5095945050505050565b600a54336000908152600d602052604081205490919060ff1615611173575060005b610ba361118882670de0b6b3a764000061393f565b670de0b6b3a764000061119a86610b7d565b919061282c565b6007546001600160a01b03163381146111fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e65726044820152606401610a8f565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b039092166001600160a01b0319928316179055600780549091169055565b6006546001600160a01b031633146112895760405162461bcd60e51b8152600401610a8f90613990565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b03163314806112ce57506006546001600160a01b031633145b6112ea5760405162461bcd60e51b8152600401610a8f90613b24565b60115481106113615760405162461bcd60e51b815260206004820152603860248201527f43616e6e6f742073657420746172676574436f6c6c61746572616c526174696f60448201527f206f766572206d6178436f6c6c61746572616c526174696f00000000000000006064820152608401610a8f565b60105460408051918252602082018390527f44b56064048acd7afec122889cc6faae3494866375d78c6b4b532f024718589f910160405180910390a1601055565b6060600f8054806020026020016040519081016040528092919081815260200182805480156113fa57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113dc575b5050505050905090565b600061140f836123bb565b90508060000361144f5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b6044820152606401610a8f565b6114846001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612913565b61148e828261299d565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610c1183826129f7565b6014546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024015b602060405180830381865afa158015611528573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d291906138f8565b6006546001600160a01b031633146115765760405162461bcd60e51b8152600401610a8f90613990565b600b80549082905560408051828152602081018490527f1e7b50ac7d699f1fa19946c1c807a39bfb844cb58ea818fa06c8d7da549359c891015b60405180910390a15050565b6115c860006001612a04565b565b6040805180820190915260008082526020820152600c805483906115f09060019061393f565b6115fa919061393f565b8154811061160a5761160a6139c5565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b03169181019190915292915050565b601654601554604080516318160ddd60e01b815290516000936001600160a01b039081169363b3d7f6b9939116916318160ddd916004808201926020929091908290030181865afa1580156116a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c591906138f8565b6040518263ffffffff1660e01b81526004016116e391815260200190565b602060405180830381865afa158015611700573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172491906138f8565b601460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611777573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c891906138f8565b60006117a683611969565b90506117dd6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612913565b6117e7828461299d565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610c1181846129f7565b600180546109e490613956565b3360009081526003602052604081208054839190839061186590849061393f565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020613e2283398151915290610c059086815260200190565b6006546001600160a01b031633146118d45760405162461bcd60e51b8152600401610a8f90613990565b662386f26fc1000081111561192b5760405162461bcd60e51b815260206004820181905260248201527f746865207769746864726177616c206665652063616e206265206d61782031256044820152606401610a8f565b600a80549082905560408051828152602081018490527f9988c10f8391e84fefec36b82a3a26109ad0af79150c6c2ae60baf392b31ee9c91016115b0565b6002546000908015610ba157610b9c611980610924565b84908361284b565b600061199384610c17565b9050336001600160a01b03831614611a03576001600160a01b03821660009081526004602090815260408083203384529091529020546000198114611a01576119dc828261393f565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b611a0d8482612c57565b611a178282612cb3565b60408051858152602081018390526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610ba36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612d15565b6000336001600160a01b03831614611b06576001600160a01b03821660009081526004602090815260408083203384529091529020546000198114611b0457611adf858261393f565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b611b0f84611151565b905080600003611b4f5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b6044820152606401610a8f565b611b598185612c57565b611b638285612cb3565b60408051828152602081018690526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610ba36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168483612d15565b6008546001600160a01b0316331480611c0557506006546001600160a01b031633145b611c215760405162461bcd60e51b8152600401610a8f90613b24565b6011546006546001600160a01b0316331480611c3c57508082105b611c985760405162461bcd60e51b815260206004820152602760248201527f4f6e6c79204f776e65722063616e207261697365206d6178436f6c6c61746572604482015266616c526174696f60c81b6064820152608401610a8f565b601182905560408051828152602081018490527faa915560e9978e01b02ffd7ed7b18b60e842c2772bb4dab6ba9b141e7441693c91016115b0565b6006546001600160a01b03163314611cfd5760405162461bcd60e51b8152600401610a8f90613990565b6001600160a01b0382166000818152600d6020908152604091829020805460ff19168515159081179091558251938452908301527f13e65f4beb0eb8b8336d270aa4ac99e9fa961d9eb25a89ff945d8f1224bbbcda91016115b0565b6002546000908015610ba157610b9c81611d71610924565b85919061282c565b600f8181548110611d8957600080fd5b6000918252602090912001546001600160a01b0316905081565b6006546001600160a01b03163314611dcd5760405162461bcd60e51b8152600401610a8f90613990565b8015611e1f57600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b0384161790555b6001600160a01b0382166000818152600e6020908152604091829020805460ff19168515159081179091558251938452908301527fa85166530e095b84b707bec761a551e9f45e9f2b8d7c0afa50073171b1aaafbb91016115b0565b6001600160a01b038116600090815260036020526040812054610c1190610b7d565b6006546001600160a01b03163314611ec75760405162461bcd60e51b8152600401610a8f90613990565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b42841015611f395760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610a8f565b60006001611f45610e7d565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015612051573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906120875750876001600160a01b0316816001600160a01b0316145b6120c45760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606401610a8f565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b60408051600280825260608083018452926000929190602083019080368337505060145482519293506001600160a01b031691839150600090612172576121726139c5565b6001600160a01b0392831660209182029290920101526015548251911690829060019081106121a3576121a36139c5565b6001600160a01b03928316602091820292909201810191909152601354604080516399248ea760e01b8152905160009492909216926399248ea7926004808401938290030181865afa1580156121fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122219190613b6c565b6013546040516345accf9360e11b81529192506000916001600160a01b0390911690638b599f26906122599086903090600401613b89565b602060405180830381865afa158015612276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229a91906138f8565b60408051600180825281830190925291925060009190816020015b60408051808201909152600080825260208201528152602001906001900390816122b55790505090506040518060400160405280846001600160a01b03168152602001838152508160008151811061230f5761230f6139c5565b6020908102919091010152949350505050565b6016546015546040516370a0823160e01b81523060048201526000926001600160a01b039081169263b3d7f6b9929116906370a0823190602401602060405180830381865afa158015612379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239d91906138f8565b6040518263ffffffff1660e01b815260040161150b91815260200190565b6000610c1182611d59565b6008546060906001600160a01b031633146124235760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c79206d616e6167657220697320616c6c6f77656420746f2063616c6c006044820152606401610a8f565b600061242d610924565b9050612437612d93565b835167ffffffffffffffff811115612451576124516136ab565b60405190808252806020026020018201604052801561248457816020015b606081526020019060019003908161246f5790505b50915060005b845181101561262b57600e60008683815181106124a9576124a96139c5565b602090810291909101810151516001600160a01b031682528101919091526040016000205460ff166125155760405162461bcd60e51b81526020600482015260156024820152741a185c9d995cdd1bdc881b9bdd08185b1b1bddd959605a1b6044820152606401610a8f565b6000606086838151811061252b5761252b6139c5565b6020026020010151600001516001600160a01b0316878481518110612552576125526139c5565b60200260200101516020015160405161256b9190613bb3565b600060405180830381855af49150503d80600081146125a6576040519150601f19603f3d011682016040523d82523d6000602084013e6125ab565b606091505b509092509050816125f8576044815110156125c557600080fd5b600481019050808060200190518101906125df9190613bcf565b60405162461bcd60e51b8152600401610a8f91906132ea565b8085848151811061260b5761260b6139c5565b60200260200101819052505050808061262390613b0b565b91505061248a565b506000612636610924565b90508181101561267b5760405162461bcd60e51b815260206004820152601060248201526f1b9959d85d1a5d99481a185c9d995cdd60821b6044820152606401610a8f565b818103848110156126ce5760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e74206f757470757420616d6f756e740000000000006044820152606401610a8f565b60006126f9600b54670de0b6b3a76400006126e9919061393f565b8390670de0b6b3a764000061284b565b6127039085613927565b60025490915060009061271781868561282c565b612721919061393f565b60095490915061273a906001600160a01b03168261299d565b600061276a6104337f0000000000000000000000000000000000000000000000000000000000000000600a613d21565b60408051808201825263ffffffff42811682526001600160e01b0380851660208401908152600c805460018101825560009190915293519051909116600160201b029116177fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c790910155519091507f6c8433a8e155f0af04dba058d4e4695f7da554578963d876bdf4a6d8d6399d9c906128109083908590918252602082015260400190565b60405180910390a16128206115bc565b50505050505092915050565b82820281151584158583048514171661284457600080fd5b0492915050565b82820281151584158583048514171661286357600080fd5b6001826001830304018115150290509392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516128ab9190613d30565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806129965760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610a8f565b5050505050565b80600260008282546129af9190613927565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020613e2283398151915291015b60405180910390a35050565b612a0082612d9b565b5050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8f91906138f8565b90508015612aa057612aa081612da9565b6000612aaa612322565b90506000612ab66114de565b90506000612af1601054878585612acd919061393f565b612ad7919061393f565b601054612aec90670de0b6b3a764000061393f565b61282c565b905080831015612ba2575b612b0e81670dcef33a6f838000613dcf565b612b2084670de0b6b3a7640000613dcf565b1015612b9d576000612b32848361393f565b9050600084612b4c85601154670de0b6b3a764000061282c565b612b56919061393f565b905080821115612b64578091505b612b6d82612e38565b612b7682612da9565b86612b82575050612c40565b612b8a612322565b9450612b946114de565b93505050612afc565b612c40565b80831115612c40575b612bbd81670df27a2cdf448000613dcf565b612bcf84670de0b6b3a7640000613dcf565b1115612c40576000612be1828561393f565b9050600084612bfb85601154670de0b6b3a764000061282c565b612c05919061393f565b905080821115612c13578091505b612c1c82612fa1565b612c258261303f565b612c2d612322565b9450612c376114de565b93505050612bab565b8515612c4f57612c4f86612fa1565b505050505050565b600a5415801590612c785750336000908152600d602052604090205460ff16155b15612caa57600954600a54612caa916001600160a01b031690612ca5908490670de0b6b3a764000061284b565b61299d565b612a008261316c565b6001600160a01b03821660009081526003602052604081208054839290612cdb90849061393f565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020613e22833981519152906020016129eb565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080612d8d5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610a8f565b50505050565b6115c8613177565b612da6600080612a04565b50565b60125460405163e8eda9df60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052306044830152600060648301529091169063e8eda9df90608401600060405180830381600087803b158015612e2457600080fd5b505af1158015612996573d6000803e3d6000fd5b601654604051630a28a47760e01b8152600481018390526000916001600160a01b031690630a28a47790602401602060405180830381865afa158015612e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea691906138f8565b60125460165460405163a415bcad60e01b81526001600160a01b039182166004820152602481018490526002604482015260006064820152306084820152929350169063a415bcad9060a401600060405180830381600087803b158015612f0c57600080fd5b505af1158015612f20573d6000803e3d6000fd5b5050601654604051635d043b2960e11b815260048101859052306024820181905260448201526001600160a01b03909116925063ba08765291506064015b6020604051808303816000875af1158015612f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7891906138f8565b601254604051631a4ca37b60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052306044830152909116906369328dec906064015b6020604051808303816000875af115801561301b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0091906138f8565b60165460405163ef8b30f760e01b8152600481018390526000916001600160a01b03169063ef8b30f790602401602060405180830381865afa158015613089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ad91906138f8565b6016546040516394bf804d60e01b8152600481018390523060248201529192506001600160a01b0316906394bf804d906044016020604051808303816000875af11580156130ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312391906138f8565b5060125460165460405163573ade8160e01b81526001600160a01b039182166004820152602481018490526002604482015230606482015291169063573ade8190608401612f5e565b612da6816000612a04565b604080516002808252606082018352600092602083019080368337505060145482519293506001600160a01b0316918391506000906131b8576131b86139c5565b6001600160a01b0392831660209182029290920101526015548251911690829060019081106131e9576131e96139c5565b6001600160a01b0392831660209182029290920101526013546040516345accf9360e11b8152911690633111e7b39083908390638b599f26906132329084903090600401613b89565b602060405180830381865afa15801561324f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327391906138f8565b306040518463ffffffff1660e01b8152600401612ffc93929190613dee565b60005b838110156132ad578181015183820152602001613295565b83811115612d8d5750506000910152565b600081518084526132d6816020860160208601613292565b601f01601f19169290920160200192915050565b602081526000610ba360208301846132be565b6001600160a01b0381168114612da657600080fd5b8035801515811461332257600080fd5b919050565b60008060006060848603121561333c57600080fd5b8335613347816132fd565b925061335560208501613312565b915061336360408501613312565b90509250925092565b60006020828403121561337e57600080fd5b5035919050565b6000806040838503121561339857600080fd5b82356133a3816132fd565b946020939093013593505050565b6000806000606084860312156133c657600080fd5b83356133d1816132fd565b925060208401356133e1816132fd565b929592945050506040919091013590565b60006020828403121561340457600080fd5b8135610ba3816132fd565b6000806040838503121561342257600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b8281101561348a5761347a848351805163ffffffff1682526020908101516001600160e01b0316910152565b928401929085019060010161344e565b5091979650505050505050565b600081518084526020808501945080840160005b838110156134d05781516001600160a01b0316875295820195908201906001016134ab565b509495945050505050565b602081526000610ba36020830184613497565b6000806040838503121561350157600080fd5b823591506020830135613513816132fd565b809150509250929050565b815163ffffffff1681526020808301516001600160e01b03169082015260408101610c11565b60008060006060848603121561355957600080fd5b83359250602084013561356b816132fd565b9150604084013561357b816132fd565b809150509250925092565b6000806040838503121561359957600080fd5b82356135a4816132fd565b91506135b260208401613312565b90509250929050565b600080600080600080600060e0888a0312156135d657600080fd5b87356135e1816132fd565b965060208801356135f1816132fd565b95506040880135945060608801359350608088013560ff8116811461361557600080fd5b9699959850939692959460a0840135945060c09093013592915050565b602080825282518282018190526000919060409081850190868401855b8281101561348a57815180516001600160a01b0316855286015186850152928401929085019060010161364f565b6000806040838503121561369057600080fd5b823561369b816132fd565b91506020830135613513816132fd565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156136e4576136e46136ab565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613713576137136136ab565b604052919050565b600067ffffffffffffffff821115613735576137356136ab565b50601f01601f191660200190565b600080604080848603121561375757600080fd5b833567ffffffffffffffff8082111561376f57600080fd5b818601915086601f83011261378357600080fd5b8135602082821115613797576137976136ab565b8160051b6137a68282016136ea565b928352848101820192828101908b8511156137c057600080fd5b83870192505b84831015613884578235868111156137de5760008081fd5b8701808d03601f19018913156137f45760008081fd5b6137fc6136c1565b85820135613809816132fd565b8152818a01358881111561381d5760008081fd5b8083019250508d603f8301126138335760008081fd5b858201356138486138438261371b565b6136ea565b8181528f8c83860101111561385d5760008081fd5b818c85018983013760009181018801919091528187015283525091830191908301906137c6565b9b999092013599505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156138eb57603f198886030184526138d98583516132be565b945092850192908501906001016138bd565b5092979650505050505050565b60006020828403121561390a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561393a5761393a613911565b500190565b60008282101561395157613951613911565b500390565b600181811c9082168061396a57607f821691505b60208210810361398a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600081601b0b83601b0b60008112816401ffffffff60df1b01831281151615613a0657613a06613911565b6001600160df1b0382018313811615613a2157613a21613911565b5090039392505050565b6000601b82810b9084900b6001600160df1b0383821384841380821684840486111615613a5a57613a5a613911565b6001600160df1b03196000851282811687830587121615613a7d57613a7d613911565b60008712925085820587128484161615613a9957613a99613911565b85850587128184161615613aaf57613aaf613911565b5050509290910295945050505050565b600081601b0b83601b0b80613ae457634e487b7160e01b600052601260045260246000fd5b6001600160df1b0319821460001982141615613b0257613b02613911565b90059392505050565b600060018201613b1d57613b1d613911565b5060010190565b60208082526028908201527f4f6e6c79206d616e61676572206f72204f776e657220697320616c6c6f776564604082015267081d1bc818d85b1b60c21b606082015260800190565b600060208284031215613b7e57600080fd5b8151610ba3816132fd565b604081526000613b9c6040830185613497565b905060018060a01b03831660208301529392505050565b60008251613bc5818460208701613292565b9190910192915050565b600060208284031215613be157600080fd5b815167ffffffffffffffff811115613bf857600080fd5b8201601f81018413613c0957600080fd5b8051613c176138438261371b565b818152856020838501011115613c2c57600080fd5b610c7f826020830160208601613292565b600181815b80851115613c78578160001904821115613c5e57613c5e613911565b80851615613c6b57918102915b93841c9390800290613c42565b509250929050565b600082613c8f57506001610c11565b81613c9c57506000610c11565b8160018114613cb25760028114613cbc57613cd8565b6001915050610c11565b60ff841115613ccd57613ccd613911565b50506001821b610c11565b5060208310610133831016604e8410600b8410161715613cfb575081810a610c11565b613d058383613c3d565b8060001904821115613d1957613d19613911565b029392505050565b6000610ba360ff841683613c80565b600080835481600182811c915080831680613d4c57607f831692505b60208084108203613d6b57634e487b7160e01b86526022600452602486fd5b818015613d7f5760018114613d9457613dc1565b60ff1986168952841515850289019650613dc1565b60008a81526020902060005b86811015613db95781548b820152908501908301613da0565b505084890196505b509498975050505050505050565b6000816000190483118215151615613de957613de9613911565b500290565b606081526000613e016060830186613497565b6020830194909452506001600160a01b039190911660409091015291905056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122093191d3fe316616a69cd8be592ff7985f44a21902c8561922978f0af550c039c64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBorrowedFromProtocol()": {
        "returns": {
          "_0": "Assets borrowed"
        }
      },
      "getProtocolLiquidity()": {
        "details": "ignored on this version",
        "returns": {
          "_0": "liquidity The diff"
        }
      },
      "getRemainingProtocolBorrowCap()": {
        "details": "ignored on this versionshould return 0 if the borrow cap is exhausted",
        "returns": {
          "_0": "remainingBorrowCap"
        }
      },
      "getRemainingProtocolSupplyCap()": {
        "details": "ignored on this versionshould return 0 if the supply cap is exhausted",
        "returns": {
          "_0": "remainingSupplyCap"
        }
      },
      "getSuppliedToProtocol()": {
        "returns": {
          "_0": "Assets supplied"
        }
      },
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "getBorrowedFromProtocol()": {
        "notice": "Get amount of assets borrowed from the protocol by the vault"
      },
      "getProtocolLiquidity()": {
        "notice": "Get liquidity availailable in the protocol"
      },
      "getRemainingProtocolBorrowCap()": {
        "notice": "Get remaining borrow cap in the protocol"
      },
      "getRemainingProtocolSupplyCap()": {
        "notice": "Get remaining supply cap in the protocol"
      },
      "getSuppliedToProtocol()": {
        "notice": "Get amount of assets supplied to the protocol by the vault"
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 838,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 840,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 844,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 848,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 854,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "allowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 862,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4775,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "manager",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4777,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "feeTaker",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 4779,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "withdrawalFee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4781,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "harvestFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4785,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "harvestCheckpoints",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(HarvestCheckpoint)4733_storage)dyn_storage"
      },
      {
        "astId": 4789,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "excludedFromFees",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4793,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "allowedHarvesters",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4796,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "_allHarvesters",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4188,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "targetCollateralRatio",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 4190,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "maxCollateralRatio",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 1421,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "lendingPool",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(ILendingPool)3686"
      },
      {
        "astId": 1424,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "incentivesController",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IAaveIncentivesController)3308"
      },
      {
        "astId": 1427,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "aToken",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IERC20)196"
      },
      {
        "astId": 1430,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "debtToken",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(IERC20)196"
      },
      {
        "astId": 1433,
        "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
        "label": "vault",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(IERC4626)4003"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(HarvestCheckpoint)4733_storage)dyn_storage": {
        "base": "t_struct(HarvestCheckpoint)4733_storage",
        "encoding": "dynamic_array",
        "label": "struct HarvestCheckpoint[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAaveIncentivesController)3308": {
        "encoding": "inplace",
        "label": "contract IAaveIncentivesController",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)196": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC4626)4003": {
        "encoding": "inplace",
        "label": "contract IERC4626",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)3686": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(HarvestCheckpoint)4733_storage": {
        "encoding": "inplace",
        "label": "struct HarvestCheckpoint",
        "members": [
          {
            "astId": 4730,
            "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4732,
            "contract": "contracts/citrus-vaults/src/Aave2ERC4626LeveragedVault.sol:Aave2ERC4626LeveragedVault",
            "label": "assetsPerShare",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
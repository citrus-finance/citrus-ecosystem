{
  "address": "0xed538CC614208F66ac1c087fB4FA37532D47a5b6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract ILendingPool",
          "name": "_lendingPool",
          "type": "address"
        },
        {
          "internalType": "contract IAaveIncentivesController",
          "name": "_incentivesController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetsPerShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesToHarvester",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "UpdateAllowedHarvester",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "excluded",
          "type": "bool"
        }
      ],
      "name": "UpdateFeeExclusion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "UpdateHarvestFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "UpdateWithdrawalFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WITHDRAWAL_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_allHarvesters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allHarvesters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "allowHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedHarvesters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "exclude",
          "type": "bool"
        }
      ],
      "name": "excludeFromFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "excludedFromFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainingProtocolSupplyCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSuppliedToProtocol",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct HarvestCall[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "harvestCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "blockTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint224",
          "name": "assetsPerShare",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestCheckpointsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestable",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Harvestable[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "invertedHarvestCheckpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "assetsPerShare",
              "type": "uint224"
            }
          ],
          "internalType": "struct HarvestCheckpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "selectHarvestCheckpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "assetsPerShare",
              "type": "uint224"
            }
          ],
          "internalType": "struct HarvestCheckpoint[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "selectInvertedHarvestCheckpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "assetsPerShare",
              "type": "uint224"
            }
          ],
          "internalType": "struct HarvestCheckpoint[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTaker",
          "type": "address"
        }
      ],
      "name": "setFeeTaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_harvestFee",
          "type": "uint256"
        }
      ],
      "name": "setHarvestFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalFee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "diffTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "diffAssetsPerShare",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x18da50b8a50024fc65edf71e0d0356659302e7a80a7ed5d61f7a76c622ffd655",
  "receipt": {
    "to": null,
    "from": "0x5BAcf7E843fDEF590209521B5541d6E71dc01880",
    "contractAddress": "0xed538CC614208F66ac1c087fB4FA37532D47a5b6",
    "transactionIndex": 14,
    "gasUsed": "3260528",
    "logsBloom": "0x
    "blockHash": "0x57c86931ca7b9882ad589c8d280a6ca557d89c5c482ae520974969ebfd11c2ee",
    "transactionHash": "0x18da50b8a50024fc65edf71e0d0356659302e7a80a7ed5d61f7a76c622ffd655",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 28365978,
        "transactionHash": "0x18da50b8a50024fc65edf71e0d0356659302e7a80a7ed5d61f7a76c622ffd655",
        "address": "0xed538CC614208F66ac1c087fB4FA37532D47a5b6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005bacf7e843fdef590209521b5541d6e71dc01880"
        ],
        "data": "0x",
        "logIndex": 50,
        "blockHash": "0x57c86931ca7b9882ad589c8d280a6ca557d89c5c482ae520974969ebfd11c2ee"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 28365978,
        "transactionHash": "0x18da50b8a50024fc65edf71e0d0356659302e7a80a7ed5d61f7a76c622ffd655",
        "address": "0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ed538cc614208f66ac1c087fb4fa37532d47a5b6",
          "0x0000000000000000000000005b8d36de471880ee21936f328aab2383a280cb2a"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 51,
        "blockHash": "0x57c86931ca7b9882ad589c8d280a6ca557d89c5c482ae520974969ebfd11c2ee"
      }
    ],
    "blockNumber": 28365978,
    "cumulativeGasUsed": "5863097",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d",
    "Citrus WXDAI on RMM Vault",
    "crmmWXDAI",
    "0x5B8D36De471880Ee21936f328AAB2383a280CB2A",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "1fec3603f8748d3d431f453445977753",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract ILendingPool\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"contract IAaveIncentivesController\",\"name\":\"_incentivesController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetsPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesToHarvester\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"UpdateAllowedHarvester\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"UpdateFeeExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UpdateHarvestFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UpdateWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAWAL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_allHarvesters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allHarvesters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedHarvesters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingProtocolSupplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuppliedToProtocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct HarvestCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"harvestCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"assetsPerShare\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestCheckpointsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestable\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Harvestable[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"invertedHarvestCheckpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"assetsPerShare\",\"type\":\"uint224\"}],\"internalType\":\"struct HarvestCheckpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"selectHarvestCheckpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"assetsPerShare\",\"type\":\"uint224\"}],\"internalType\":\"struct HarvestCheckpoint[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"selectInvertedHarvestCheckpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"assetsPerShare\",\"type\":\"uint224\"}],\"internalType\":\"struct HarvestCheckpoint[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTaker\",\"type\":\"address\"}],\"name\":\"setFeeTaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvestFee\",\"type\":\"uint256\"}],\"name\":\"setHarvestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"diffTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"diffAssetsPerShare\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRemainingProtocolSupplyCap()\":{\"details\":\"ignored on this versionshould return 0 if the supply cap is exhausted\",\"returns\":{\"_0\":\"remainingSupplyCap\"}},\"getSuppliedToProtocol()\":{\"returns\":{\"_0\":\"Assets supplied\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"getRemainingProtocolSupplyCap()\":{\"notice\":\"Get remaining supply cap in the protocol\"},\"getSuppliedToProtocol()\":{\"notice\":\"Get amount of assets supplied to the protocol by the vault\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/citrus-vaults/src/Aave2Vault.sol\":\"Aave2Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/citrus-vaults/lib/BoringSolidity/contracts/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Simplified by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5c95af9d26812f279c232d8908c3e2e4ab5054ec1a76275589be4b40857a281c\",\"license\":\"MIT\"},\"contracts/citrus-vaults/lib/BoringSolidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\\n    // By removing them you can't accidentally use them.\\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IStrictERC20 {\\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3ab46c194bf6ebcb4ae1b094c7e41061ef651ee1150d1a07beaf9db085dee0ee\",\"license\":\"MIT\"},\"contracts/citrus-vaults/lib/solmate/src/mixins/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa404f6f45bd53f24a90cc5ffe95e16b52e3f2dfd88f0d7a1edcb35f815919a7b\",\"license\":\"AGPL-3.0-only\"},\"contracts/citrus-vaults/lib/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"contracts/citrus-vaults/lib/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9faabac0803e077fb8d8950f5e2fec1984d3e6cd6ad5fc144609b5c9de83d169\",\"license\":\"AGPL-3.0-only\"},\"contracts/citrus-vaults/lib/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x333b56bef66ff71e3838910781df214acbeb6c2d6ace27a04ebb510f0e669300\",\"license\":\"AGPL-3.0-only\"},\"contracts/citrus-vaults/src/Aave2Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"../lib/BoringSolidity/contracts/interfaces/IERC20.sol\\\";\\n\\nimport \\\"./external/aave-v2/ILendingPool.sol\\\";\\nimport \\\"./external/aave-v2/IAaveIncentivesController.sol\\\";\\n\\nimport \\\"./mixins/SimpleVault.sol\\\";\\n\\ncontract Aave2Vault is SimpleVault {\\n    ILendingPool lendingPool;\\n\\n    IAaveIncentivesController incentivesController;\\n\\n    IERC20 aToken;\\n\\n    constructor(\\n        ERC20 asset,\\n        string memory name,\\n        string memory symbol,\\n        ILendingPool _lendingPool,\\n        IAaveIncentivesController _incentivesController\\n    ) SimpleVault(asset, name, symbol) {\\n        lendingPool = _lendingPool;\\n        incentivesController = _incentivesController;\\n\\n        DataTypes.ReserveData memory data = lendingPool.getReserveData(\\n            address(asset)\\n        );\\n\\n        aToken = IERC20(data.aTokenAddress);\\n\\n        asset.approve(address(lendingPool), type(uint256).max);\\n    }\\n\\n    function getSuppliedToProtocol() public view override returns (uint256) {\\n        return aToken.balanceOf(address(this));\\n    }\\n\\n    function supplyToProtocol(uint256 amount) internal override {\\n        lendingPool.deposit(address(asset), amount, address(this), 0);\\n    }\\n\\n    function redeemFromProtocol(uint256 amount) internal override {\\n        lendingPool.withdraw(address(asset), amount, address(this));\\n    }\\n\\n    function getRemainingProtocolSupplyCap()\\n        public\\n        pure\\n        override\\n        returns (uint256)\\n    {\\n        return type(uint256).max;\\n    }\\n\\n    function collectHarvest() internal override {\\n        if (address(incentivesController) == address(0)) {\\n            return;\\n        }\\n\\n        address[] memory assets = new address[](1);\\n        assets[0] = address(aToken);\\n\\n        incentivesController.claimRewards(\\n            assets,\\n            incentivesController.getRewardsBalance(assets, address(this)),\\n            address(this)\\n        );\\n    }\\n\\n    function harvestable() public view override returns (Harvestable[] memory) {\\n        if (address(incentivesController) == address(0)) {\\n            return new Harvestable[](0);\\n        }\\n\\n        address[] memory assets = new address[](1);\\n        assets[0] = address(aToken);\\n\\n        address rewardToken = incentivesController.REWARD_TOKEN();\\n        uint256 amount = incentivesController.getRewardsBalance(\\n            assets,\\n            address(this)\\n        );\\n\\n        Harvestable[] memory arr = new Harvestable[](1);\\n        arr[0] = Harvestable({token: rewardToken, amount: amount});\\n        return arr;\\n    }\\n}\\n\",\"keccak256\":\"0xf5dd256fd6d49a6e69a1eed43d3730af8d1b21e3027aad46e57c0fa067110119\",\"license\":\"MIT\"},\"contracts/citrus-vaults/src/external/aave-v2/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\",\"keccak256\":\"0x20b0a0d44a1967dff6321de9c8147e41598035b95883a06923e9b25d48e5a380\",\"license\":\"agpl-3.0\"},\"contracts/citrus-vaults/src/external/aave-v2/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\ninterface IAaveIncentivesController {\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /*\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function getAssetData(address asset)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /*\\n   * LEGACY **************************\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function assets(address asset)\\n    external\\n    view\\n    returns (\\n      uint128,\\n      uint128,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @param asset The asset to incentivize\\n   * @return the user index for the asset\\n   */\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function PRECISION() external view returns (uint8);\\n\\n  /**\\n   * @dev Gets the distribution end timestamp of the emissions\\n   */\\n  function DISTRIBUTION_END() external view returns (uint256);\\n}\",\"keccak256\":\"0x11c0b903229aee9e7d11a9dcc43b7b99d6e1c74bc99699d42f71db97e8df67ac\",\"license\":\"agpl-3.0\"},\"contracts/citrus-vaults/src/external/aave-v2/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from './DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\",\"keccak256\":\"0xe82bc9265df3a2a12d7acb6a1aef6eafbbc195c731a51d3c5bffbfd612a26fc2\",\"license\":\"agpl-3.0\"},\"contracts/citrus-vaults/src/external/aave-v2/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\",\"keccak256\":\"0x9ed2c9cf47ec8d8ecc0bf17082dd177ebd81866f63ce62a17fcb0ed2504ee31c\",\"license\":\"agpl-3.0\"},\"contracts/citrus-vaults/src/mixins/SimpleVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./Vault.sol\\\";\\n\\nabstract contract SimpleVault is Vault {\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) Vault(_asset, _name, _symbol) {}\\n\\n    /////  Vault hooks  /////\\n\\n    function totalAssets() public view override returns (uint256) {\\n        return asset.balanceOf(address(this)) + getSuppliedToProtocol();\\n    }\\n\\n    function onDeposit(uint256 assets) internal override {\\n        supplyToProtocol(assets);\\n    }\\n\\n    function onWithdraw(uint256 assets) internal override {\\n        redeemFromProtocol(assets);\\n    }\\n\\n    function onHarvest() internal override {\\n        collectHarvest();\\n    }\\n\\n    function afterHarvest() internal override {\\n        uint256 assetBalance = asset.balanceOf(address(this));\\n\\n        if (assetBalance > 0) {\\n            supplyToProtocol(assetBalance);\\n        }\\n    }\\n\\n    /////  Hooks  /////\\n\\n    /**\\n     * @notice Get amount of assets supplied to the protocol by the vault\\n     * @return Assets supplied\\n     */\\n    function getSuppliedToProtocol() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Supply assets to protocol\\n     * @param amount Assets to supply to the protocol\\n     */\\n    function supplyToProtocol(uint256 amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw assets from protocol\\n     * @param amount Assets to redeem from the protocol\\n     */\\n    function redeemFromProtocol(uint256 amount) internal virtual;\\n\\n    /**\\n     * @notice Get remaining supply cap in the protocol\\n     * @return remainingSupplyCap\\n     * @dev ignored on this version\\n     * @dev should return 0 if the supply cap is exhausted\\n     */\\n    function getRemainingProtocolSupplyCap()\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    /**\\n     * @notice Colect rewards token from protocol\\n     */\\n    function collectHarvest() internal virtual {}\\n}\\n\",\"keccak256\":\"0x667cd1f9fd3c37b4195272eee8f8531babafb2c362729860233f3cd2bca16b65\",\"license\":\"MIT\"},\"contracts/citrus-vaults/src/mixins/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"../../lib/solmate/src/mixins/ERC4626.sol\\\";\\nimport {FixedPointMathLib} from \\\"../../lib/solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport \\\"../../lib/BoringSolidity/contracts/BoringOwnable.sol\\\";\\n\\nstruct HarvestCall {\\n    address target;\\n    bytes callData;\\n}\\n\\nstruct Harvestable {\\n    address token;\\n    uint256 amount;\\n}\\n\\nstruct HarvestCheckpoint {\\n    // rolling block timestamp\\n    uint32 blockTimestamp;\\n\\n    // rolling amount of assets per share\\n    uint224 assetsPerShare;\\n}\\n\\nabstract contract Vault is ERC4626, BoringOwnable {\\n    using FixedPointMathLib for uint256;\\n\\n    event UpdateFeeExclusion(address user, bool excluded);\\n    event UpdateAllowedHarvester(address target, bool allowed);\\n    event Harvest(uint assetsPerShare, uint sharesToHarvester);\\n    event UpdateWithdrawalFee(uint256 oldFee, uint256 newFee);\\n    event UpdateHarvestFee(uint256 oldFee, uint256 newFee);\\n\\n    uint256 public constant MAX_WITHDRAWAL_FEE = 0.01e18; // 1%\\n\\n    // @notice The manager is allowed to perform some privileged actions on the vault, \\n    address public manager;\\n\\n    // @notice This address receive all fees captured by this vault\\n    address public feeTaker;\\n\\n    // @notice Percentage the user has to pay to withdraw. 1e18 is 100%\\n    uint256 public withdrawalFee;\\n\\n    // @notice Harvesting generate . 1e18 is 100%\\n    uint256 public harvestFee;\\n\\n    // @notice stores assetsPerShare evolution over time\\n    // @dev used to calculate yield/apy\\n    HarvestCheckpoint[] public harvestCheckpoints;\\n\\n    // @notice addresses that are excluded from fees\\n    mapping(address => bool) public excludedFromFees;\\n\\n    // @notice address of contracts that could be called during harvest\\n    mapping(address => bool) public allowedHarvesters;\\n\\n    // @notice array of contracts that could be called during harvest\\n    // @dev only use this to check if a contract should be removed, some disabled harvesters can be in this array\\n    address[] public _allHarvesters;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC4626(_asset, _name, _symbol) {\\n        harvestCheckpoints.push(HarvestCheckpoint({\\n            blockTimestamp: uint32(block.timestamp),\\n            assetsPerShare: uint224(convertToAssets(10 ** decimals))\\n        }));\\n    }\\n\\n    /////  Harvest  /////\\n\\n    // modified version of: https://github.com/makerdao/multicall/blob/1e1b44362640820bef92d0ccf5eeee25d9b41474/src/Multicall.sol#L17-L25\\n    // @dev The caller could steal the harvest but should not be able to steal any of the deposited funds.\\n    // Stealing the harvest would result in bad PR and users withdrawing their funds without losing their principal.\\n    function harvest(HarvestCall[] memory calls, uint256 amountOutMin) public virtual onlyManager returns (bytes[] memory returnData) {\\n        uint256 balanceBefore = totalAssets();\\n\\n        onHarvest();\\n\\n        returnData = new bytes[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            require(allowedHarvesters[calls[i].target], \\\"harvestor not allowed\\\");\\n\\n            bool success;\\n            bytes memory ret;\\n\\n            (success, ret) = calls[i].target.delegatecall(calls[i].callData);\\n            \\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (ret.length < 68) revert();\\n                assembly {\\n                    ret := add(ret, 0x04)\\n                }\\n                revert(abi.decode(ret, (string)));\\n            }\\n\\n            returnData[i] = ret;\\n        }\\n\\n        uint256 balanceAfter = totalAssets();\\n\\n        require(balanceAfter >= balanceBefore, \\\"negative harvest\\\");\\n        uint256 diffBalance;\\n        unchecked {\\n          diffBalance = balanceAfter - balanceBefore;\\n        }\\n\\n        require(diffBalance >= amountOutMin, \\\"insufficient output amount\\\");\\n\\n        uint256 denom = balanceBefore + (diffBalance.mulDivUp(1e18 - harvestFee, 1e18));\\n        uint256 harveterShares = totalSupply.mulDivDown(balanceAfter, denom) - totalSupply;\\n\\n        _mint(feeTaker, harveterShares);\\n\\n        uint256 assetsPerShare = convertToAssets(10 ** decimals);\\n        harvestCheckpoints.push(HarvestCheckpoint({\\n            blockTimestamp: uint32(block.timestamp),\\n            assetsPerShare: uint224(assetsPerShare)\\n        }));\\n        emit Harvest(assetsPerShare, harveterShares);\\n\\n        afterHarvest();\\n    }\\n\\n    // @notice approve a contract to be used during harvesting\\n    function allowHarvester(address target, bool allowed) public onlyOwner {\\n        if (allowed) {\\n            _allHarvesters.push(target);\\n        }\\n        allowedHarvesters[target] = allowed;\\n        emit UpdateAllowedHarvester(target, allowed);\\n    }\\n\\n    // @notive get array of all contracts ever allowed\\n    // @dev could contains harvester that are now disabled\\n    function allHarvesters() public view returns (address[] memory) {\\n        return _allHarvesters;\\n    }\\n\\n    /////  Checkpoints  /////\\n\\n    function harvestCheckpointsLength() public view returns (uint256) {\\n        return harvestCheckpoints.length;\\n    }\\n\\n    function invertedHarvestCheckpoints(uint256 index) public view returns (HarvestCheckpoint memory) {\\n        return harvestCheckpoints[harvestCheckpoints.length - 1 - index];\\n    }\\n\\n    function selectHarvestCheckpoints(uint256 start, uint256 end) public view returns (HarvestCheckpoint[] memory) {\\n        uint256 length = end - start + 1;\\n\\n        HarvestCheckpoint[] memory arr = new HarvestCheckpoint[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            arr[i] = harvestCheckpoints[start + i];\\n        }\\n        return arr;\\n    }\\n\\n    function selectInvertedHarvestCheckpoints(uint256 start, uint256 end) public view returns (HarvestCheckpoint[] memory) {\\n        uint256 length = end - start + 1;\\n        uint256 lastIndex = harvestCheckpoints.length - 1;\\n\\n        HarvestCheckpoint[] memory arr = new HarvestCheckpoint[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            arr[i] = harvestCheckpoints[lastIndex - i];\\n        }\\n        return arr;\\n    }\\n\\n    function yield() public view virtual returns (uint256 diffTimestamp, int256 diffAssetsPerShare) {\\n        uint lastHarvestCheckpointsIndex = harvestCheckpoints.length - 1;\\n\\n        if (lastHarvestCheckpointsIndex < 1) {\\n            return (1 days, 0);\\n        }\\n\\n        HarvestCheckpoint memory lastCheckpoint = harvestCheckpoints[lastHarvestCheckpointsIndex];\\n        HarvestCheckpoint memory beforeLastCheckpoint = harvestCheckpoints[lastHarvestCheckpointsIndex - 1];\\n\\n        unchecked { // timestamp is allowed to overflow\\n            diffTimestamp = lastCheckpoint.blockTimestamp - beforeLastCheckpoint.blockTimestamp;\\n        }\\n        diffAssetsPerShare = int256(((int224(lastCheckpoint.assetsPerShare) - int224(beforeLastCheckpoint.assetsPerShare)) * 1e18) / int224(beforeLastCheckpoint.assetsPerShare));\\n    }\\n\\n    /////  Admin  /////\\n\\n    function setManager(address _manager) public onlyOwner {\\n        manager = _manager;\\n    }\\n\\n    /////  Fees  /////\\n\\n    function excludeFromFees(address user, bool exclude) public onlyOwner {\\n        excludedFromFees[user] = exclude;\\n        emit UpdateFeeExclusion(user, exclude);\\n    }\\n\\n    function setFeeTaker(address _feeTaker) public onlyOwner {\\n        feeTaker = _feeTaker;\\n    }\\n\\n    function setWithdrawalFee(uint256 _withdrawalFee) public onlyOwner {\\n        require(_withdrawalFee <= MAX_WITHDRAWAL_FEE, \\\"the withdrawal fee can be max 1%\\\");\\n\\n        uint256 oldFee = withdrawalFee;\\n        withdrawalFee = _withdrawalFee;\\n\\n        emit UpdateWithdrawalFee(oldFee, _withdrawalFee);\\n    }\\n\\n    function setHarvestFee(uint256 _harvestFee) public onlyOwner {\\n        uint256 oldFee = harvestFee;\\n        harvestFee = _harvestFee;\\n\\n        emit UpdateHarvestFee(oldFee, _harvestFee);\\n    }\\n\\n    /////  ERC4626 hooks  /////\\n\\n    function afterDeposit(uint256 assets, uint256) internal override {\\n        onDeposit(assets);\\n    }\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal override {\\n        if (withdrawalFee != 0 && !excludedFromFees[msg.sender]) {\\n            _mint(feeTaker, shares.mulDivUp(withdrawalFee, 1e18));\\n        }\\n        onWithdraw(assets);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view override returns (uint256) {\\n        uint256 _withdrawalFee = withdrawalFee;\\n\\n        if (excludedFromFees[msg.sender]) {\\n            _withdrawalFee = 0;\\n        } \\n\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        uint shares = supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n        return shares.mulDivUp(1e18, 1e18 - _withdrawalFee);\\n    }\\n\\n    function previewRedeem(uint256 shares) public view override returns (uint256) {\\n        uint256 _withdrawalFee = withdrawalFee;\\n\\n        if (excludedFromFees[msg.sender]) {\\n            _withdrawalFee = 0;\\n        }\\n\\n        return convertToAssets(shares).mulDivDown(1e18 - _withdrawalFee, 1e18);\\n    }\\n\\n    ///// Modifiers  /////\\n\\n    modifier onlyManager() {\\n        require(msg.sender == manager, \\\"Only manager is allowed to call\\\");\\n        _;\\n    }\\n\\n    modifier onlyManagerOrOwner() {\\n        require(msg.sender == manager || msg.sender == owner, \\\"Only manager or Owner is allowed to call\\\");\\n        _;\\n    }\\n\\n    /////  Hooks  /////\\n\\n    function onDeposit(uint256 assets) internal virtual {}\\n\\n    function onWithdraw(uint256 assets) internal virtual {}\\n\\n    function onHarvest() internal virtual {}\\n\\n    function afterHarvest() internal virtual {}\\n\\n    function harvestable() public virtual view returns (Harvestable[] memory);\\n}\",\"keccak256\":\"0xebfef4113670442ae75eb27ff39d3734c156f138e5c89eb5b9b0cfa614a2cbd0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620041763803806200417683398101604081905262000035916200060f565b8484848282828282828181846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200007f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a59190620006d2565b6000620000b384826200077f565b506001620000c283826200077f565b5060ff81166080524660a052620000d8620002f3565b60c0525050506001600160a01b0390921660e0525050600680546001600160a01b031916339081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600c60405180604001604052804263ffffffff16815260200162000162608051600a6200015c919062000960565b6200038f565b6001600160e01b03908116909152825460018101845560009384526020808520845191909401519092166401000000000263ffffffff90921691909117910155601080546001600160a01b03808c166001600160a01b0319928316811790935560118054918c16919092161790556040516335ea6a7560e01b815291975095506335ea6a7594506200020b93508b925060040190506001600160a01b0391909116815260200190565b61018060405180830381865afa1580156200022a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002509190620009f1565b60e0810151601280546001600160a01b0319166001600160a01b0392831617905560105460405163095ea7b360e01b81529082166004820152600019602482015291925087169063095ea7b3906044016020604051808303816000875af1158015620002c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002e6919062000af9565b5050505050505062000bd0565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f600060405162000327919062000b1d565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6002546000908015620003c757620003c1620003aa620003d0565b82856200045c60201b620023b2179092919060201c565b620003c9565b825b9392505050565b6000620003dc6200047c565b60e0516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801562000425573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200044b919062000b9b565b62000457919062000bb5565b905090565b8282028115158415858304851417166200047557600080fd5b0492915050565b6012546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015620004c6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000457919062000b9b565b6001600160a01b03811681146200050257600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60405161018081016001600160401b038111828210171562000541576200054162000505565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000572576200057262000505565b604052919050565b600082601f8301126200058c57600080fd5b81516001600160401b03811115620005a857620005a862000505565b6020620005be601f8301601f1916820162000547565b8281528582848701011115620005d357600080fd5b60005b83811015620005f3578581018301518282018401528201620005d6565b83811115620006055760008385840101525b5095945050505050565b600080600080600060a086880312156200062857600080fd5b85516200063581620004ec565b60208701519095506001600160401b03808211156200065357600080fd5b6200066189838a016200057a565b955060408801519150808211156200067857600080fd5b5062000687888289016200057a565b93505060608601516200069a81620004ec565b6080870151909250620006ad81620004ec565b809150509295509295909350565b805160ff81168114620006cd57600080fd5b919050565b600060208284031215620006e557600080fd5b620003c982620006bb565b600181811c908216806200070557607f821691505b6020821081036200072657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200077a57600081815260208120601f850160051c81016020861015620007555750805b601f850160051c820191505b81811015620007765782815560010162000761565b5050505b505050565b81516001600160401b038111156200079b576200079b62000505565b620007b381620007ac8454620006f0565b846200072c565b602080601f831160018114620007eb5760008415620007d25750858301515b600019600386901b1c1916600185901b17855562000776565b600085815260208120601f198616915b828110156200081c57888601518255948401946001909101908401620007fb565b50858210156200083b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620008a25781600019048211156200088657620008866200084b565b808516156200089457918102915b93841c939080029062000866565b509250929050565b600082620008bb575060016200095a565b81620008ca575060006200095a565b8160018114620008e35760028114620008ee576200090e565b60019150506200095a565b60ff8411156200090257620009026200084b565b50506001821b6200095a565b5060208310610133831016604e8410600b841016171562000933575081810a6200095a565b6200093f838362000861565b80600019048211156200095657620009566200084b565b0290505b92915050565b6000620003c960ff841683620008aa565b6000602082840312156200098457600080fd5b604051602081016001600160401b0381118282101715620009a957620009a962000505565b6040529151825250919050565b80516001600160801b0381168114620006cd57600080fd5b805164ffffffffff81168114620006cd57600080fd5b8051620006cd81620004ec565b6000610180828403121562000a0557600080fd5b62000a0f6200051b565b62000a1b848462000971565b815262000a2b60208401620009b6565b602082015262000a3e60408401620009b6565b604082015262000a5160608401620009b6565b606082015262000a6460808401620009b6565b608082015262000a7760a08401620009b6565b60a082015262000a8a60c08401620009ce565b60c082015262000a9d60e08401620009e4565b60e082015261010062000ab2818501620009e4565b9082015261012062000ac6848201620009e4565b9082015261014062000ada848201620009e4565b9082015261016062000aee848201620006bb565b908201529392505050565b60006020828403121562000b0c57600080fd5b81518015158114620003c957600080fd5b600080835462000b2d81620006f0565b6001828116801562000b48576001811462000b5e5762000b8f565b60ff198416875282151583028701945062000b8f565b8760005260208060002060005b8581101562000b865781548a82015290840190820162000b6b565b50505082870194505b50929695505050505050565b60006020828403121562000bae57600080fd5b5051919050565b6000821982111562000bcb5762000bcb6200084b565b500190565b60805160a05160c05160e05161352d62000c49600039600081816104b80152818161089b015281816112ac015281816114a30152818161175d015281816118a9015281816126e8015281816128db015261296a01526000610df801526000610dc801526000818161045401526122ca015261352d6000f3fe608060405234801561001057600080fd5b50600436106103835760003560e01c80638bc7e8c4116101de578063c63d75b61161010f578063d905777e116100ad578063e30c39781161007c578063e30c397814610828578063eb6ed3301461083b578063ef8b30f714610849578063f8eedf4b1461085c57600080fd5b8063d905777e1461079c578063dbbd47d4146107c5578063dbe66ca0146107da578063dd62ed3e146107fd57600080fd5b8063cdc412dd116100e9578063cdc412dd14610750578063ce96cb7714610763578063d0ebdbe714610776578063d505accf1461078957600080fd5b8063c63d75b614610549578063c6e6f5921461072a578063c866a1e51461073d57600080fd5b8063ac1e50251161017c578063b460af9411610156578063b460af94146106e8578063b5962917146106fb578063ba08765214610704578063c02466681461071757600080fd5b8063ac1e5025146106ba578063b3d7f6b9146106cd578063b45bb10d146106e057600080fd5b806394bf804d116101b857806394bf804d1461068457806395d89b4114610697578063a0807ae11461069f578063a9059cbb146106a757600080fd5b80638bc7e8c4146106485780638da5cb5b14610651578063918195c51461066457600080fd5b806339bad3dd116102b85780636dd46b4f11610256578063725fd92011610230578063725fd920146105fa578063749f104414610602578063792b55b6146106155780637ecebe001461062857600080fd5b80636dd46b4f146105b25780636e553f65146105c757806370a08231146105da57600080fd5b8063481c6a7511610292578063481c6a75146105715780634cdad506146105845780634e71e0c8146105975780634ec5908d1461059f57600080fd5b806339bad3dd14610512578063402d267d1461054957806348023e261461055e57600080fd5b806323b872dd116103255780633644e515116102ff5780633644e51514610488578063367fc2fc1461049057806338d52e0f146104b357806338dbd565146104f257600080fd5b806323b872dd1461041f5780632859398414610432578063313ce5671461044f57600080fd5b806307a2d13a1161036157806307a2d13a146103cd578063095ea7b3146103e05780630a28a4771461040357806318160ddd1461041657600080fd5b806301e1d1141461038857806306fdde03146103a3578063078dfbe7146103b8575b600080fd5b61039061087c565b6040519081526020015b60405180910390f35b6103ab61091d565b60405161039a9190612a07565b6103cb6103c6366004612a44565b6109ab565b005b6103906103db366004612a89565b610ac4565b6103f36103ee366004612aa2565b610af1565b604051901515815260200161039a565b610390610411366004612a89565b610b5e565b61039060025481565b6103f361042d366004612ace565b610bcf565b61043a610caf565b6040805192835260208301919091520161039a565b6104767f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161039a565b610390610dc4565b6103f361049e366004612b0f565b600e6020526000908152604090205460ff1681565b6104da7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161039a565b610505610500366004612b2c565b610e1a565b60405161039a9190612b4e565b610525610520366004612a89565b610f32565b6040805163ffffffff90931683526001600160e01b0390911660208301520161039a565b610390610557366004612b0f565b5060001990565b61050561056c366004612b2c565b610f6a565b6008546104da906001600160a01b031681565b610390610592366004612a89565b611098565b6103cb6110e8565b6103cb6105ad366004612b0f565b6111a6565b6105ba6111f2565b60405161039a9190612bf8565b6103906105d5366004612c0b565b611254565b6103906105e8366004612b0f565b60036020526000908152604090205481565b61039061132e565b6009546104da906001600160a01b031681565b6103cb610623366004612a89565b61139b565b610390610636366004612b0f565b60056020526000908152604090205481565b610390600a5481565b6006546104da906001600160a01b031681565b610677610672366004612a89565b61140b565b60405161039a9190612c3b565b610390610692366004612c0b565b611489565b6103ab611525565b600c54610390565b6103f36106b5366004612aa2565b611532565b6103cb6106c8366004612a89565b611598565b6103906106db366004612a89565b611657565b600019610390565b6103906106f6366004612c61565b611676565b610390600b5481565b610390610712366004612c61565b611784565b6103cb610725366004612ca3565b6118d0565b610390610738366004612a89565b611956565b6104da61074b366004612a89565b611976565b6103cb61075e366004612ca3565b6119a0565b610390610771366004612b0f565b611a78565b6103cb610784366004612b0f565b611a9a565b6103cb610797366004612cd8565b611ae6565b6103906107aa366004612b0f565b6001600160a01b031660009081526003602052604090205490565b6107cd611d2a565b60405161039a9190612d4f565b6103f36107e8366004612b0f565b600d6020526000908152604090205460ff1681565b61039061080b366004612d9a565b600460209081526000928352604080842090915290825290205481565b6007546104da906001600160a01b031681565b610390662386f26fc1000081565b610390610857366004612a89565b611f41565b61086f61086a366004612e60565b611f4c565b60405161039a9190612fb3565b600061088661132e565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156108ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090e9190613015565b6109189190613044565b905090565b6000805461092a9061305c565b80601f01602080910402602001604051908101604052809291908181526020018280546109569061305c565b80156109a35780601f10610978576101008083540402835291602001916109a3565b820191906000526020600020905b81548152906001019060200180831161098657829003601f168201915b505050505081565b6006546001600160a01b031633146109de5760405162461bcd60e51b81526004016109d590613096565b60405180910390fd5b8115610aa2576001600160a01b0383161515806109f85750805b610a3c5760405162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b60448201526064016109d5565b6006546040516001600160a01b038086169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0385166001600160a01b031991821617909155600780549091169055505050565b600780546001600160a01b0385166001600160a01b0319909116179055505050565b6002546000908015610ae857610ae3610adb61087c565b8490836123b2565b610aea565b825b9392505050565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b4c9086815260200190565b60405180910390a35060015b92915050565b600a54336000908152600d602052604081205490919060ff1615610b80575060005b60025460008115610ba457610b9f82610b9761087c565b8791906123d1565b610ba6565b845b9050610bc6670de0b6b3a7640000610bbe85826130cb565b8391906123d1565b95945050505050565b6001600160a01b03831660009081526004602090815260408083203384529091528120546000198114610c2b57610c0683826130cb565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b03851660009081526003602052604081208054859290610c539084906130cb565b90915550506001600160a01b03808516600081815260036020526040908190208054870190555190918716906000805160206134d883398151915290610c9c9087815260200190565b60405180910390a3506001949350505050565b60008060006001600c80549050610cc691906130cb565b90506001811015610cdf57506201518092600092509050565b6000600c8281548110610cf457610cf46130e2565b600091825260208083206040805180820190915292015463ffffffff81168352600160201b90046001600160e01b0316908201529150600c610d376001856130cb565b81548110610d4757610d476130e2565b60009182526020918290206040805180820190915291015463ffffffff808216808452600160201b9092046001600160e01b031683850181905286519487015192909403169750909250610d9c9082906130f8565b610dae90670de0b6b3a7640000613148565b610db891906131dc565b601b0b93505050509091565b60007f00000000000000000000000000000000000000000000000000000000000000004614610df5576109186123ff565b507f000000000000000000000000000000000000000000000000000000000000000090565b60606000610e2884846130cb565b610e33906001613044565b905060008167ffffffffffffffff811115610e5057610e50612dc8565b604051908082528060200260200182016040528015610e9557816020015b6040805180820190915260008082526020820152815260200190600190039081610e6e5790505b50905060005b82811015610f2957600c610eaf8288613044565b81548110610ebf57610ebf6130e2565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091528251839083908110610f0b57610f0b6130e2565b60200260200101819052508080610f2190613228565b915050610e9b565b50949350505050565b600c8181548110610f4257600080fd5b60009182526020909120015463ffffffff81169150600160201b90046001600160e01b031682565b60606000610f7884846130cb565b610f83906001613044565b600c54909150600090610f98906001906130cb565b905060008267ffffffffffffffff811115610fb557610fb5612dc8565b604051908082528060200260200182016040528015610ffa57816020015b6040805180820190915260008082526020820152815260200190600190039081610fd35790505b50905060005b8381101561108e57600c61101482856130cb565b81548110611024576110246130e2565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091528251839083908110611070576110706130e2565b6020026020010181905250808061108690613228565b915050611000565b5095945050505050565b600a54336000908152600d602052604081205490919060ff16156110ba575060005b610aea6110cf82670de0b6b3a76400006130cb565b670de0b6b3a76400006110e186610ac4565b91906123b2565b6007546001600160a01b03163381146111435760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e657260448201526064016109d5565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b039092166001600160a01b0319928316179055600780549091169055565b6006546001600160a01b031633146111d05760405162461bcd60e51b81526004016109d590613096565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6060600f80548060200260200160405190810160405280929190818152602001828054801561124a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161122c575b5050505050905090565b600061125f83611f41565b90508060000361129f5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b60448201526064016109d5565b6112d46001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612499565b6112de8282612523565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610b58838261257d565b6012546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611377573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109189190613015565b6006546001600160a01b031633146113c55760405162461bcd60e51b81526004016109d590613096565b600b80549082905560408051828152602081018490527f1e7b50ac7d699f1fa19946c1c807a39bfb844cb58ea818fa06c8d7da549359c891015b60405180910390a15050565b6040805180820190915260008082526020820152600c80548390611431906001906130cb565b61143b91906130cb565b8154811061144b5761144b6130e2565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b03169181019190915292915050565b600061149483611657565b90506114cb6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612499565b6114d58284612523565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610b58818461257d565b6001805461092a9061305c565b336000908152600360205260408120805483919083906115539084906130cb565b90915550506001600160a01b038316600081815260036020526040908190208054850190555133906000805160206134d883398151915290610b4c9086815260200190565b6006546001600160a01b031633146115c25760405162461bcd60e51b81526004016109d590613096565b662386f26fc100008111156116195760405162461bcd60e51b815260206004820181905260248201527f746865207769746864726177616c206665652063616e206265206d617820312560448201526064016109d5565b600a80549082905560408051828152602081018490527f9988c10f8391e84fefec36b82a3a26109ad0af79150c6c2ae60baf392b31ee9c91016113ff565b6002546000908015610ae857610ae361166e61087c565b8490836123d1565b600061168184610b5e565b9050336001600160a01b038316146116f1576001600160a01b038216600090815260046020908152604080832033845290915290205460001981146116ef576116ca82826130cb565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b6116fb848261258a565b61170582826125e6565b60408051858152602081018390526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610aea6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612648565b6000336001600160a01b038316146117f4576001600160a01b038216600090815260046020908152604080832033845290915290205460001981146117f2576117cd85826130cb565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b6117fd84611098565b90508060000361183d5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b60448201526064016109d5565b611847818561258a565b61185182856125e6565b60408051828152602081018690526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610aea6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168483612648565b6006546001600160a01b031633146118fa5760405162461bcd60e51b81526004016109d590613096565b6001600160a01b0382166000818152600d6020908152604091829020805460ff19168515159081179091558251938452908301527f13e65f4beb0eb8b8336d270aa4ac99e9fa961d9eb25a89ff945d8f1224bbbcda91016113ff565b6002546000908015610ae857610ae38161196e61087c565b8591906123b2565b600f818154811061198657600080fd5b6000918252602090912001546001600160a01b0316905081565b6006546001600160a01b031633146119ca5760405162461bcd60e51b81526004016109d590613096565b8015611a1c57600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b0384161790555b6001600160a01b0382166000818152600e6020908152604091829020805460ff19168515159081179091558251938452908301527fa85166530e095b84b707bec761a551e9f45e9f2b8d7c0afa50073171b1aaafbb91016113ff565b6001600160a01b038116600090815260036020526040812054610b5890610ac4565b6006546001600160a01b03163314611ac45760405162461bcd60e51b81526004016109d590613096565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b42841015611b365760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064016109d5565b60006001611b42610dc4565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611c4e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611c845750876001600160a01b0316816001600160a01b0316145b611cc15760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b60448201526064016109d5565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6011546060906001600160a01b0316611d80576040805160008082526020820190925290611d7a565b6040805180820190915260008082526020820152815260200190600190039081611d535790505b50905090565b60408051600180825281830190925260009160208083019080368337505060125482519293506001600160a01b031691839150600090611dc257611dc26130e2565b6001600160a01b03928316602091820292909201810191909152601154604080516399248ea760e01b8152905160009492909216926399248ea7926004808401938290030181865afa158015611e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e409190613241565b6011546040516345accf9360e11b81529192506000916001600160a01b0390911690638b599f2690611e78908690309060040161325e565b602060405180830381865afa158015611e95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb99190613015565b60408051600180825281830190925291925060009190816020015b6040805180820190915260008082526020820152815260200190600190039081611ed45790505090506040518060400160405280846001600160a01b031681526020018381525081600081518110611f2e57611f2e6130e2565b6020908102919091010152949350505050565b6000610b5882611956565b6008546060906001600160a01b03163314611fa95760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c79206d616e6167657220697320616c6c6f77656420746f2063616c6c0060448201526064016109d5565b6000611fb361087c565b9050611fbd6126c6565b835167ffffffffffffffff811115611fd757611fd7612dc8565b60405190808252806020026020018201604052801561200a57816020015b6060815260200190600190039081611ff55790505b50915060005b84518110156121b157600e600086838151811061202f5761202f6130e2565b602090810291909101810151516001600160a01b031682528101919091526040016000205460ff1661209b5760405162461bcd60e51b81526020600482015260156024820152741a185c9d995cdd1bdc881b9bdd08185b1b1bddd959605a1b60448201526064016109d5565b600060608683815181106120b1576120b16130e2565b6020026020010151600001516001600160a01b03168784815181106120d8576120d86130e2565b6020026020010151602001516040516120f19190613288565b600060405180830381855af49150503d806000811461212c576040519150601f19603f3d011682016040523d82523d6000602084013e612131565b606091505b5090925090508161217e5760448151101561214b57600080fd5b6004810190508080602001905181019061216591906132a4565b60405162461bcd60e51b81526004016109d59190612a07565b80858481518110612191576121916130e2565b6020026020010181905250505080806121a990613228565b915050612010565b5060006121bc61087c565b9050818110156122015760405162461bcd60e51b815260206004820152601060248201526f1b9959d85d1a5d99481a185c9d995cdd60821b60448201526064016109d5565b818103848110156122545760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e74206f757470757420616d6f756e7400000000000060448201526064016109d5565b600061227f600b54670de0b6b3a764000061226f91906130cb565b8390670de0b6b3a76400006123d1565b6122899085613044565b60025490915060009061229d8186856123b2565b6122a791906130cb565b6009549091506122c0906001600160a01b031682612523565b60006122f06103db7f0000000000000000000000000000000000000000000000000000000000000000600a6133f6565b60408051808201825263ffffffff42811682526001600160e01b0380851660208401908152600c805460018101825560009190915293519051909116600160201b029116177fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c790910155519091507f6c8433a8e155f0af04dba058d4e4695f7da554578963d876bdf4a6d8d6399d9c906123969083908590918252602082015260400190565b60405180910390a16123a66126d0565b50505050505092915050565b8282028115158415858304851417166123ca57600080fd5b0492915050565b8282028115158415858304851417166123e957600080fd5b6001826001830304018115150290509392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516124319190613405565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d116001600051141617169150508061251c5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016109d5565b5050505050565b80600260008282546125359190613044565b90915550506001600160a01b0382166000818152600360209081526040808320805486019055518481526000805160206134d883398151915291015b60405180910390a35050565b6125868261276f565b5050565b600a54158015906125ab5750336000908152600d602052604090205460ff16155b156125dd57600954600a546125dd916001600160a01b0316906125d8908490670de0b6b3a76400006123d1565b612523565b61258682612778565b6001600160a01b0382166000908152600360205260408120805483929061260e9084906130cb565b90915550506002805482900390556040518181526000906001600160a01b038416906000805160206134d883398151915290602001612571565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806126c05760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016109d5565b50505050565b6126ce612781565b565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275b9190613015565b9050801561276c5761276c816128c1565b50565b61276c816128c1565b61276c81612950565b6011546001600160a01b031661279357565b60408051600180825281830190925260009160208083019080368337505060125482519293506001600160a01b0316918391506000906127d5576127d56130e2565b6001600160a01b0392831660209182029290920101526011546040516345accf9360e11b8152911690633111e7b39083908390638b599f269061281e908490309060040161325e565b602060405180830381865afa15801561283b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285f9190613015565b306040518463ffffffff1660e01b815260040161287e939291906134a4565b6020604051808303816000875af115801561289d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125869190613015565b60105460405163e8eda9df60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052306044830152600060648301529091169063e8eda9df90608401600060405180830381600087803b15801561293c57600080fd5b505af115801561251c573d6000803e3d6000fd5b601054604051631a4ca37b60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052306044830152909116906369328dec9060640161287e565b60005b838110156129ca5781810151838201526020016129b2565b838111156126c05750506000910152565b600081518084526129f38160208601602086016129af565b601f01601f19169290920160200192915050565b602081526000610aea60208301846129db565b6001600160a01b038116811461276c57600080fd5b80358015158114612a3f57600080fd5b919050565b600080600060608486031215612a5957600080fd5b8335612a6481612a1a565b9250612a7260208501612a2f565b9150612a8060408501612a2f565b90509250925092565b600060208284031215612a9b57600080fd5b5035919050565b60008060408385031215612ab557600080fd5b8235612ac081612a1a565b946020939093013593505050565b600080600060608486031215612ae357600080fd5b8335612aee81612a1a565b92506020840135612afe81612a1a565b929592945050506040919091013590565b600060208284031215612b2157600080fd5b8135610aea81612a1a565b60008060408385031215612b3f57600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b82811015612ba757612b97848351805163ffffffff1682526020908101516001600160e01b0316910152565b9284019290850190600101612b6b565b5091979650505050505050565b600081518084526020808501945080840160005b83811015612bed5781516001600160a01b031687529582019590820190600101612bc8565b509495945050505050565b602081526000610aea6020830184612bb4565b60008060408385031215612c1e57600080fd5b823591506020830135612c3081612a1a565b809150509250929050565b815163ffffffff1681526020808301516001600160e01b03169082015260408101610b58565b600080600060608486031215612c7657600080fd5b833592506020840135612c8881612a1a565b91506040840135612c9881612a1a565b809150509250925092565b60008060408385031215612cb657600080fd5b8235612cc181612a1a565b9150612ccf60208401612a2f565b90509250929050565b600080600080600080600060e0888a031215612cf357600080fd5b8735612cfe81612a1a565b96506020880135612d0e81612a1a565b95506040880135945060608801359350608088013560ff81168114612d3257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b602080825282518282018190526000919060409081850190868401855b82811015612ba757815180516001600160a01b03168552860151868501529284019290850190600101612d6c565b60008060408385031215612dad57600080fd5b8235612db881612a1a565b91506020830135612c3081612a1a565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612e0157612e01612dc8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612e3057612e30612dc8565b604052919050565b600067ffffffffffffffff821115612e5257612e52612dc8565b50601f01601f191660200190565b6000806040808486031215612e7457600080fd5b833567ffffffffffffffff80821115612e8c57600080fd5b818601915086601f830112612ea057600080fd5b8135602082821115612eb457612eb4612dc8565b8160051b612ec3828201612e07565b928352848101820192828101908b851115612edd57600080fd5b83870192505b84831015612fa157823586811115612efb5760008081fd5b8701808d03601f1901891315612f115760008081fd5b612f19612dde565b85820135612f2681612a1a565b8152818a013588811115612f3a5760008081fd5b8083019250508d603f830112612f505760008081fd5b85820135612f65612f6082612e38565b612e07565b8181528f8c838601011115612f7a5760008081fd5b818c8501898301376000918101880191909152818701528352509183019190830190612ee3565b9b999092013599505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561300857603f19888603018452612ff68583516129db565b94509285019290850190600101612fda565b5092979650505050505050565b60006020828403121561302757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156130575761305761302e565b500190565b600181811c9082168061307057607f821691505b60208210810361309057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000828210156130dd576130dd61302e565b500390565b634e487b7160e01b600052603260045260246000fd5b600081601b0b83601b0b60008112816401ffffffff60df1b018312811516156131235761312361302e565b6001600160df1b038201831381161561313e5761313e61302e565b5090039392505050565b6000601b82810b9084900b6001600160df1b03838213848413808216848404861116156131775761317761302e565b6001600160df1b0319600085128281168783058712161561319a5761319a61302e565b600087129250858205871284841616156131b6576131b661302e565b858505871281841616156131cc576131cc61302e565b5050509290910295945050505050565b600081601b0b83601b0b8061320157634e487b7160e01b600052601260045260246000fd5b6001600160df1b031982146000198214161561321f5761321f61302e565b90059392505050565b60006001820161323a5761323a61302e565b5060010190565b60006020828403121561325357600080fd5b8151610aea81612a1a565b6040815260006132716040830185612bb4565b905060018060a01b03831660208301529392505050565b6000825161329a8184602087016129af565b9190910192915050565b6000602082840312156132b657600080fd5b815167ffffffffffffffff8111156132cd57600080fd5b8201601f810184136132de57600080fd5b80516132ec612f6082612e38565b81815285602083850101111561330157600080fd5b610bc68260208301602086016129af565b600181815b8085111561334d5781600019048211156133335761333361302e565b8085161561334057918102915b93841c9390800290613317565b509250929050565b60008261336457506001610b58565b8161337157506000610b58565b81600181146133875760028114613391576133ad565b6001915050610b58565b60ff8411156133a2576133a261302e565b50506001821b610b58565b5060208310610133831016604e8410600b84101617156133d0575081810a610b58565b6133da8383613312565b80600019048211156133ee576133ee61302e565b029392505050565b6000610aea60ff841683613355565b600080835481600182811c91508083168061342157607f831692505b6020808410820361344057634e487b7160e01b86526022600452602486fd5b818015613454576001811461346957613496565b60ff1986168952841515850289019650613496565b60008a81526020902060005b8681101561348e5781548b820152908501908301613475565b505084890196505b509498975050505050505050565b6060815260006134b76060830186612bb4565b6020830194909452506001600160a01b039190911660409091015291905056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a0326d46e99d539f7e7bd88c176771e0a808fedad4b1803c7063e6db302c1beb64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103835760003560e01c80638bc7e8c4116101de578063c63d75b61161010f578063d905777e116100ad578063e30c39781161007c578063e30c397814610828578063eb6ed3301461083b578063ef8b30f714610849578063f8eedf4b1461085c57600080fd5b8063d905777e1461079c578063dbbd47d4146107c5578063dbe66ca0146107da578063dd62ed3e146107fd57600080fd5b8063cdc412dd116100e9578063cdc412dd14610750578063ce96cb7714610763578063d0ebdbe714610776578063d505accf1461078957600080fd5b8063c63d75b614610549578063c6e6f5921461072a578063c866a1e51461073d57600080fd5b8063ac1e50251161017c578063b460af9411610156578063b460af94146106e8578063b5962917146106fb578063ba08765214610704578063c02466681461071757600080fd5b8063ac1e5025146106ba578063b3d7f6b9146106cd578063b45bb10d146106e057600080fd5b806394bf804d116101b857806394bf804d1461068457806395d89b4114610697578063a0807ae11461069f578063a9059cbb146106a757600080fd5b80638bc7e8c4146106485780638da5cb5b14610651578063918195c51461066457600080fd5b806339bad3dd116102b85780636dd46b4f11610256578063725fd92011610230578063725fd920146105fa578063749f104414610602578063792b55b6146106155780637ecebe001461062857600080fd5b80636dd46b4f146105b25780636e553f65146105c757806370a08231146105da57600080fd5b8063481c6a7511610292578063481c6a75146105715780634cdad506146105845780634e71e0c8146105975780634ec5908d1461059f57600080fd5b806339bad3dd14610512578063402d267d1461054957806348023e261461055e57600080fd5b806323b872dd116103255780633644e515116102ff5780633644e51514610488578063367fc2fc1461049057806338d52e0f146104b357806338dbd565146104f257600080fd5b806323b872dd1461041f5780632859398414610432578063313ce5671461044f57600080fd5b806307a2d13a1161036157806307a2d13a146103cd578063095ea7b3146103e05780630a28a4771461040357806318160ddd1461041657600080fd5b806301e1d1141461038857806306fdde03146103a3578063078dfbe7146103b8575b600080fd5b61039061087c565b6040519081526020015b60405180910390f35b6103ab61091d565b60405161039a9190612a07565b6103cb6103c6366004612a44565b6109ab565b005b6103906103db366004612a89565b610ac4565b6103f36103ee366004612aa2565b610af1565b604051901515815260200161039a565b610390610411366004612a89565b610b5e565b61039060025481565b6103f361042d366004612ace565b610bcf565b61043a610caf565b6040805192835260208301919091520161039a565b6104767f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161039a565b610390610dc4565b6103f361049e366004612b0f565b600e6020526000908152604090205460ff1681565b6104da7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161039a565b610505610500366004612b2c565b610e1a565b60405161039a9190612b4e565b610525610520366004612a89565b610f32565b6040805163ffffffff90931683526001600160e01b0390911660208301520161039a565b610390610557366004612b0f565b5060001990565b61050561056c366004612b2c565b610f6a565b6008546104da906001600160a01b031681565b610390610592366004612a89565b611098565b6103cb6110e8565b6103cb6105ad366004612b0f565b6111a6565b6105ba6111f2565b60405161039a9190612bf8565b6103906105d5366004612c0b565b611254565b6103906105e8366004612b0f565b60036020526000908152604090205481565b61039061132e565b6009546104da906001600160a01b031681565b6103cb610623366004612a89565b61139b565b610390610636366004612b0f565b60056020526000908152604090205481565b610390600a5481565b6006546104da906001600160a01b031681565b610677610672366004612a89565b61140b565b60405161039a9190612c3b565b610390610692366004612c0b565b611489565b6103ab611525565b600c54610390565b6103f36106b5366004612aa2565b611532565b6103cb6106c8366004612a89565b611598565b6103906106db366004612a89565b611657565b600019610390565b6103906106f6366004612c61565b611676565b610390600b5481565b610390610712366004612c61565b611784565b6103cb610725366004612ca3565b6118d0565b610390610738366004612a89565b611956565b6104da61074b366004612a89565b611976565b6103cb61075e366004612ca3565b6119a0565b610390610771366004612b0f565b611a78565b6103cb610784366004612b0f565b611a9a565b6103cb610797366004612cd8565b611ae6565b6103906107aa366004612b0f565b6001600160a01b031660009081526003602052604090205490565b6107cd611d2a565b60405161039a9190612d4f565b6103f36107e8366004612b0f565b600d6020526000908152604090205460ff1681565b61039061080b366004612d9a565b600460209081526000928352604080842090915290825290205481565b6007546104da906001600160a01b031681565b610390662386f26fc1000081565b610390610857366004612a89565b611f41565b61086f61086a366004612e60565b611f4c565b60405161039a9190612fb3565b600061088661132e565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156108ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090e9190613015565b6109189190613044565b905090565b6000805461092a9061305c565b80601f01602080910402602001604051908101604052809291908181526020018280546109569061305c565b80156109a35780601f10610978576101008083540402835291602001916109a3565b820191906000526020600020905b81548152906001019060200180831161098657829003601f168201915b505050505081565b6006546001600160a01b031633146109de5760405162461bcd60e51b81526004016109d590613096565b60405180910390fd5b8115610aa2576001600160a01b0383161515806109f85750805b610a3c5760405162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b60448201526064016109d5565b6006546040516001600160a01b038086169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0385166001600160a01b031991821617909155600780549091169055505050565b600780546001600160a01b0385166001600160a01b0319909116179055505050565b6002546000908015610ae857610ae3610adb61087c565b8490836123b2565b610aea565b825b9392505050565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b4c9086815260200190565b60405180910390a35060015b92915050565b600a54336000908152600d602052604081205490919060ff1615610b80575060005b60025460008115610ba457610b9f82610b9761087c565b8791906123d1565b610ba6565b845b9050610bc6670de0b6b3a7640000610bbe85826130cb565b8391906123d1565b95945050505050565b6001600160a01b03831660009081526004602090815260408083203384529091528120546000198114610c2b57610c0683826130cb565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b03851660009081526003602052604081208054859290610c539084906130cb565b90915550506001600160a01b03808516600081815260036020526040908190208054870190555190918716906000805160206134d883398151915290610c9c9087815260200190565b60405180910390a3506001949350505050565b60008060006001600c80549050610cc691906130cb565b90506001811015610cdf57506201518092600092509050565b6000600c8281548110610cf457610cf46130e2565b600091825260208083206040805180820190915292015463ffffffff81168352600160201b90046001600160e01b0316908201529150600c610d376001856130cb565b81548110610d4757610d476130e2565b60009182526020918290206040805180820190915291015463ffffffff808216808452600160201b9092046001600160e01b031683850181905286519487015192909403169750909250610d9c9082906130f8565b610dae90670de0b6b3a7640000613148565b610db891906131dc565b601b0b93505050509091565b60007f00000000000000000000000000000000000000000000000000000000000000004614610df5576109186123ff565b507f000000000000000000000000000000000000000000000000000000000000000090565b60606000610e2884846130cb565b610e33906001613044565b905060008167ffffffffffffffff811115610e5057610e50612dc8565b604051908082528060200260200182016040528015610e9557816020015b6040805180820190915260008082526020820152815260200190600190039081610e6e5790505b50905060005b82811015610f2957600c610eaf8288613044565b81548110610ebf57610ebf6130e2565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091528251839083908110610f0b57610f0b6130e2565b60200260200101819052508080610f2190613228565b915050610e9b565b50949350505050565b600c8181548110610f4257600080fd5b60009182526020909120015463ffffffff81169150600160201b90046001600160e01b031682565b60606000610f7884846130cb565b610f83906001613044565b600c54909150600090610f98906001906130cb565b905060008267ffffffffffffffff811115610fb557610fb5612dc8565b604051908082528060200260200182016040528015610ffa57816020015b6040805180820190915260008082526020820152815260200190600190039081610fd35790505b50905060005b8381101561108e57600c61101482856130cb565b81548110611024576110246130e2565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091528251839083908110611070576110706130e2565b6020026020010181905250808061108690613228565b915050611000565b5095945050505050565b600a54336000908152600d602052604081205490919060ff16156110ba575060005b610aea6110cf82670de0b6b3a76400006130cb565b670de0b6b3a76400006110e186610ac4565b91906123b2565b6007546001600160a01b03163381146111435760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e657260448201526064016109d5565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b039092166001600160a01b0319928316179055600780549091169055565b6006546001600160a01b031633146111d05760405162461bcd60e51b81526004016109d590613096565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6060600f80548060200260200160405190810160405280929190818152602001828054801561124a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161122c575b5050505050905090565b600061125f83611f41565b90508060000361129f5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b60448201526064016109d5565b6112d46001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612499565b6112de8282612523565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610b58838261257d565b6012546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611377573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109189190613015565b6006546001600160a01b031633146113c55760405162461bcd60e51b81526004016109d590613096565b600b80549082905560408051828152602081018490527f1e7b50ac7d699f1fa19946c1c807a39bfb844cb58ea818fa06c8d7da549359c891015b60405180910390a15050565b6040805180820190915260008082526020820152600c80548390611431906001906130cb565b61143b91906130cb565b8154811061144b5761144b6130e2565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b03169181019190915292915050565b600061149483611657565b90506114cb6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612499565b6114d58284612523565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610b58818461257d565b6001805461092a9061305c565b336000908152600360205260408120805483919083906115539084906130cb565b90915550506001600160a01b038316600081815260036020526040908190208054850190555133906000805160206134d883398151915290610b4c9086815260200190565b6006546001600160a01b031633146115c25760405162461bcd60e51b81526004016109d590613096565b662386f26fc100008111156116195760405162461bcd60e51b815260206004820181905260248201527f746865207769746864726177616c206665652063616e206265206d617820312560448201526064016109d5565b600a80549082905560408051828152602081018490527f9988c10f8391e84fefec36b82a3a26109ad0af79150c6c2ae60baf392b31ee9c91016113ff565b6002546000908015610ae857610ae361166e61087c565b8490836123d1565b600061168184610b5e565b9050336001600160a01b038316146116f1576001600160a01b038216600090815260046020908152604080832033845290915290205460001981146116ef576116ca82826130cb565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b6116fb848261258a565b61170582826125e6565b60408051858152602081018390526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610aea6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612648565b6000336001600160a01b038316146117f4576001600160a01b038216600090815260046020908152604080832033845290915290205460001981146117f2576117cd85826130cb565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b6117fd84611098565b90508060000361183d5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b60448201526064016109d5565b611847818561258a565b61185182856125e6565b60408051828152602081018690526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610aea6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168483612648565b6006546001600160a01b031633146118fa5760405162461bcd60e51b81526004016109d590613096565b6001600160a01b0382166000818152600d6020908152604091829020805460ff19168515159081179091558251938452908301527f13e65f4beb0eb8b8336d270aa4ac99e9fa961d9eb25a89ff945d8f1224bbbcda91016113ff565b6002546000908015610ae857610ae38161196e61087c565b8591906123b2565b600f818154811061198657600080fd5b6000918252602090912001546001600160a01b0316905081565b6006546001600160a01b031633146119ca5760405162461bcd60e51b81526004016109d590613096565b8015611a1c57600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b0384161790555b6001600160a01b0382166000818152600e6020908152604091829020805460ff19168515159081179091558251938452908301527fa85166530e095b84b707bec761a551e9f45e9f2b8d7c0afa50073171b1aaafbb91016113ff565b6001600160a01b038116600090815260036020526040812054610b5890610ac4565b6006546001600160a01b03163314611ac45760405162461bcd60e51b81526004016109d590613096565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b42841015611b365760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064016109d5565b60006001611b42610dc4565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611c4e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611c845750876001600160a01b0316816001600160a01b0316145b611cc15760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b60448201526064016109d5565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6011546060906001600160a01b0316611d80576040805160008082526020820190925290611d7a565b6040805180820190915260008082526020820152815260200190600190039081611d535790505b50905090565b60408051600180825281830190925260009160208083019080368337505060125482519293506001600160a01b031691839150600090611dc257611dc26130e2565b6001600160a01b03928316602091820292909201810191909152601154604080516399248ea760e01b8152905160009492909216926399248ea7926004808401938290030181865afa158015611e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e409190613241565b6011546040516345accf9360e11b81529192506000916001600160a01b0390911690638b599f2690611e78908690309060040161325e565b602060405180830381865afa158015611e95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb99190613015565b60408051600180825281830190925291925060009190816020015b6040805180820190915260008082526020820152815260200190600190039081611ed45790505090506040518060400160405280846001600160a01b031681526020018381525081600081518110611f2e57611f2e6130e2565b6020908102919091010152949350505050565b6000610b5882611956565b6008546060906001600160a01b03163314611fa95760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c79206d616e6167657220697320616c6c6f77656420746f2063616c6c0060448201526064016109d5565b6000611fb361087c565b9050611fbd6126c6565b835167ffffffffffffffff811115611fd757611fd7612dc8565b60405190808252806020026020018201604052801561200a57816020015b6060815260200190600190039081611ff55790505b50915060005b84518110156121b157600e600086838151811061202f5761202f6130e2565b602090810291909101810151516001600160a01b031682528101919091526040016000205460ff1661209b5760405162461bcd60e51b81526020600482015260156024820152741a185c9d995cdd1bdc881b9bdd08185b1b1bddd959605a1b60448201526064016109d5565b600060608683815181106120b1576120b16130e2565b6020026020010151600001516001600160a01b03168784815181106120d8576120d86130e2565b6020026020010151602001516040516120f19190613288565b600060405180830381855af49150503d806000811461212c576040519150601f19603f3d011682016040523d82523d6000602084013e612131565b606091505b5090925090508161217e5760448151101561214b57600080fd5b6004810190508080602001905181019061216591906132a4565b60405162461bcd60e51b81526004016109d59190612a07565b80858481518110612191576121916130e2565b6020026020010181905250505080806121a990613228565b915050612010565b5060006121bc61087c565b9050818110156122015760405162461bcd60e51b815260206004820152601060248201526f1b9959d85d1a5d99481a185c9d995cdd60821b60448201526064016109d5565b818103848110156122545760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e74206f757470757420616d6f756e7400000000000060448201526064016109d5565b600061227f600b54670de0b6b3a764000061226f91906130cb565b8390670de0b6b3a76400006123d1565b6122899085613044565b60025490915060009061229d8186856123b2565b6122a791906130cb565b6009549091506122c0906001600160a01b031682612523565b60006122f06103db7f0000000000000000000000000000000000000000000000000000000000000000600a6133f6565b60408051808201825263ffffffff42811682526001600160e01b0380851660208401908152600c805460018101825560009190915293519051909116600160201b029116177fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c790910155519091507f6c8433a8e155f0af04dba058d4e4695f7da554578963d876bdf4a6d8d6399d9c906123969083908590918252602082015260400190565b60405180910390a16123a66126d0565b50505050505092915050565b8282028115158415858304851417166123ca57600080fd5b0492915050565b8282028115158415858304851417166123e957600080fd5b6001826001830304018115150290509392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516124319190613405565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d116001600051141617169150508061251c5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016109d5565b5050505050565b80600260008282546125359190613044565b90915550506001600160a01b0382166000818152600360209081526040808320805486019055518481526000805160206134d883398151915291015b60405180910390a35050565b6125868261276f565b5050565b600a54158015906125ab5750336000908152600d602052604090205460ff16155b156125dd57600954600a546125dd916001600160a01b0316906125d8908490670de0b6b3a76400006123d1565b612523565b61258682612778565b6001600160a01b0382166000908152600360205260408120805483929061260e9084906130cb565b90915550506002805482900390556040518181526000906001600160a01b038416906000805160206134d883398151915290602001612571565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806126c05760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016109d5565b50505050565b6126ce612781565b565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275b9190613015565b9050801561276c5761276c816128c1565b50565b61276c816128c1565b61276c81612950565b6011546001600160a01b031661279357565b60408051600180825281830190925260009160208083019080368337505060125482519293506001600160a01b0316918391506000906127d5576127d56130e2565b6001600160a01b0392831660209182029290920101526011546040516345accf9360e11b8152911690633111e7b39083908390638b599f269061281e908490309060040161325e565b602060405180830381865afa15801561283b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285f9190613015565b306040518463ffffffff1660e01b815260040161287e939291906134a4565b6020604051808303816000875af115801561289d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125869190613015565b60105460405163e8eda9df60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052306044830152600060648301529091169063e8eda9df90608401600060405180830381600087803b15801561293c57600080fd5b505af115801561251c573d6000803e3d6000fd5b601054604051631a4ca37b60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052306044830152909116906369328dec9060640161287e565b60005b838110156129ca5781810151838201526020016129b2565b838111156126c05750506000910152565b600081518084526129f38160208601602086016129af565b601f01601f19169290920160200192915050565b602081526000610aea60208301846129db565b6001600160a01b038116811461276c57600080fd5b80358015158114612a3f57600080fd5b919050565b600080600060608486031215612a5957600080fd5b8335612a6481612a1a565b9250612a7260208501612a2f565b9150612a8060408501612a2f565b90509250925092565b600060208284031215612a9b57600080fd5b5035919050565b60008060408385031215612ab557600080fd5b8235612ac081612a1a565b946020939093013593505050565b600080600060608486031215612ae357600080fd5b8335612aee81612a1a565b92506020840135612afe81612a1a565b929592945050506040919091013590565b600060208284031215612b2157600080fd5b8135610aea81612a1a565b60008060408385031215612b3f57600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b82811015612ba757612b97848351805163ffffffff1682526020908101516001600160e01b0316910152565b9284019290850190600101612b6b565b5091979650505050505050565b600081518084526020808501945080840160005b83811015612bed5781516001600160a01b031687529582019590820190600101612bc8565b509495945050505050565b602081526000610aea6020830184612bb4565b60008060408385031215612c1e57600080fd5b823591506020830135612c3081612a1a565b809150509250929050565b815163ffffffff1681526020808301516001600160e01b03169082015260408101610b58565b600080600060608486031215612c7657600080fd5b833592506020840135612c8881612a1a565b91506040840135612c9881612a1a565b809150509250925092565b60008060408385031215612cb657600080fd5b8235612cc181612a1a565b9150612ccf60208401612a2f565b90509250929050565b600080600080600080600060e0888a031215612cf357600080fd5b8735612cfe81612a1a565b96506020880135612d0e81612a1a565b95506040880135945060608801359350608088013560ff81168114612d3257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b602080825282518282018190526000919060409081850190868401855b82811015612ba757815180516001600160a01b03168552860151868501529284019290850190600101612d6c565b60008060408385031215612dad57600080fd5b8235612db881612a1a565b91506020830135612c3081612a1a565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612e0157612e01612dc8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612e3057612e30612dc8565b604052919050565b600067ffffffffffffffff821115612e5257612e52612dc8565b50601f01601f191660200190565b6000806040808486031215612e7457600080fd5b833567ffffffffffffffff80821115612e8c57600080fd5b818601915086601f830112612ea057600080fd5b8135602082821115612eb457612eb4612dc8565b8160051b612ec3828201612e07565b928352848101820192828101908b851115612edd57600080fd5b83870192505b84831015612fa157823586811115612efb5760008081fd5b8701808d03601f1901891315612f115760008081fd5b612f19612dde565b85820135612f2681612a1a565b8152818a013588811115612f3a5760008081fd5b8083019250508d603f830112612f505760008081fd5b85820135612f65612f6082612e38565b612e07565b8181528f8c838601011115612f7a5760008081fd5b818c8501898301376000918101880191909152818701528352509183019190830190612ee3565b9b999092013599505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561300857603f19888603018452612ff68583516129db565b94509285019290850190600101612fda565b5092979650505050505050565b60006020828403121561302757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156130575761305761302e565b500190565b600181811c9082168061307057607f821691505b60208210810361309057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000828210156130dd576130dd61302e565b500390565b634e487b7160e01b600052603260045260246000fd5b600081601b0b83601b0b60008112816401ffffffff60df1b018312811516156131235761312361302e565b6001600160df1b038201831381161561313e5761313e61302e565b5090039392505050565b6000601b82810b9084900b6001600160df1b03838213848413808216848404861116156131775761317761302e565b6001600160df1b0319600085128281168783058712161561319a5761319a61302e565b600087129250858205871284841616156131b6576131b661302e565b858505871281841616156131cc576131cc61302e565b5050509290910295945050505050565b600081601b0b83601b0b8061320157634e487b7160e01b600052601260045260246000fd5b6001600160df1b031982146000198214161561321f5761321f61302e565b90059392505050565b60006001820161323a5761323a61302e565b5060010190565b60006020828403121561325357600080fd5b8151610aea81612a1a565b6040815260006132716040830185612bb4565b905060018060a01b03831660208301529392505050565b6000825161329a8184602087016129af565b9190910192915050565b6000602082840312156132b657600080fd5b815167ffffffffffffffff8111156132cd57600080fd5b8201601f810184136132de57600080fd5b80516132ec612f6082612e38565b81815285602083850101111561330157600080fd5b610bc68260208301602086016129af565b600181815b8085111561334d5781600019048211156133335761333361302e565b8085161561334057918102915b93841c9390800290613317565b509250929050565b60008261336457506001610b58565b8161337157506000610b58565b81600181146133875760028114613391576133ad565b6001915050610b58565b60ff8411156133a2576133a261302e565b50506001821b610b58565b5060208310610133831016604e8410600b84101617156133d0575081810a610b58565b6133da8383613312565b80600019048211156133ee576133ee61302e565b029392505050565b6000610aea60ff841683613355565b600080835481600182811c91508083168061342157607f831692505b6020808410820361344057634e487b7160e01b86526022600452602486fd5b818015613454576001811461346957613496565b60ff1986168952841515850289019650613496565b60008a81526020902060005b8681101561348e5781548b820152908501908301613475565b505084890196505b509498975050505050505050565b6060815260006134b76060830186612bb4565b6020830194909452506001600160a01b039190911660409091015291905056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a0326d46e99d539f7e7bd88c176771e0a808fedad4b1803c7063e6db302c1beb64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRemainingProtocolSupplyCap()": {
        "details": "ignored on this versionshould return 0 if the supply cap is exhausted",
        "returns": {
          "_0": "remainingSupplyCap"
        }
      },
      "getSuppliedToProtocol()": {
        "returns": {
          "_0": "Assets supplied"
        }
      },
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "getRemainingProtocolSupplyCap()": {
        "notice": "Get remaining supply cap in the protocol"
      },
      "getSuppliedToProtocol()": {
        "notice": "Get amount of assets supplied to the protocol by the vault"
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 838,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 840,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 844,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 848,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 854,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "allowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 862,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2815,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "manager",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2817,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "feeTaker",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 2819,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "withdrawalFee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2821,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "harvestFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2825,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "harvestCheckpoints",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(HarvestCheckpoint)2773_storage)dyn_storage"
      },
      {
        "astId": 2829,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "excludedFromFees",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2833,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "allowedHarvesters",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2836,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "_allHarvesters",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1420,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "lendingPool",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(ILendingPool)2443"
      },
      {
        "astId": 1423,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "incentivesController",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IAaveIncentivesController)2065"
      },
      {
        "astId": 1426,
        "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
        "label": "aToken",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IERC20)196"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(HarvestCheckpoint)2773_storage)dyn_storage": {
        "base": "t_struct(HarvestCheckpoint)2773_storage",
        "encoding": "dynamic_array",
        "label": "struct HarvestCheckpoint[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAaveIncentivesController)2065": {
        "encoding": "inplace",
        "label": "contract IAaveIncentivesController",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)196": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)2443": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(HarvestCheckpoint)2773_storage": {
        "encoding": "inplace",
        "label": "struct HarvestCheckpoint",
        "members": [
          {
            "astId": 2770,
            "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2772,
            "contract": "contracts/citrus-vaults/src/Aave2Vault.sol:Aave2Vault",
            "label": "assetsPerShare",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
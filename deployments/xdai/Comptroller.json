{
  "address": "0xb091087E865d200c622241D1BC00A67Dd465e083",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardsDistributor",
          "type": "address"
        }
      ],
      "name": "AddedRewardsDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "AutoImplementationsToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketExited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "MarketListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "MarketUnlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "NewBorrowCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBorrowCapGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBorrowCapGuardian",
          "type": "address"
        }
      ],
      "name": "NewBorrowCapGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCloseFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCloseFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidationIncentiveMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationIncentive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPauseGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "NewPauseGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "oldPriceOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "NewPriceOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "NewSupplyCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enforce",
          "type": "bool"
        }
      ],
      "name": "WhitelistEnforcementChanged",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        }
      ],
      "name": "_addRewardsDistributor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "_afterNonReentrant",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract UnitrollerInterface",
          "name": "unitroller",
          "type": "address"
        }
      ],
      "name": "_become",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "_becomeImplementation",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "_beforeNonReentrant",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "_borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "isCEther",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "constructorData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_deployMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "_globalPauseBorrowOverride",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "_mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newBorrowCapGuardian",
          "type": "address"
        }
      ],
      "name": "_setBorrowCapGuardian",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setBorrowPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCloseFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCollateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "_setGlobalPauseBorrowOverride",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract CToken[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketBorrowCaps",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract CToken[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newSupplyCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketSupplyCaps",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setMintPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "_setPauseGuardian",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "_setPriceOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setSeizePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setTransferPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "enforce",
          "type": "bool"
        }
      ],
      "name": "_setWhitelistEnforcement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "suppliers",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "statuses",
          "type": "bool[]"
        }
      ],
      "name": "_setWhitelistStatuses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "_toggleAutoImplementations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "_unsupportMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "adminHasRights",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allBorrowers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "autoImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "borrowCapGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "accountBorrowsNew",
          "type": "uint256"
        }
      ],
      "name": "borrowWithinLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokensByUnderlying",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "checkMembership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closeFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "comptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "enforceWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenAddress",
          "type": "address"
        }
      ],
      "name": "exitMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "fuseAdmin",
      "outputs": [
        {
          "internalType": "contract IFuseFeeDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "fuseAdminHasRights",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAllBorrowers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "contract CToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAssetsIn",
      "outputs": [
        {
          "internalType": "contract CToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenModify",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "getHypotheticalAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRewardsDistributors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getWhitelist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isComptroller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "isDeprecated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateCalculateSeizeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "liquidationIncentiveMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mintAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualMintAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintTokens",
          "type": "uint256"
        }
      ],
      "name": "mintVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exchangeRateMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accountTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mintWithinLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pauseGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingComptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowerIndex",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardsDistributors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "seizeGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "suppliers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supplyCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "transferGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferVerify",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whitelistArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc7d998fd145cfe3ce7c13a2052f4384092763aa57df15ea69529879241902449",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x5BAcf7E843fDEF590209521B5541d6E71dc01880",
    "contractAddress": null,
    "transactionIndex": 7,
    "gasUsed": "5305735",
    "logsBloom": "0x
    "blockHash": "0x6c7e3adbfafa3c8f4dc26c2b86b18c261e3de5aacffc0ecbb4ea1fe9689aa64f",
    "transactionHash": "0xc7d998fd145cfe3ce7c13a2052f4384092763aa57df15ea69529879241902449",
    "logs": [],
    "blockNumber": 28105587,
    "cumulativeGasUsed": "6620486",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c04279b95a9643e46d7ebe9f6a5d8bfb",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardsDistributor\",\"type\":\"address\"}],\"name\":\"AddedRewardsDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"AutoImplementationsToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"MarketListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"MarketUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBorrowCapGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"NewBorrowCapGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCloseFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCloseFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCollateralFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationIncentiveMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPauseGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"NewPauseGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"oldPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyCap\",\"type\":\"uint256\"}],\"name\":\"NewSupplyCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enforce\",\"type\":\"bool\"}],\"name\":\"WhitelistEnforcementChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"_addRewardsDistributor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_afterNonReentrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract UnitrollerInterface\",\"name\":\"unitroller\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_becomeImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_beforeNonReentrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isCEther\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"constructorData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_deployMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_globalPauseBorrowOverride\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"_setBorrowCapGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setBorrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"_setGlobalPauseBorrowOverride\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSupplyCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketSupplyCaps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setMintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setSeizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setTransferPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enforce\",\"type\":\"bool\"}],\"name\":\"_setWhitelistEnforcement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"suppliers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"_setWhitelistStatuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"_toggleAutoImplementations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_unsupportMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminHasRights\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allBorrowers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accountBorrowsNew\",\"type\":\"uint256\"}],\"name\":\"borrowWithinLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokensByUnderlying\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enforceWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fuseAdmin\",\"outputs\":[{\"internalType\":\"contract IFuseFeeDistributor\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fuseAdminHasRights\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllBorrowers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenModify\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardsDistributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"isDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"mintVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintWithinLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowerIndex\",\"type\":\"uint256\"}],\"name\":\"repayBorrowVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsDistributors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seizeGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"suppliers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound\",\"details\":\"This contract should not to be deployed alone; instead, deploy `Unitroller` (proxy contract) on top of this `Comptroller` (logic/implementation contract).\",\"methods\":{\"_addRewardsDistributor(address)\":{\"details\":\"Admin function to add a RewardsDistributor contract\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_afterNonReentrant()\":{\"details\":\"Called by cTokens after a non-reentrant function for pool-wide reentrancy prevention. Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\"},\"_beforeNonReentrant()\":{\"details\":\"Called by cTokens before a non-reentrant function for pool-wide reentrancy prevention. Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\"},\"_deployMarket(bool,bytes,uint256)\":{\"details\":\"Admin function to deploy cToken, set isListed, and add support for the market and set the collateral factor\",\"return\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"},\"_setBorrowCapGuardian(address)\":{\"params\":{\"newBorrowCapGuardian\":\"The address of the new Borrow Cap Guardian\"}},\"_setCloseFactor(uint256)\":{\"details\":\"Admin function to set closeFactor\",\"params\":{\"newCloseFactorMantissa\":\"New close factor, scaled by 1e18\"},\"return\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"},\"_setCollateralFactor(address,uint256)\":{\"details\":\"Admin function to set per-market collateralFactor\",\"params\":{\"cToken\":\"The market to set the factor on\",\"newCollateralFactorMantissa\":\"The new collateral factor, scaled by 1e18\"},\"return\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"},\"_setLiquidationIncentive(uint256)\":{\"details\":\"Admin function to set liquidationIncentive\",\"params\":{\"newLiquidationIncentiveMantissa\":\"New liquidationIncentive scaled by 1e18\"},\"return\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"},\"_setMarketBorrowCaps(address[],uint256[])\":{\"details\":\"Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\",\"params\":{\"cTokens\":\"The addresses of the markets (tokens) to change the borrow caps for\",\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\"}},\"_setMarketSupplyCaps(address[],uint256[])\":{\"details\":\"Admin or borrowCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\",\"params\":{\"cTokens\":\"The addresses of the markets (tokens) to change the supply caps for\",\"newSupplyCaps\":\"The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\"}},\"_setPauseGuardian(address)\":{\"params\":{\"newPauseGuardian\":\"The address of the new Pause Guardian\"},\"return\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"},\"_setPriceOracle(address)\":{\"details\":\"Admin function to set a new price oracle\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setWhitelistEnforcement(bool)\":{\"details\":\"Admin function to set a new whitelist enforcement boolean\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setWhitelistStatuses(address[],bool[])\":{\"details\":\"Admin function to set the whitelist `statuses` for `suppliers`\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_toggleAutoImplementations(bool)\":{\"params\":{\"enabled\":\"If the feature is to be enabled\"},\"return\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"},\"_unsupportMarket(address)\":{\"details\":\"Admin function unset isListed and collateralFactorMantissa and unadd support for the market\",\"params\":{\"cToken\":\"The address of the market (token) to unlist\"},\"return\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"},\"borrowAllowed(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of underlying the account would borrow\",\"borrower\":\"The account which would borrow the asset\",\"cToken\":\"The market to verify the borrow against\"},\"return\":\"0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"},\"borrowVerify(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset requested to borrow\",\"borrower\":\"The address borrowing the underlying\",\"cToken\":\"Asset whose underlying is being borrowed\"}},\"borrowWithinLimits(address,uint256)\":{\"params\":{\"accountBorrowsNew\":\"The user's new borrow balance of the underlying asset\",\"cToken\":\"Asset whose underlying is being borrowed\"}},\"checkMembership(address,address)\":{\"params\":{\"account\":\"The address of the account to check\",\"cToken\":\"The cToken to check\"},\"return\":\"True if the account is in the asset, otherwise false.\"},\"enterMarkets(address[])\":{\"params\":{\"cTokens\":\"The list of addresses of the cToken markets to be enabled\"},\"return\":\"Success indicator for whether each corresponding market was entered\"},\"exitMarket(address)\":{\"details\":\"Sender must not have an outstanding borrow balance in the asset, or be providing neccessary collateral for an outstanding borrow.\",\"params\":{\"cTokenAddress\":\"The address of the asset to be removed\"},\"return\":\"Whether or not the account successfully exited the market\"},\"getAccountLiquidity(address)\":{\"return\":\"(possible error code (semi-opaque), account liquidity in excess of collateral requirements,         account shortfall below collateral requirements)\"},\"getAllBorrowers()\":{\"details\":\"The automatic getter may be used to access an individual borrower.\",\"return\":\"The list of borrower account addresses\"},\"getAllMarkets()\":{\"details\":\"The automatic getter may be used to access an individual market.\",\"return\":\"The list of market addresses\"},\"getAssetsIn(address)\":{\"params\":{\"account\":\"The address of the account to pull assets for\"},\"return\":\"A dynamic list with the assets the account has entered\"},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"params\":{\"account\":\"The account to determine liquidity for\",\"borrowAmount\":\"The amount of underlying to hypothetically borrow\",\"cTokenModify\":\"The market to hypothetically redeem/borrow in\",\"redeemTokens\":\"The number of tokens to hypothetically redeem\"},\"return\":\"(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,         hypothetical account shortfall below collateral requirements)\"},\"getWhitelist()\":{\"details\":\"The automatic getter may be used to access an individual whitelist status.\",\"return\":\"The list of borrower account addresses\"},\"isDeprecated(address)\":{\"details\":\"All borrows in a deprecated cToken market can be immediately liquidated\",\"params\":{\"cToken\":\"The market to check if deprecated\"}},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"repayAmount\":\"The amount of underlying being repaid\"}},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\"}},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"details\":\"Used in liquidation (called in cToken.liquidateBorrowFresh)\",\"params\":{\"actualRepayAmount\":\"The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\",\"cTokenBorrowed\":\"The address of the borrowed cToken\",\"cTokenCollateral\":\"The address of the collateral cToken\"},\"return\":\"(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\"},\"mintAllowed(address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the mint against\",\"mintAmount\":\"The amount of underlying being supplied to the market in exchange for tokens\",\"minter\":\"The account which would get the minted tokens\"},\"return\":\"0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"},\"mintVerify(address,address,uint256,uint256)\":{\"params\":{\"actualMintAmount\":\"The amount of the underlying asset being minted\",\"cToken\":\"Asset being minted\",\"mintTokens\":\"The number of tokens being minted\",\"minter\":\"The address minting the tokens\"}},\"mintWithinLimits(address,uint256,uint256,uint256)\":{\"params\":{\"accountTokens\":\"Underlying amount to mint\",\"cToken\":\"Asset whose underlying is being borrowed\",\"exchangeRateMantissa\":\"Underlying/cToken exchange rate\"}},\"redeemAllowed(address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the redeem against\",\"redeemTokens\":\"The number of cTokens to exchange for the underlying asset in the market\",\"redeemer\":\"The account which would redeem the tokens\"},\"return\":\"0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"},\"redeemVerify(address,address,uint256,uint256)\":{\"params\":{\"cToken\":\"Asset being redeemed\",\"redeemAmount\":\"The amount of the underlying asset being redeemed\",\"redeemTokens\":\"The number of tokens being redeemed\",\"redeemer\":\"The address redeeming the tokens\"}},\"repayBorrowAllowed(address,address,address,uint256)\":{\"params\":{\"borrower\":\"The account which would borrowed the asset\",\"cToken\":\"The market to verify the repay against\",\"payer\":\"The account which would repay the asset\",\"repayAmount\":\"The amount of the underlying asset the account would repay\"},\"return\":\"0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"cToken\":\"Asset being repaid\",\"payer\":\"The address repaying the borrow\"}},\"seizeAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\"}},\"seizeVerify(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\"}},\"transferAllowed(address,address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the transfer against\",\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of cTokens to transfer\"},\"return\":\"0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"},\"transferVerify(address,address,address,uint256)\":{\"params\":{\"cToken\":\"Asset being transferred\",\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of cTokens to transfer\"}}},\"title\":\"Compound's Comptroller Contract\"},\"userdoc\":{\"methods\":{\"_addRewardsDistributor(address)\":{\"notice\":\"Add a RewardsDistributor contracts.\"},\"_deployMarket(bool,bytes,uint256)\":{\"notice\":\"Deploy cToken, add the market to the markets mapping, and set it as listed and set the collateral factor\"},\"_setBorrowCapGuardian(address)\":{\"notice\":\"Admin function to change the Borrow Cap Guardian\"},\"_setCloseFactor(uint256)\":{\"notice\":\"Sets the closeFactor used when liquidating borrows\"},\"_setCollateralFactor(address,uint256)\":{\"notice\":\"Sets the collateralFactor for a market\"},\"_setGlobalPauseBorrowOverride(bool)\":{\"notice\":\"Sets the global pause borrows override\"},\"_setLiquidationIncentive(uint256)\":{\"notice\":\"Sets liquidationIncentive\"},\"_setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\"},\"_setMarketSupplyCaps(address[],uint256[])\":{\"notice\":\"Set the given supply caps for the given cToken markets. Supplying that brings total underlying supply to or above supply cap will revert.\"},\"_setPauseGuardian(address)\":{\"notice\":\"Admin function to change the Pause Guardian\"},\"_setPriceOracle(address)\":{\"notice\":\"Sets a new price oracle for the comptroller\"},\"_setWhitelistEnforcement(bool)\":{\"notice\":\"Sets the whitelist enforcement for the comptroller\"},\"_setWhitelistStatuses(address[],bool[])\":{\"notice\":\"Sets the whitelist `statuses` for `suppliers`\"},\"_toggleAutoImplementations(bool)\":{\"notice\":\"Toggles the auto-implementation feature\"},\"_unsupportMarket(address)\":{\"notice\":\"Removed a market from the markets mapping and sets it as unlisted\"},\"borrowAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"borrowVerify(address,address,uint256)\":{\"notice\":\"Validates borrow and reverts on rejection. May emit logs.\"},\"borrowWithinLimits(address,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"checkMembership(address,address)\":{\"notice\":\"Returns whether the given account is entered in the given asset\"},\"enterMarkets(address[])\":{\"notice\":\"Add assets to be included in account liquidity calculation\"},\"exitMarket(address)\":{\"notice\":\"Removes asset from sender's account liquidity calculation\"},\"getAccountLiquidity(address)\":{\"notice\":\"Determine the current account liquidity wrt collateral requirements\"},\"getAllBorrowers()\":{\"notice\":\"Return all of the borrowers\"},\"getAllMarkets()\":{\"notice\":\"Return all of the markets\"},\"getAssetsIn(address)\":{\"notice\":\"Returns the assets an account has entered\"},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"notice\":\"Determine what the account liquidity would be if the given amounts were redeemed/borrowed\"},\"getRewardsDistributors()\":{\"notice\":\"Returns an array of all RewardsDistributors\"},\"getWhitelist()\":{\"notice\":\"Return all of the whitelist\"},\"isDeprecated(address)\":{\"notice\":\"Returns true if the given cToken market has been deprecated\"},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the liquidation should be allowed to occur\"},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"notice\":\"Validates liquidateBorrow and reverts on rejection. May emit logs.\"},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"notice\":\"Calculate number of tokens of collateral asset to seize given an underlying amount\"},\"mintAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to mint tokens in the given market\"},\"mintVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates mint and reverts on rejection. May emit logs.\"},\"mintWithinLimits(address,uint256,uint256,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"redeemAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to redeem tokens in the given market\"},\"redeemVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates redeem and reverts on rejection. May emit logs.\"},\"repayBorrowAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to repay a borrow in the given market\"},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"notice\":\"Validates repayBorrow and reverts on rejection. May emit logs.\"},\"seizeAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the seizing of assets should be allowed to occur\"},\"seizeVerify(address,address,address,address,uint256)\":{\"notice\":\"Validates seize and reverts on rejection. May emit logs.\"},\"transferAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to transfer tokens in the given market\"},\"transferVerify(address,address,address,uint256)\":{\"notice\":\"Validates transfer and reverts on rejection. May emit logs.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/rari-fuse/src/core/Comptroller.sol\":\"Comptroller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/rari-fuse/src/core/CErc20.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ninterface CompLike {\\n    function delegate(address delegatee) external;\\n}\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @dev This contract should not to be deployed on its own; instead, deploy `CErc20Delegator` (proxy contract) and `CErc20Delegate` (logic/implementation contract).\\n * @author Compound\\n */\\ncontract CErc20 is CToken, CErc20Interface {\\n    /**\\n     * @notice Initialize the new money market\\n     * @param underlying_ The address of the underlying asset\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param name_ ERC-20 name of this token\\n     * @param symbol_ ERC-20 symbol of this token\\n     */\\n    function initialize(\\n        address underlying_,\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 reserveFactorMantissa_,\\n        uint256 adminFeeMantissa_\\n    ) public {\\n        // CToken initialize does the bulk of the work\\n        uint256 initialExchangeRateMantissa_ = 0.2e18;\\n        uint8 decimals_ = EIP20Interface(underlying_).decimals();\\n        super.initialize(\\n            comptroller_,\\n            interestRateModel_,\\n            initialExchangeRateMantissa_,\\n            name_,\\n            symbol_,\\n            decimals_,\\n            reserveFactorMantissa_,\\n            adminFeeMantissa_\\n        );\\n\\n        // Set underlying and sanity check it\\n        underlying = underlying_;\\n        EIP20Interface(underlying).totalSupply();\\n    }\\n\\n    /*** User Interface ***/\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function mint(uint256 mintAmount) external returns (uint256) {\\n        (uint256 err, ) = mintInternal(mintAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeem(uint256 redeemTokens) external returns (uint256) {\\n        return redeemInternal(redeemTokens);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to redeem\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256) {\\n        return redeemUnderlyingInternal(redeemAmount);\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrow(uint256 borrowAmount) external returns (uint256) {\\n        return borrowInternal(borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function repayBorrow(uint256 repayAmount) external returns (uint256) {\\n        (uint256 err, ) = repayBorrowInternal(repayAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount)\\n        external\\n        returns (uint256)\\n    {\\n        (uint256 err, ) = repayBorrowBehalfInternal(borrower, repayAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) external returns (uint256) {\\n        (uint256 err, ) = liquidateBorrowInternal(\\n            borrower,\\n            repayAmount,\\n            cTokenCollateral\\n        );\\n        return err;\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying tokens owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint256) {\\n        EIP20Interface token = EIP20Interface(underlying);\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\n     *      This will revert due to insufficient balance or insufficient allowance.\\n     *      This function returns the actual amount received,\\n     *      which may be less than `amount` if there is a fee attached to the transfer.\\n     *\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n     */\\n    function doTransferIn(address from, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 balanceBefore = EIP20Interface(underlying).balanceOf(\\n            address(this)\\n        );\\n        _callOptionalReturn(\\n            abi.encodeWithSelector(\\n                EIP20NonStandardInterface(underlying).transferFrom.selector,\\n                from,\\n                address(this),\\n                amount\\n            ),\\n            \\\"TOKEN_TRANSFER_IN_FAILED\\\"\\n        );\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = EIP20Interface(underlying).balanceOf(\\n            address(this)\\n        );\\n        require(balanceAfter >= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n    }\\n\\n    /**\\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\n     *      it is >= amount, this should not revert in normal conditions.\\n     *\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n     */\\n    function doTransferOut(address payable to, uint256 amount) internal {\\n        _callOptionalReturn(\\n            abi.encodeWithSelector(\\n                EIP20NonStandardInterface(underlying).transfer.selector,\\n                to,\\n                amount\\n            ),\\n            \\\"TOKEN_TRANSFER_OUT_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     * @param errorMessage The revert string to return on failure.\\n     */\\n    function _callOptionalReturn(bytes memory data, string memory errorMessage)\\n        internal\\n    {\\n        bytes memory returndata = _functionCall(underlying, data, errorMessage);\\n        if (returndata.length > 0)\\n            require(abi.decode(returndata, (bool)), errorMessage);\\n    }\\n\\n    /**\\n     * @notice Admin call to delegate the votes of the COMP-like underlying\\n     * @param compLikeDelegatee The address to delegate votes to\\n     * @dev CTokens whose underlying are not CompLike should revert here\\n     */\\n    function _delegateCompLikeTo(address compLikeDelegatee) external {\\n        require(\\n            hasAdminRights(),\\n            \\\"only the admin may set the comp-like delegate\\\"\\n        );\\n        CompLike(underlying).delegate(compLikeDelegatee);\\n    }\\n}\\n\",\"keccak256\":\"0x5bb4c9c18f6d2c64fb65d3fe3e31265e7e0659d70e0f914faec672f473b6a2f8\"},\"contracts/rari-fuse/src/core/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Returns a boolean indicating if the sender has admin rights\\n     */\\n    function hasAdminRights() internal view returns (bool) {\\n        ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(\\n            address(comptroller)\\n        );\\n        return\\n            (msg.sender == comptrollerStorage.admin() &&\\n                comptrollerStorage.adminHasRights()) ||\\n            (msg.sender == address(fuseAdmin) &&\\n                comptrollerStorage.fuseAdminHasRights());\\n    }\\n\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint256 initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        uint256 reserveFactorMantissa_,\\n        uint256 adminFeeMantissa_\\n    ) public {\\n        IFuseFeeDistributor _fuseAdmin = comptroller_.fuseAdmin();\\n\\n        require(\\n            msg.sender == address(_fuseAdmin),\\n            \\\"only Fuse admin may initialize the market\\\"\\n        );\\n        fuseAdmin = IFuseFeeDistributor(_fuseAdmin);\\n\\n        require(\\n            accrualBlockNumber == 0 && borrowIndex == 0,\\n            \\\"market may only be initialized once\\\"\\n        );\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(\\n            initialExchangeRateMantissa > 0,\\n            \\\"initial exchange rate must be greater than zero.\\\"\\n        );\\n\\n        // Set the comptroller\\n        uint256 err = _setComptroller(comptroller_);\\n        require(err == uint256(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(\\n            err == uint256(Error.NO_ERROR),\\n            \\\"setting interest rate model failed\\\"\\n        );\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // Set reserve factor\\n        err = _setReserveFactorFresh(reserveFactorMantissa_);\\n        require(\\n            err == uint256(Error.NO_ERROR),\\n            \\\"setting reserve factor failed\\\"\\n        );\\n\\n        // Set admin fee\\n        err = _setAdminFeeFresh(adminFeeMantissa_);\\n        require(err == uint256(Error.NO_ERROR), \\\"setting admin fee failed\\\");\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Returns latest pending Fuse fee (to be set with `_setFuseFeeFresh`)\\n     */\\n    function getPendingFuseFeeFromAdmin() internal view returns (uint256) {\\n        return fuseAdmin.interestFeeRate();\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(\\n        address spender,\\n        address src,\\n        address dst,\\n        uint256 tokens\\n    ) internal returns (uint256) {\\n        /* Fail if transfer not allowed */\\n        uint256 allowed = comptroller.transferAllowed(\\n            address(this),\\n            src,\\n            dst,\\n            tokens\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.TRANSFER_COMPTROLLER_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint256 startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint256(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint256 allowanceNew;\\n        uint256 srcTokensNew;\\n        uint256 dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint256(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount)\\n        external\\n        nonReentrant(false)\\n        returns (bool)\\n    {\\n        return\\n            transferTokens(msg.sender, msg.sender, dst, amount) ==\\n            uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external nonReentrant(false) returns (bool) {\\n        return\\n            transferTokens(msg.sender, src, dst, amount) ==\\n            uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint256) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint256 balance) = mulScalarTruncate(\\n            exchangeRate,\\n            accountTokens[owner]\\n        );\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 cTokenBalance = accountTokens[account];\\n        uint256 borrowBalance;\\n        uint256 exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint256(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint256(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (\\n            uint256(Error.NO_ERROR),\\n            cTokenBalance,\\n            borrowBalance,\\n            exchangeRateMantissa\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     * @dev WARNING: On Citrus, it will return the timestamp instead.\\n     *  It should not matter as long as you keep using this function.\\n     */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint256) {\\n        return\\n            interestRateModel.getBorrowRate(\\n                getCashPrior(),\\n                totalBorrows,\\n                add_(totalReserves, add_(totalAdminFees, totalFuseFees))\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint256) {\\n        return\\n            interestRateModel.getSupplyRate(\\n                getCashPrior(),\\n                totalBorrows,\\n                add_(totalReserves, add_(totalAdminFees, totalFuseFees)),\\n                reserveFactorMantissa + fuseFeeMantissa + adminFeeMantissa\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent()\\n        external\\n        nonReentrant(false)\\n        returns (uint256)\\n    {\\n        require(\\n            accrueInterest() == uint256(Error.NO_ERROR),\\n            \\\"accrue interest failed\\\"\\n        );\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account)\\n        external\\n        nonReentrant(false)\\n        returns (uint256)\\n    {\\n        require(\\n            accrueInterest() == uint256(Error.NO_ERROR),\\n            \\\"accrue interest failed\\\"\\n        );\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        (MathError err, uint256 result) = borrowBalanceStoredInternal(account);\\n        require(\\n            err == MathError.NO_ERROR,\\n            \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\"\\n        );\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account)\\n        internal\\n        view\\n        returns (MathError, uint256)\\n    {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint256 principalTimesIndex;\\n        uint256 result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(\\n            borrowSnapshot.principal,\\n            borrowIndex\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(\\n            principalTimesIndex,\\n            borrowSnapshot.interestIndex\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent()\\n        public\\n        nonReentrant(false)\\n        returns (uint256)\\n    {\\n        require(\\n            accrueInterest() == uint256(Error.NO_ERROR),\\n            \\\"accrue interest failed\\\"\\n        );\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint256) {\\n        (MathError err, uint256 result) = exchangeRateStoredInternal();\\n        require(\\n            err == MathError.NO_ERROR,\\n            \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\"\\n        );\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal()\\n        internal\\n        view\\n        returns (MathError, uint256)\\n    {\\n        uint256 _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - (totalReserves + totalFuseFees + totalAdminFees)) / totalSupply\\n             */\\n            uint256 totalCash = getCashPrior();\\n            uint256 cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(\\n                totalCash,\\n                totalBorrows,\\n                add_(totalReserves, add_(totalAdminFees, totalFuseFees))\\n            );\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(\\n                cashPlusBorrowsMinusReserves,\\n                _totalSupply\\n            );\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint256) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint256) {\\n        /* Remember the initial block number */\\n        uint256 currentBlockNumber = getBlockNumber();\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumber == currentBlockNumber) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint256 cashPrior = getCashPrior();\\n\\n        /* Calculate the current borrow interest rate */\\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(\\n            cashPrior,\\n            totalBorrows,\\n            add_(totalReserves, add_(totalAdminFees, totalFuseFees))\\n        );\\n        require(\\n            borrowRateMantissa <= borrowRateMaxMantissa,\\n            \\\"borrow rate is absurdly high\\\"\\n        );\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint256 blockDelta) = subUInt(\\n            currentBlockNumber,\\n            accrualBlockNumber\\n        );\\n        require(\\n            mathErr == MathError.NO_ERROR,\\n            \\\"could not calculate block delta\\\"\\n        );\\n\\n        return\\n            finishInterestAccrual(\\n                currentBlockNumber,\\n                cashPrior,\\n                borrowRateMantissa,\\n                blockDelta\\n            );\\n    }\\n\\n    /**\\n     * @dev Split off from `accrueInterest` to avoid \\\"stack too deep\\\" error\\\".\\n     */\\n    function finishInterestAccrual(\\n        uint256 currentBlockNumber,\\n        uint256 cashPrior,\\n        uint256 borrowRateMantissa,\\n        uint256 blockDelta\\n    ) private returns (uint256) {\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  totalFuseFeesNew = interestAccumulated * fuseFee + totalFuseFees\\n         *  totalAdminFeesNew = interestAccumulated * adminFee + totalAdminFees\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor = mul_(\\n            Exp({mantissa: borrowRateMantissa}),\\n            blockDelta\\n        );\\n        uint256 interestAccumulated = mul_ScalarTruncate(\\n            simpleInterestFactor,\\n            totalBorrows\\n        );\\n        uint256 totalBorrowsNew = add_(interestAccumulated, totalBorrows);\\n        uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\\n            Exp({mantissa: reserveFactorMantissa}),\\n            interestAccumulated,\\n            totalReserves\\n        );\\n        uint256 totalFuseFeesNew = mul_ScalarTruncateAddUInt(\\n            Exp({mantissa: fuseFeeMantissa}),\\n            interestAccumulated,\\n            totalFuseFees\\n        );\\n        uint256 totalAdminFeesNew = mul_ScalarTruncateAddUInt(\\n            Exp({mantissa: adminFeeMantissa}),\\n            interestAccumulated,\\n            totalAdminFees\\n        );\\n        uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(\\n            simpleInterestFactor,\\n            borrowIndex,\\n            borrowIndex\\n        );\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n        totalFuseFees = totalFuseFeesNew;\\n        totalAdminFees = totalAdminFeesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(\\n            cashPrior,\\n            interestAccumulated,\\n            borrowIndexNew,\\n            totalBorrowsNew\\n        );\\n\\n        // Attempt to add interest checkpoint\\n        address(interestRateModel).call(\\n            abi.encodeWithSignature(\\n                \\\"checkpointInterest(uint256)\\\",\\n                borrowRateMantissa\\n            )\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint256 mintAmount)\\n        internal\\n        nonReentrant(false)\\n        returns (uint256, uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (\\n                fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED),\\n                0\\n            );\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint256 exchangeRateMantissa;\\n        uint256 mintTokens;\\n        uint256 totalSupplyNew;\\n        uint256 accountTokensNew;\\n        uint256 actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint256 mintAmount)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        /* Fail if mint not allowed */\\n        uint256 allowed = comptroller.mintAllowed(\\n            address(this),\\n            minter,\\n            mintAmount\\n        );\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.MINT_COMPTROLLER_REJECTION,\\n                    allowed\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (\\n                fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK),\\n                0\\n            );\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (\\n            vars.mathErr,\\n            vars.exchangeRateMantissa\\n        ) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED,\\n                    uint256(vars.mathErr)\\n                ),\\n                0\\n            );\\n        }\\n\\n        // Check max supply\\n        // unused function\\n        /* allowed = comptroller.mintWithinLimits(address(this), vars.exchangeRateMantissa, accountTokens[minter], mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        } */\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({mantissa: vars.exchangeRateMantissa})\\n        );\\n        require(\\n            vars.mathErr == MathError.NO_ERROR,\\n            \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\"\\n        );\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        vars.totalSupplyNew = add_(totalSupply, vars.mintTokens);\\n\\n        vars.accountTokensNew = add_(accountTokens[minter], vars.mintTokens);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.mintVerify(\\n            address(this),\\n            minter,\\n            vars.actualMintAmount,\\n            vars.mintTokens\\n        );\\n\\n        return (uint256(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint256 redeemTokens)\\n        internal\\n        nonReentrant(false)\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return\\n                fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint256 redeemAmount)\\n        internal\\n        nonReentrant(false)\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return\\n                fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint256 exchangeRateMantissa;\\n        uint256 redeemTokens;\\n        uint256 redeemAmount;\\n        uint256 totalSupplyNew;\\n        uint256 accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(\\n        address payable redeemer,\\n        uint256 redeemTokensIn,\\n        uint256 redeemAmountIn\\n    ) internal returns (uint256) {\\n        require(\\n            redeemTokensIn == 0 || redeemAmountIn == 0,\\n            \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\"\\n        );\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (\\n            vars.mathErr,\\n            vars.exchangeRateMantissa\\n        ) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED,\\n                    uint256(vars.mathErr)\\n                );\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\\n                Exp({mantissa: vars.exchangeRateMantissa}),\\n                redeemTokensIn\\n            );\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return\\n                    failOpaque(\\n                        Error.MATH_ERROR,\\n                        FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n                        uint256(vars.mathErr)\\n                    );\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(\\n                redeemAmountIn,\\n                Exp({mantissa: vars.exchangeRateMantissa})\\n            );\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return\\n                    failOpaque(\\n                        Error.MATH_ERROR,\\n                        FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n                        uint256(vars.mathErr)\\n                    );\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint256 allowed = comptroller.redeemAllowed(\\n            address(this),\\n            redeemer,\\n            vars.redeemTokens\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.REDEEM_COMPTROLLER_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.REDEEM_FRESHNESS_CHECK\\n                );\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(\\n            totalSupply,\\n            vars.redeemTokens\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n                    uint256(vars.mathErr)\\n                );\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(\\n            accountTokens[redeemer],\\n            vars.redeemTokens\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n                    uint256(vars.mathErr)\\n                );\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return\\n                fail(\\n                    Error.TOKEN_INSUFFICIENT_CASH,\\n                    FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(\\n            address(this),\\n            redeemer,\\n            vars.redeemAmount,\\n            vars.redeemTokens\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrowInternal(uint256 borrowAmount)\\n        internal\\n        nonReentrant(false)\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return\\n                fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint256 accountBorrows;\\n        uint256 accountBorrowsNew;\\n        uint256 totalBorrowsNew;\\n    }\\n\\n    /**\\n     * @notice Users borrow assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrowFresh(address payable borrower, uint256 borrowAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        /* Fail if borrow not allowed */\\n        uint256 allowed = comptroller.borrowAllowed(\\n            address(this),\\n            borrower,\\n            borrowAmount\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.BORROW_COMPTROLLER_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.BORROW_FRESHNESS_CHECK\\n                );\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        uint256 cashPrior = getCashPrior();\\n\\n        if (cashPrior < borrowAmount) {\\n            return\\n                fail(\\n                    Error.TOKEN_INSUFFICIENT_CASH,\\n                    FailureInfo.BORROW_CASH_NOT_AVAILABLE\\n                );\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(\\n            borrower\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n                    uint256(vars.mathErr)\\n                );\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(\\n            vars.accountBorrows,\\n            borrowAmount\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n                    uint256(vars.mathErr)\\n                );\\n        }\\n\\n        // Check min borrow for this user for this asset\\n        allowed = comptroller.borrowWithinLimits(\\n            address(this),\\n            vars.accountBorrowsNew\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.BORROW_COMPTROLLER_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(\\n            totalBorrows,\\n            borrowAmount\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n                    uint256(vars.mathErr)\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(\\n            borrower,\\n            borrowAmount,\\n            vars.accountBorrowsNew,\\n            vars.totalBorrowsNew\\n        );\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint256 repayAmount)\\n        internal\\n        nonReentrant(false)\\n        returns (uint256, uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (\\n                fail(\\n                    Error(error),\\n                    FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED\\n                ),\\n                0\\n            );\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint256 repayAmount)\\n        internal\\n        nonReentrant(false)\\n        returns (uint256, uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (\\n                fail(\\n                    Error(error),\\n                    FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED\\n                ),\\n                0\\n            );\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint256 repayAmount;\\n        uint256 borrowerIndex;\\n        uint256 accountBorrows;\\n        uint256 accountBorrowsNew;\\n        uint256 totalBorrowsNew;\\n        uint256 actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) internal returns (uint256, uint256) {\\n        /* Fail if repayBorrow not allowed */\\n        uint256 allowed = comptroller.repayBorrowAllowed(\\n            address(this),\\n            payer,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION,\\n                    allowed\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.REPAY_BORROW_FRESHNESS_CHECK\\n                ),\\n                0\\n            );\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(\\n            borrower\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo\\n                        .REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n                    uint256(vars.mathErr)\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint256(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(\\n            vars.accountBorrows,\\n            vars.actualRepayAmount\\n        );\\n        require(\\n            vars.mathErr == MathError.NO_ERROR,\\n            \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\"\\n        );\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(\\n            totalBorrows,\\n            vars.actualRepayAmount\\n        );\\n        require(\\n            vars.mathErr == MathError.NO_ERROR,\\n            \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\"\\n        );\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(\\n            payer,\\n            borrower,\\n            vars.actualRepayAmount,\\n            vars.accountBorrowsNew,\\n            vars.totalBorrowsNew\\n        );\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) internal nonReentrant(false) returns (uint256, uint256) {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (\\n                fail(\\n                    Error(error),\\n                    FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED\\n                ),\\n                0\\n            );\\n        }\\n\\n        error = cTokenCollateral.accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (\\n                fail(\\n                    Error(error),\\n                    FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED\\n                ),\\n                0\\n            );\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return\\n            liquidateBorrowFresh(\\n                msg.sender,\\n                borrower,\\n                repayAmount,\\n                cTokenCollateral\\n            );\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) internal returns (uint256, uint256) {\\n        /* Fail if liquidate not allowed */\\n        uint256 allowed = comptroller.liquidateBorrowAllowed(\\n            address(this),\\n            address(cTokenCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION,\\n                    allowed\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.LIQUIDATE_FRESHNESS_CHECK\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            return (\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (\\n                fail(\\n                    Error.INVALID_ACCOUNT_PAIR,\\n                    FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (\\n                fail(\\n                    Error.INVALID_CLOSE_AMOUNT_REQUESTED,\\n                    FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint256(-1)) {\\n            return (\\n                fail(\\n                    Error.INVALID_CLOSE_AMOUNT_REQUESTED,\\n                    FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        (\\n            uint256 repayBorrowError,\\n            uint256 actualRepayAmount\\n        ) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint256(Error.NO_ERROR)) {\\n            return (\\n                fail(\\n                    Error(repayBorrowError),\\n                    FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED\\n                ),\\n                0\\n            );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint256 amountSeizeError, uint256 seizeTokens) = comptroller\\n            .liquidateCalculateSeizeTokens(\\n                address(this),\\n                address(cTokenCollateral),\\n                actualRepayAmount\\n            );\\n        require(\\n            amountSeizeError == uint256(Error.NO_ERROR),\\n            \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\"\\n        );\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(\\n            cTokenCollateral.balanceOf(borrower) >= seizeTokens,\\n            \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\"\\n        );\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint256 seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(\\n                address(this),\\n                liquidator,\\n                borrower,\\n                seizeTokens\\n            );\\n        } else {\\n            seizeError = cTokenCollateral.seize(\\n                liquidator,\\n                borrower,\\n                seizeTokens\\n            );\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint256(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(\\n            liquidator,\\n            borrower,\\n            actualRepayAmount,\\n            address(cTokenCollateral),\\n            seizeTokens\\n        );\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint256(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external nonReentrant(true) returns (uint256) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    struct SeizeInternalLocalVars {\\n        MathError mathErr;\\n        uint256 borrowerTokensNew;\\n        uint256 liquidatorTokensNew;\\n        uint256 liquidatorSeizeTokens;\\n        uint256 protocolSeizeTokens;\\n        uint256 protocolSeizeAmount;\\n        uint256 exchangeRateMantissa;\\n        uint256 totalReservesNew;\\n        uint256 totalSupplyNew;\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) internal returns (uint256) {\\n        /* Fail if seize not allowed */\\n        uint256 allowed = comptroller.seizeAllowed(\\n            address(this),\\n            seizerToken,\\n            liquidator,\\n            borrower,\\n            seizeTokens\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.COMPTROLLER_REJECTION,\\n                    FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return\\n                fail(\\n                    Error.INVALID_ACCOUNT_PAIR,\\n                    FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER\\n                );\\n        }\\n\\n        SeizeInternalLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (vars.mathErr, vars.borrowerTokensNew) = subUInt(\\n            accountTokens[borrower],\\n            seizeTokens\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n                    uint256(vars.mathErr)\\n                );\\n        }\\n\\n        vars.protocolSeizeTokens = mul_(\\n            seizeTokens,\\n            Exp({mantissa: protocolSeizeShareMantissa})\\n        );\\n        vars.liquidatorSeizeTokens = sub_(\\n            seizeTokens,\\n            vars.protocolSeizeTokens\\n        );\\n\\n        (\\n            vars.mathErr,\\n            vars.exchangeRateMantissa\\n        ) = exchangeRateStoredInternal();\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"exchange rate math error\\\");\\n\\n        vars.protocolSeizeAmount = mul_ScalarTruncate(\\n            Exp({mantissa: vars.exchangeRateMantissa}),\\n            vars.protocolSeizeTokens\\n        );\\n\\n        vars.totalReservesNew = add_(totalReserves, vars.protocolSeizeAmount);\\n        vars.totalSupplyNew = sub_(totalSupply, vars.protocolSeizeTokens);\\n\\n        (vars.mathErr, vars.liquidatorTokensNew) = addUInt(\\n            accountTokens[liquidator],\\n            vars.liquidatorSeizeTokens\\n        );\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n                    uint256(vars.mathErr)\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        totalReserves = vars.totalReservesNew;\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[borrower] = vars.borrowerTokensNew;\\n        accountTokens[liquidator] = vars.liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, vars.liquidatorSeizeTokens);\\n        emit Transfer(borrower, address(this), vars.protocolSeizeTokens);\\n        emit ReservesAdded(\\n            address(this),\\n            vars.protocolSeizeAmount,\\n            vars.totalReservesNew\\n        );\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Sets a new comptroller for the market\\n     * @dev Internal function to set a new comptroller\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setComptroller(ComptrollerInterface newComptroller)\\n        internal\\n        returns (uint256)\\n    {\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new admin fee for the protocol using _setAdminFeeFresh\\n     * @dev Admin function to accrue interest and set a new admin fee\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setAdminFee(uint256 newAdminFeeMantissa)\\n        external\\n        nonReentrant(false)\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted admin fee change failed.\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n        // _setAdminFeeFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setAdminFeeFresh(newAdminFeeMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets a new admin fee for the protocol (*requires fresh interest accrual)\\n     * @dev Admin function to set a new admin fee\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setAdminFeeFresh(uint256 newAdminFeeMantissa)\\n        internal\\n        returns (uint256)\\n    {\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.SET_ADMIN_FEE_FRESH_CHECK\\n                );\\n        }\\n\\n        // Sanitize newAdminFeeMantissa\\n        if (newAdminFeeMantissa == uint256(-1))\\n            newAdminFeeMantissa = adminFeeMantissa;\\n\\n        // Get latest Fuse fee\\n        uint256 newFuseFeeMantissa = getPendingFuseFeeFromAdmin();\\n\\n        // Check reserveFactorMantissa + newAdminFeeMantissa + newFuseFeeMantissa \\u2264 reserveFactorPlusFeesMaxMantissa\\n        if (\\n            add_(\\n                add_(reserveFactorMantissa, newAdminFeeMantissa),\\n                newFuseFeeMantissa\\n            ) > reserveFactorPlusFeesMaxMantissa\\n        ) {\\n            return\\n                fail(Error.BAD_INPUT, FailureInfo.SET_ADMIN_FEE_BOUNDS_CHECK);\\n        }\\n\\n        // If setting admin fee\\n        if (adminFeeMantissa != newAdminFeeMantissa) {\\n            // Check caller is admin\\n            if (!hasAdminRights()) {\\n                return\\n                    fail(\\n                        Error.UNAUTHORIZED,\\n                        FailureInfo.SET_ADMIN_FEE_ADMIN_CHECK\\n                    );\\n            }\\n\\n            // Set admin fee\\n            uint256 oldAdminFeeMantissa = adminFeeMantissa;\\n            adminFeeMantissa = newAdminFeeMantissa;\\n\\n            // Emit event\\n            emit NewAdminFee(oldAdminFeeMantissa, newAdminFeeMantissa);\\n        }\\n\\n        // If setting Fuse fee\\n        if (fuseFeeMantissa != newFuseFeeMantissa) {\\n            // Set Fuse fee\\n            uint256 oldFuseFeeMantissa = fuseFeeMantissa;\\n            fuseFeeMantissa = newFuseFeeMantissa;\\n\\n            // Emit event\\n            emit NewFuseFee(oldFuseFeeMantissa, newFuseFeeMantissa);\\n        }\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n     * @dev Admin function to accrue interest and set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactor(uint256 newReserveFactorMantissa)\\n        external\\n        nonReentrant(false)\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n     * @dev Admin function to set a new reserve factor\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setReserveFactorFresh(uint256 newReserveFactorMantissa)\\n        internal\\n        returns (uint256)\\n    {\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK\\n                );\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK\\n                );\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (\\n            add_(\\n                add_(newReserveFactorMantissa, adminFeeMantissa),\\n                fuseFeeMantissa\\n            ) > reserveFactorPlusFeesMaxMantissa\\n        ) {\\n            return\\n                fail(\\n                    Error.BAD_INPUT,\\n                    FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK\\n                );\\n        }\\n\\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(\\n            oldReserveFactorMantissa,\\n            newReserveFactorMantissa\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint256 reduceAmount)\\n        external\\n        nonReentrant(false)\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint256 reduceAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        // totalReserves - reduceAmount\\n        uint256 totalReservesNew;\\n\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.REDUCE_RESERVES_ADMIN_CHECK\\n                );\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.REDUCE_RESERVES_FRESH_CHECK\\n                );\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return\\n                fail(\\n                    Error.TOKEN_INSUFFICIENT_CASH,\\n                    FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE\\n                );\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return\\n                fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\n        totalReservesNew = sub_(totalReserves, reduceAmount);\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(msg.sender, reduceAmount);\\n\\n        emit ReservesReduced(msg.sender, reduceAmount, totalReservesNew);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces Fuse fees by transferring to Fuse\\n     * @param withdrawAmount Amount of fees to withdraw\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _withdrawFuseFees(uint256 withdrawAmount)\\n        external\\n        nonReentrant(false)\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted Fuse fee withdrawal failed.\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.WITHDRAW_FUSE_FEES_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n        // _withdrawFuseFeesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _withdrawFuseFeesFresh(withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces Fuse fees by transferring to Fuse\\n     * @dev Requires fresh interest accrual\\n     * @param withdrawAmount Amount of fees to withdraw\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _withdrawFuseFeesFresh(uint256 withdrawAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        // totalFuseFees - reduceAmount\\n        uint256 totalFuseFeesNew;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.WITHDRAW_FUSE_FEES_FRESH_CHECK\\n                );\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < withdrawAmount) {\\n            return\\n                fail(\\n                    Error.TOKEN_INSUFFICIENT_CASH,\\n                    FailureInfo.WITHDRAW_FUSE_FEES_CASH_NOT_AVAILABLE\\n                );\\n        }\\n\\n        // Check withdrawAmount \\u2264 fuseFees[n] (totalFuseFees)\\n        if (withdrawAmount > totalFuseFees) {\\n            return\\n                fail(\\n                    Error.BAD_INPUT,\\n                    FailureInfo.WITHDRAW_FUSE_FEES_VALIDATION\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // We checked withdrawAmount <= totalFuseFees above, so this should never revert.\\n        totalFuseFeesNew = sub_(totalFuseFees, withdrawAmount);\\n\\n        // Store fuseFees[n+1] = fuseFees[n] - withdrawAmount\\n        totalFuseFees = totalFuseFeesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(address(fuseAdmin), withdrawAmount);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces admin fees by transferring to admin\\n     * @param withdrawAmount Amount of fees to withdraw\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _withdrawAdminFees(uint256 withdrawAmount)\\n        external\\n        nonReentrant(false)\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted admin fee withdrawal failed.\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n        // _withdrawAdminFeesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _withdrawAdminFeesFresh(withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces admin fees by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param withdrawAmount Amount of fees to withdraw\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _withdrawAdminFeesFresh(uint256 withdrawAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        // totalAdminFees - reduceAmount\\n        uint256 totalAdminFeesNew;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.WITHDRAW_ADMIN_FEES_FRESH_CHECK\\n                );\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < withdrawAmount) {\\n            return\\n                fail(\\n                    Error.TOKEN_INSUFFICIENT_CASH,\\n                    FailureInfo.WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE\\n                );\\n        }\\n\\n        // Check withdrawAmount \\u2264 adminFees[n] (totalAdminFees)\\n        if (withdrawAmount > totalAdminFees) {\\n            return\\n                fail(\\n                    Error.BAD_INPUT,\\n                    FailureInfo.WITHDRAW_ADMIN_FEES_VALIDATION\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // We checked withdrawAmount <= totalAdminFees above, so this should never revert.\\n        totalAdminFeesNew = sub_(totalAdminFees, withdrawAmount);\\n\\n        // Store adminFees[n+1] = adminFees[n] - withdrawAmount\\n        totalAdminFees = totalAdminFeesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(\\n            address(\\n                uint160(UnitrollerAdminStorage(address(comptroller)).admin())\\n            ),\\n            withdrawAmount\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel)\\n        public\\n        returns (uint256)\\n    {\\n        uint256 error = accrueInterest();\\n        if (error != uint256(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return\\n                fail(\\n                    Error(error),\\n                    FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED\\n                );\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel)\\n        internal\\n        returns (uint256)\\n    {\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK\\n                );\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_FRESH,\\n                    FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK\\n                );\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(\\n            newInterestRateModel.isInterestRateModel(),\\n            \\\"marker method returned false\\\"\\n        );\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(\\n            oldInterestRateModel,\\n            newInterestRateModel\\n        );\\n\\n        // Attempt to reset interest checkpoints on old IRM\\n        if (address(oldInterestRateModel) != address(0))\\n            address(oldInterestRateModel).call(\\n                abi.encodeWithSignature(\\\"resetInterestCheckpoints()\\\")\\n            );\\n\\n        // Attempt to add first interest checkpoint on new IRM\\n        address(newInterestRateModel).call(\\n            abi.encodeWithSignature(\\\"checkpointInterest()\\\")\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice updates the cToken ERC20 name and symbol\\n     * @dev Admin function to update the cToken ERC20 name and symbol\\n     * @param _name the new ERC20 token name to use\\n     * @param _symbol the new ERC20 token symbol to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setNameAndSymbol(string calldata _name, string calldata _symbol)\\n        external\\n    {\\n        // Check caller is admin\\n        require(hasAdminRights(), \\\"caller not admin\\\");\\n\\n        // Set ERC20 name and symbol\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint256);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint256 amount)\\n        internal\\n        returns (uint256);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint256 amount) internal;\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant(bool localOnly) {\\n        _beforeNonReentrant(localOnly);\\n        _;\\n        _afterNonReentrant(localOnly);\\n    }\\n\\n    /**\\n     * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\n     * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\n     * In this specific case, the optimization saves around 1500 bytes of that valuable 24 KB limit.\\n     */\\n    function _beforeNonReentrant(bool localOnly) private {\\n        require(_notEntered, \\\"re-entered\\\");\\n        if (!localOnly) comptroller._beforeNonReentrant();\\n        _notEntered = false;\\n    }\\n\\n    /**\\n     * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\n     * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\n     * In this specific case, the optimization saves around 150 bytes of that valuable 24 KB limit.\\n     */\\n    function _afterNonReentrant(bool localOnly) private {\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n        if (!localOnly) comptroller._afterNonReentrant();\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     * @param errorMessage The revert string to return on failure.\\n     */\\n    function _functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.call(data);\\n\\n        if (!success) {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n\\n        return returndata;\\n    }\\n}\\n\",\"keccak256\":\"0x1725d159abe126d6c3286f73946e4f34953ed1bee3d8063e6844bbbda8b29eba\"},\"contracts/rari-fuse/src/core/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenAdminStorage {\\n    /**\\n     * @notice Administrator for Fuse\\n     */\\n    IFuseFeeDistributor public fuseAdmin;\\n\\n    /**\\n     * @dev LEGACY USE ONLY: Administrator for this contract\\n     */\\n    address payable internal __admin;\\n\\n    /**\\n     * @dev LEGACY USE ONLY: Whether or not the Fuse admin has admin rights\\n     */\\n    bool internal __fuseAdminHasRights;\\n\\n    /**\\n     * @dev LEGACY USE ONLY: Whether or not the admin has admin rights\\n     */\\n    bool internal __adminHasRights;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[10] private __gap;\\n}\\n\\ncontract CTokenStorage is CTokenAdminStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0001% / second)\\n     */\\n    uint256 internal constant borrowRateMaxMantissa = 0.0001e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves + fees\\n     */\\n    uint256 internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice LEGACY USE ONLY: Pending administrator for this contract\\n     */\\n    address payable private __pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint256 internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for admin fees\\n     */\\n    uint256 public adminFeeMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for Fuse fees\\n     */\\n    uint256 public fuseFeeMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint256 public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     \\n     */\\n    uint256 public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint256 public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint256 public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint256 public totalReserves;\\n\\n    /**\\n     * @notice Total amount of admin fees of the underlying held in this market\\n     */\\n    uint256 public totalAdminFees;\\n\\n    /**\\n     * @notice Total amount of Fuse fees of the underlying held in this market\\n     */\\n    uint256 public totalFuseFees;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint256 public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping(address => uint256) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint256 principal;\\n        uint256 interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /**\\n     * @notice Share of seized collateral that is added to reserves\\n     */\\n    uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[10] private __gap;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n    /**\\n     * @notice Indicator that this is or is not a CEther contract (for inspection)\\n     */\\n    bool public constant isCEther = false;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(\\n        uint256 cashPrior,\\n        uint256 interestAccumulated,\\n        uint256 borrowIndex,\\n        uint256 totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(\\n        address borrower,\\n        uint256 borrowAmount,\\n        uint256 accountBorrows,\\n        uint256 totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 accountBorrows,\\n        uint256 totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        address cTokenCollateral,\\n        uint256 seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(\\n        ComptrollerInterface oldComptroller,\\n        ComptrollerInterface newComptroller\\n    );\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(\\n        InterestRateModel oldInterestRateModel,\\n        InterestRateModel newInterestRateModel\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(\\n        uint256 oldReserveFactorMantissa,\\n        uint256 newReserveFactorMantissa\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(\\n        address benefactor,\\n        uint256 addAmount,\\n        uint256 newTotalReserves\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(\\n        address admin,\\n        uint256 reduceAmount,\\n        uint256 newTotalReserves\\n    );\\n\\n    /**\\n     * @notice Event emitted when the admin fee is changed\\n     */\\n    event NewAdminFee(uint256 oldAdminFeeMantissa, uint256 newAdminFeeMantissa);\\n\\n    /**\\n     * @notice Event emitted when the Fuse fee is changed\\n     */\\n    event NewFuseFee(uint256 oldFuseFeeMantissa, uint256 newFuseFeeMantissa);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) public view returns (uint256);\\n\\n    function exchangeRateCurrent() public returns (uint256);\\n\\n    function exchangeRateStored() public view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function accrueInterest() public returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setReserveFactor(uint256 newReserveFactorMantissa)\\n        external\\n        returns (uint256);\\n\\n    function _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel)\\n        public\\n        returns (uint256);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[10] private __gap;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n    /*** User Interface ***/\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount)\\n        external\\n        returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) external returns (uint256);\\n}\\n\\ncontract CEtherInterface is CErc20Storage {\\n    /**\\n     * @notice Indicator that this is a CEther contract (for inspection)\\n     */\\n    bool public constant isCEther = true;\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[10] private __gap;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(\\n        address oldImplementation,\\n        address newImplementation\\n    );\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementationSafe(\\n        address implementation_,\\n        bool allowResign,\\n        bytes calldata becomeImplementationData\\n    ) external;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes calldata data) external;\\n\\n    /**\\n     * @notice Function called before all delegator functions\\n     * @dev Checks comptroller.autoImplementation and upgrades the implementation if necessary\\n     */\\n    function _prepare() external payable;\\n}\\n\",\"keccak256\":\"0xcf3aa2b627f2d929ea552b87b2c91e583820bc08bb7409a8804f6dc88a9fe4c0\"},\"contracts/rari-fuse/src/core/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\n/**\\n * @title Careful Math\\n * @author Compound\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n     * @dev Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (MathError, uint256)\\n    {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint256 c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (MathError, uint256)\\n    {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (MathError, uint256)\\n    {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (MathError, uint256)\\n    {\\n        uint256 c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev add a and b and then subtract c\\n     */\\n    function addThenSubUInt(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (MathError, uint256) {\\n        (MathError err0, uint256 sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0x622047383c7f23c2fc75e1a72baa7b1a1e0f905038e2bbe0c5ca99c15a775aa0\"},\"contracts/rari-fuse/src/core/Comptroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./CErc20.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./UnitrollerInterface.sol\\\";\\nimport \\\"./RewardsDistributorDelegate.sol\\\";\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @author Compound\\n * @dev This contract should not to be deployed alone; instead, deploy `Unitroller` (proxy contract) on top of this `Comptroller` (logic/implementation contract).\\n */\\ncontract Comptroller is\\n    ComptrollerV4Storage,\\n    ComptrollerErrorReporter,\\n    Exponential\\n{\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(CToken cToken);\\n\\n    /// @notice Emitted when an admin unsupports a market\\n    event MarketUnlisted(CToken cToken);\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(CToken cToken, address account);\\n\\n    /// @notice Emitted when an account exits a market\\n    event MarketExited(CToken cToken, address account);\\n\\n    /// @notice Emitted when close factor is changed by admin\\n    event NewCloseFactor(\\n        uint256 oldCloseFactorMantissa,\\n        uint256 newCloseFactorMantissa\\n    );\\n\\n    /// @notice Emitted when a collateral factor is changed by admin\\n    event NewCollateralFactor(\\n        CToken cToken,\\n        uint256 oldCollateralFactorMantissa,\\n        uint256 newCollateralFactorMantissa\\n    );\\n\\n    /// @notice Emitted when liquidation incentive is changed by admin\\n    event NewLiquidationIncentive(\\n        uint256 oldLiquidationIncentiveMantissa,\\n        uint256 newLiquidationIncentiveMantissa\\n    );\\n\\n    /// @notice Emitted when price oracle is changed\\n    event NewPriceOracle(\\n        PriceOracle oldPriceOracle,\\n        PriceOracle newPriceOracle\\n    );\\n\\n    /// @notice Emitted when pause guardian is changed\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    /// @notice Emitted when an action is paused globally\\n    event ActionPaused(string action, bool pauseState);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event ActionPaused(CToken cToken, string action, bool pauseState);\\n\\n    /// @notice Emitted when the whitelist enforcement is changed\\n    event WhitelistEnforcementChanged(bool enforce);\\n\\n    /// @notice Emitted when auto implementations are toggled\\n    event AutoImplementationsToggled(bool enabled);\\n\\n    /// @notice Emitted when supply cap for a cToken is changed\\n    event NewSupplyCap(CToken indexed cToken, uint256 newSupplyCap);\\n\\n    /// @notice Emitted when borrow cap for a cToken is changed\\n    event NewBorrowCap(CToken indexed cToken, uint256 newBorrowCap);\\n\\n    /// @notice Emitted when borrow cap guardian is changed\\n    event NewBorrowCapGuardian(\\n        address oldBorrowCapGuardian,\\n        address newBorrowCapGuardian\\n    );\\n\\n    /// @notice Emitted when a new RewardsDistributor contract is added to hooks\\n    event AddedRewardsDistributor(address rewardsDistributor);\\n\\n    // closeFactorMantissa must be strictly greater than this value\\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\n\\n    // closeFactorMantissa must not exceed this value\\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // No collateralFactorMantissa may exceed this value\\n    uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // liquidationIncentiveMantissa must be no less than this value\\n    uint256 internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\\n\\n    // liquidationIncentiveMantissa must be no greater than this value\\n    uint256 internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\\n\\n    /*** Assets You Are In ***/\\n\\n    /**\\n     * @notice Returns the assets an account has entered\\n     * @param account The address of the account to pull assets for\\n     * @return A dynamic list with the assets the account has entered\\n     */\\n    function getAssetsIn(address account)\\n        external\\n        view\\n        returns (CToken[] memory)\\n    {\\n        CToken[] memory assetsIn = accountAssets[account];\\n\\n        return assetsIn;\\n    }\\n\\n    /**\\n     * @notice Returns whether the given account is entered in the given asset\\n     * @param account The address of the account to check\\n     * @param cToken The cToken to check\\n     * @return True if the account is in the asset, otherwise false.\\n     */\\n    function checkMembership(address account, CToken cToken)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return markets[address(cToken)].accountMembership[account];\\n    }\\n\\n    /**\\n     * @notice Add assets to be included in account liquidity calculation\\n     * @param cTokens The list of addresses of the cToken markets to be enabled\\n     * @return Success indicator for whether each corresponding market was entered\\n     */\\n    function enterMarkets(address[] memory cTokens)\\n        public\\n        returns (uint256[] memory)\\n    {\\n        uint256 len = cTokens.length;\\n\\n        uint256[] memory results = new uint256[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            CToken cToken = CToken(cTokens[i]);\\n\\n            results[i] = uint256(addToMarketInternal(cToken, msg.sender));\\n        }\\n\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param cToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(CToken cToken, address borrower)\\n        internal\\n        returns (Error)\\n    {\\n        Market storage marketToJoin = markets[address(cToken)];\\n\\n        if (!marketToJoin.isListed) {\\n            // market is not listed, cannot join\\n            return Error.MARKET_NOT_LISTED;\\n        }\\n\\n        if (marketToJoin.accountMembership[borrower] == true) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(cToken);\\n\\n        // Add to allBorrowers\\n        if (!borrowers[borrower]) {\\n            allBorrowers.push(borrower);\\n            borrowers[borrower] = true;\\n            borrowerIndexes[borrower] = allBorrowers.length - 1;\\n        }\\n\\n        emit MarketEntered(cToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Removes asset from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *  or be providing neccessary collateral for an outstanding borrow.\\n     * @param cTokenAddress The address of the asset to be removed\\n     * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarket(address cTokenAddress) external returns (uint256) {\\n        CToken cToken = CToken(cTokenAddress);\\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken\\n            .getAccountSnapshot(msg.sender);\\n        require(oErr == 0, \\\"exitMarket: getAccountSnapshot failed\\\"); // semi-opaque error code\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (amountOwed != 0) {\\n            return\\n                fail(\\n                    Error.NONZERO_BORROW_BALANCE,\\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\\n                );\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        uint256 allowed = redeemAllowedInternal(\\n            cTokenAddress,\\n            msg.sender,\\n            tokensHeld\\n        );\\n        if (allowed != 0) {\\n            return\\n                failOpaque(\\n                    Error.REJECTION,\\n                    FailureInfo.EXIT_MARKET_REJECTION,\\n                    allowed\\n                );\\n        }\\n\\n        Market storage marketToExit = markets[address(cToken)];\\n\\n        /* Return true if the sender is not already \\u2018in\\u2019 the market */\\n        if (!marketToExit.accountMembership[msg.sender]) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Set cToken account membership to false */\\n        delete marketToExit.accountMembership[msg.sender];\\n\\n        /* Delete cToken from the account\\u2019s list of assets */\\n        // load into memory for faster iteration\\n        CToken[] memory userAssetList = accountAssets[msg.sender];\\n        uint256 len = userAssetList.length;\\n        uint256 assetIndex = len;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (userAssetList[i] == cToken) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        assert(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        CToken[] storage storedList = accountAssets[msg.sender];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.length--;\\n\\n        // If the user has exited all markets, remove them from the `allBorrowers` array\\n        if (storedList.length == 0) {\\n            uint256 borrowerIndex = borrowerIndexes[msg.sender];\\n\\n            // If borrower not at the end of the borrower array, replace it with the item at the end of the borrower array\\n            if (borrowerIndex < allBorrowers.length - 1) {\\n                address lastElement = allBorrowers[allBorrowers.length - 1];\\n                allBorrowers[borrowerIndex] = lastElement; // Copy last item in list to location of item to be removed\\n                borrowerIndexes[lastElement] = borrowerIndex; // Set borrower index of moved item to correct index\\n            }\\n\\n            // Remove the last element of the borrower array\\n            allBorrowers.length--; // Reduce length by 1\\n            borrowerIndexes[msg.sender] = 0; // Reset sender borrower index to 0 for a gas refund\\n            borrowers[msg.sender] = false; // Tell the contract that the sender is no longer a borrower (so it knows to add the borrower back if they enter a market in the future)\\n        }\\n\\n        emit MarketExited(cToken, msg.sender);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /*** Policy Hooks ***/\\n\\n    /**\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\n     * @param cToken The market to verify the mint against\\n     * @param minter The account which would get the minted tokens\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!mintGuardianPaused[cToken], \\\"mint is paused\\\");\\n\\n        // Shh - currently unused\\n        minter;\\n        mintAmount;\\n\\n        // Make sure market is listed\\n        if (!markets[cToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Make sure minter is whitelisted\\n        if (enforceWhitelist && !whitelist[minter]) {\\n            return uint256(Error.SUPPLIER_NOT_WHITELISTED);\\n        }\\n\\n        // Check supply cap\\n        uint256 supplyCap = supplyCaps[cToken];\\n        // Supply cap of 0 corresponds to unlimited supplying\\n        if (supplyCap != 0) {\\n            uint256 totalCash = CToken(cToken).getCash();\\n            uint256 totalBorrows = CToken(cToken).totalBorrows();\\n            uint256 totalReserves = CToken(cToken).totalReserves();\\n            uint256 totalFuseFees = CToken(cToken).totalFuseFees();\\n            uint256 totalAdminFees = CToken(cToken).totalAdminFees();\\n\\n            // totalUnderlyingSupply = totalCash + totalBorrows - (totalReserves + totalFuseFees + totalAdminFees)\\n            (MathError mathErr, uint256 totalUnderlyingSupply) = addThenSubUInt(\\n                totalCash,\\n                totalBorrows,\\n                add_(add_(totalReserves, totalFuseFees), totalAdminFees)\\n            );\\n            if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\\n\\n            uint256 nextTotalUnderlyingSupply;\\n            (mathErr, nextTotalUnderlyingSupply) = addUInt(\\n                totalUnderlyingSupply,\\n                mintAmount\\n            );\\n            if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\\n\\n            require(\\n                nextTotalUnderlyingSupply < supplyCap,\\n                \\\"market supply cap reached\\\"\\n            );\\n        }\\n\\n        // Keep the flywheel moving\\n        flywheelPreSupplierAction(cToken, minter);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates mint and reverts on rejection. May emit logs.\\n     * @param cToken Asset being minted\\n     * @param minter The address minting the tokens\\n     * @param actualMintAmount The amount of the underlying asset being minted\\n     * @param mintTokens The number of tokens being minted\\n     */\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 actualMintAmount,\\n        uint256 mintTokens\\n    ) external {\\n        // Shh - currently unused\\n        cToken;\\n        minter;\\n        actualMintAmount;\\n        mintTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n\\n        // Add minter to suppliers mapping\\n        suppliers[minter] = true;\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\n     * @param cToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256) {\\n        uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\\n        if (allowed != uint256(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        flywheelPreSupplierAction(cToken, redeemer);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function redeemAllowedInternal(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) internal view returns (uint256) {\\n        if (!markets[cToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[cToken].accountMembership[redeemer]) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (\\n            Error err,\\n            ,\\n            uint256 shortfall\\n        ) = getHypotheticalAccountLiquidityInternal(\\n                redeemer,\\n                CToken(cToken),\\n                redeemTokens,\\n                0\\n            );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\n     * @param cToken Asset being redeemed\\n     * @param redeemer The address redeeming the tokens\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external {\\n        // Shh - currently unused\\n        cToken;\\n        redeemer;\\n\\n        // Require tokens is zero or amount is also zero\\n        if (redeemTokens == 0 && redeemAmount > 0) {\\n            revert(\\\"redeemTokens zero\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param cToken The market to verify the borrow against\\n     * @param borrower The account which would borrow the asset\\n     * @param borrowAmount The amount of underlying the account would borrow\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!borrowGuardianPaused[cToken], \\\"borrow is paused\\\");\\n\\n        // Make sure market is listed\\n        if (!markets[cToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (!markets[cToken].accountMembership[borrower]) {\\n            // only cTokens may call borrowAllowed if borrower not in market\\n            require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n            // attempt to add borrower to the market\\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\\n            if (err != Error.NO_ERROR) {\\n                return uint256(err);\\n            }\\n\\n            // it should be impossible to break the important invariant\\n            assert(markets[cToken].accountMembership[borrower]);\\n        }\\n\\n        // Make sure oracle price is available\\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\\n            return uint256(Error.PRICE_ERROR);\\n        }\\n\\n        // Make sure borrower is whitelisted\\n        if (enforceWhitelist && !whitelist[borrower]) {\\n            return uint256(Error.SUPPLIER_NOT_WHITELISTED);\\n        }\\n\\n        // Check borrow cap\\n        uint256 borrowCap = borrowCaps[cToken];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint256 totalBorrows = CToken(cToken).totalBorrows();\\n            (MathError mathErr, uint256 nextTotalBorrows) = addUInt(\\n                totalBorrows,\\n                borrowAmount\\n            );\\n            if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\\n            require(nextTotalBorrows < borrowCap, \\\"market borrow cap reached\\\");\\n        }\\n\\n        // Keep the flywheel moving\\n        flywheelPreBorrowerAction(cToken, borrower);\\n\\n        // Perform a hypothetical liquidity check to guard against shortfall\\n        (\\n            Error err,\\n            ,\\n            uint256 shortfall\\n        ) = getHypotheticalAccountLiquidityInternal(\\n                borrower,\\n                CToken(cToken),\\n                0,\\n                borrowAmount\\n            );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param cToken Asset whose underlying is being borrowed\\n     * @param accountBorrowsNew The user's new borrow balance of the underlying asset\\n     */\\n    function borrowWithinLimits(address cToken, uint256 accountBorrowsNew)\\n        external\\n        returns (uint256)\\n    {\\n        // Check if global pause borrow override exists\\n        uint256 minBorrowEth = _globalPauseBorrowOverride\\n            ? 1e18\\n            : fuseAdmin.minBorrowEth();\\n\\n        if (minBorrowEth > 0) {\\n            // Get new underlying borrow balance of account for this cToken\\n            uint256 oraclePriceMantissa = oracle.getUnderlyingPrice(\\n                CToken(cToken)\\n            );\\n            if (oraclePriceMantissa == 0) return uint256(Error.PRICE_ERROR);\\n            (MathError mathErr, uint256 borrowBalanceEth) = mulScalarTruncate(\\n                Exp({mantissa: oraclePriceMantissa}),\\n                accountBorrowsNew\\n            );\\n            if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\\n\\n            // Check against min borrow\\n            if (borrowBalanceEth < minBorrowEth)\\n                return uint256(Error.BORROW_BELOW_MIN);\\n        }\\n\\n        // Return no error\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param cToken Asset whose underlying is being borrowed\\n     * @param exchangeRateMantissa Underlying/cToken exchange rate\\n     * @param accountTokens Initial account cToken balance\\n     * @param accountTokens Underlying amount to mint\\n     */\\n    function mintWithinLimits(\\n        address cToken,\\n        uint256 exchangeRateMantissa,\\n        uint256 accountTokens,\\n        uint256 mintAmount\\n    ) external returns (uint256) {\\n        // Return no error\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates borrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset whose underlying is being borrowed\\n     * @param borrower The address borrowing the underlying\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\n     */\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external {\\n        // Shh - currently unused\\n        cToken;\\n        borrower;\\n        borrowAmount;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param cToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which would borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256) {\\n        // Shh - currently unused\\n        payer;\\n        borrower;\\n        repayAmount;\\n\\n        // Make sure market is listed\\n        if (!markets[cToken].isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Keep the flywheel moving\\n        flywheelPreBorrowerAction(cToken, borrower);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset being repaid\\n     * @param payer The address repaying the borrow\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 actualRepayAmount,\\n        uint256 borrowerIndex\\n    ) external {\\n        // Shh - currently unused\\n        cToken;\\n        payer;\\n        borrower;\\n        actualRepayAmount;\\n        borrowerIndex;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256) {\\n        // Shh - currently unused\\n        liquidator;\\n\\n        // Make sure markets are listed\\n        if (\\n            !markets[cTokenBorrowed].isListed ||\\n            !markets[cTokenCollateral].isListed\\n        ) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Get borrowers's underlying borrow balance\\n        uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(\\n            borrower\\n        );\\n\\n        /* allow accounts to be liquidated if the market is deprecated */\\n        if (isDeprecated(CToken(cTokenBorrowed))) {\\n            require(\\n                borrowBalance >= repayAmount,\\n                \\\"Can not repay more than the total borrow\\\"\\n            );\\n        } else {\\n            /* The borrower must have shortfall in order to be liquidatable */\\n            (Error err, , uint256 shortfall) = getAccountLiquidityInternal(\\n                borrower\\n            );\\n            if (err != Error.NO_ERROR) {\\n                return uint256(err);\\n            }\\n\\n            if (shortfall == 0) {\\n                return uint256(Error.INSUFFICIENT_SHORTFALL);\\n            }\\n\\n            /* The liquidator may not repay more than what is allowed by the closeFactor */\\n            uint256 maxClose = mul_ScalarTruncate(\\n                Exp({mantissa: closeFactorMantissa}),\\n                borrowBalance\\n            );\\n            if (repayAmount > maxClose) {\\n                return uint256(Error.TOO_MUCH_REPAY);\\n            }\\n        }\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 actualRepayAmount,\\n        uint256 seizeTokens\\n    ) external {\\n        // Shh - currently unused\\n        cTokenBorrowed;\\n        cTokenCollateral;\\n        liquidator;\\n        borrower;\\n        actualRepayAmount;\\n        seizeTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!seizeGuardianPaused, \\\"seize is paused\\\");\\n\\n        // Shh - currently unused\\n        liquidator;\\n        borrower;\\n        seizeTokens;\\n\\n        // Make sure markets are listed\\n        if (\\n            !markets[cTokenCollateral].isListed ||\\n            !markets[cTokenBorrowed].isListed\\n        ) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Make sure cToken Comptrollers are identical\\n        if (\\n            CToken(cTokenCollateral).comptroller() !=\\n            CToken(cTokenBorrowed).comptroller()\\n        ) {\\n            return uint256(Error.COMPTROLLER_MISMATCH);\\n        }\\n\\n        // Keep the flywheel moving\\n        flywheelPreTransferAction(cTokenCollateral, borrower, liquidator);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates seize and reverts on rejection. May emit logs.\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external {\\n        // Shh - currently unused\\n        cTokenCollateral;\\n        cTokenBorrowed;\\n        liquidator;\\n        borrower;\\n        seizeTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param cToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!transferGuardianPaused, \\\"transfer is paused\\\");\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\\n        if (allowed != uint256(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        flywheelPreTransferAction(cToken, src, dst);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates transfer and reverts on rejection. May emit logs.\\n     * @param cToken Asset being transferred\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     */\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external {\\n        // Shh - currently unused\\n        cToken;\\n        src;\\n        dst;\\n        transferTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /*** Flywheel Hooks ***/\\n\\n    /**\\n     * @notice Keeps the flywheel moving pre-mint and pre-redeem\\n     * @param cToken The relevant market\\n     * @param supplier The minter/redeemer\\n     */\\n    function flywheelPreSupplierAction(address cToken, address supplier)\\n        internal\\n    {\\n        for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n            RewardsDistributorDelegate(rewardsDistributors[i])\\n                .flywheelPreSupplierAction(cToken, supplier);\\n    }\\n\\n    /**\\n     * @notice Keeps the flywheel moving pre-borrow and pre-repay\\n     * @param cToken The relevant market\\n     * @param borrower The borrower\\n     */\\n    function flywheelPreBorrowerAction(address cToken, address borrower)\\n        internal\\n    {\\n        for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n            RewardsDistributorDelegate(rewardsDistributors[i])\\n                .flywheelPreBorrowerAction(cToken, borrower);\\n    }\\n\\n    /**\\n     * @notice Keeps the flywheel moving pre-transfer and pre-seize\\n     * @param cToken The relevant market\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     */\\n    function flywheelPreTransferAction(\\n        address cToken,\\n        address src,\\n        address dst\\n    ) internal {\\n        for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n            RewardsDistributorDelegate(rewardsDistributors[i])\\n                .flywheelPreTransferAction(cToken, src, dst);\\n    }\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint256 sumCollateral;\\n        uint256 sumBorrowPlusEffects;\\n        uint256 cTokenBalance;\\n        uint256 borrowBalance;\\n        uint256 exchangeRateMantissa;\\n        uint256 oraclePriceMantissa;\\n        Exp collateralFactor;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToDenom;\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidity(address account)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            Error err,\\n            uint256 liquidity,\\n            uint256 shortfall\\n        ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0);\\n\\n        return (uint256(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidityInternal(address account)\\n        internal\\n        view\\n        returns (\\n            Error,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return\\n            getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address cTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    )\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            Error err,\\n            uint256 liquidity,\\n            uint256 shortfall\\n        ) = getHypotheticalAccountLiquidityInternal(\\n                account,\\n                CToken(cTokenModify),\\n                redeemTokens,\\n                borrowAmount\\n            );\\n        return (uint256(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        CToken cTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    )\\n        internal\\n        view\\n        returns (\\n            Error,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n        uint256 oErr;\\n\\n        // For each asset the account is in\\n        CToken[] memory assets = accountAssets[account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            CToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the cToken\\n            (\\n                oErr,\\n                vars.cTokenBalance,\\n                vars.borrowBalance,\\n                vars.exchangeRateMantissa\\n            ) = asset.getAccountSnapshot(account);\\n            if (oErr != 0) {\\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                return (Error.SNAPSHOT_ERROR, 0, 0);\\n            }\\n            vars.collateralFactor = Exp({\\n                mantissa: markets[address(asset)].collateralFactorMantissa\\n            });\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\n\\n            // Get the normalized price of the asset\\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\n            if (vars.oraclePriceMantissa == 0) {\\n                return (Error.PRICE_ERROR, 0, 0);\\n            }\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n            vars.tokensToDenom = mul_(\\n                mul_(vars.collateralFactor, vars.exchangeRate),\\n                vars.oraclePrice\\n            );\\n\\n            // sumCollateral += tokensToDenom * cTokenBalance\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(\\n                vars.tokensToDenom,\\n                vars.cTokenBalance,\\n                vars.sumCollateral\\n            );\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                vars.oraclePrice,\\n                vars.borrowBalance,\\n                vars.sumBorrowPlusEffects\\n            );\\n\\n            // Calculate effects of interacting with cTokenModify\\n            if (asset == cTokenModify) {\\n                // redeem effect\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                    vars.tokensToDenom,\\n                    redeemTokens,\\n                    vars.sumBorrowPlusEffects\\n                );\\n\\n                // borrow effect\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n                    vars.oraclePrice,\\n                    borrowAmount,\\n                    vars.sumBorrowPlusEffects\\n                );\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n            return (\\n                Error.NO_ERROR,\\n                vars.sumCollateral - vars.sumBorrowPlusEffects,\\n                0\\n            );\\n        } else {\\n            return (\\n                Error.NO_ERROR,\\n                0,\\n                vars.sumBorrowPlusEffects - vars.sumCollateral\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\n     * @param cTokenBorrowed The address of the borrowed cToken\\n     * @param cTokenCollateral The address of the collateral cToken\\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\n     */\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 actualRepayAmount\\n    ) external view returns (uint256, uint256) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(\\n            CToken(cTokenBorrowed)\\n        );\\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(\\n            CToken(cTokenCollateral)\\n        );\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n            return (uint256(Error.PRICE_ERROR), 0);\\n        }\\n\\n        /*\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n         *  seizeTokens = seizeAmount / exchangeRate\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n         */\\n        uint256 exchangeRateMantissa = CToken(cTokenCollateral)\\n            .exchangeRateStored(); // Note: reverts on error\\n        uint256 seizeTokens;\\n        Exp memory numerator;\\n        Exp memory denominator;\\n        Exp memory ratio;\\n\\n        numerator = mul_(\\n            Exp({mantissa: liquidationIncentiveMantissa}),\\n            Exp({mantissa: priceBorrowedMantissa})\\n        );\\n        denominator = mul_(\\n            Exp({mantissa: priceCollateralMantissa}),\\n            Exp({mantissa: exchangeRateMantissa})\\n        );\\n        ratio = div_(numerator, denominator);\\n\\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n\\n        return (uint256(Error.NO_ERROR), seizeTokens);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Add a RewardsDistributor contracts.\\n     * @dev Admin function to add a RewardsDistributor contract\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addRewardsDistributor(address distributor)\\n        external\\n        returns (uint256)\\n    {\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK\\n                );\\n        }\\n\\n        // Check marker method\\n        require(\\n            RewardsDistributorDelegate(distributor).isRewardsDistributor(),\\n            \\\"marker method returned false\\\"\\n        );\\n\\n        // Check for existing RewardsDistributor\\n        for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n            require(\\n                distributor != rewardsDistributors[i],\\n                \\\"RewardsDistributor contract already added\\\"\\n            );\\n\\n        // Add RewardsDistributor to array\\n        rewardsDistributors.push(distributor);\\n        emit AddedRewardsDistributor(distributor);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the global pause borrows override\\n     */\\n    function _setGlobalPauseBorrowOverride(bool status) external {\\n        require(hasAdminRights(), \\\"!admin\\\");\\n        _globalPauseBorrowOverride = status;\\n    }\\n\\n    /**\\n     * @notice Sets the whitelist enforcement for the comptroller\\n     * @dev Admin function to set a new whitelist enforcement boolean\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setWhitelistEnforcement(bool enforce) external returns (uint256) {\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_WHITELIST_ENFORCEMENT_OWNER_CHECK\\n                );\\n        }\\n\\n        // Check if `enforceWhitelist` already equals `enforce`\\n        if (enforceWhitelist == enforce) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        // Set comptroller's `enforceWhitelist` to `enforce`\\n        enforceWhitelist = enforce;\\n\\n        // Emit WhitelistEnforcementChanged(bool enforce);\\n        emit WhitelistEnforcementChanged(enforce);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the whitelist `statuses` for `suppliers`\\n     * @dev Admin function to set the whitelist `statuses` for `suppliers`\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setWhitelistStatuses(\\n        address[] calldata suppliers,\\n        bool[] calldata statuses\\n    ) external returns (uint256) {\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_WHITELIST_STATUS_OWNER_CHECK\\n                );\\n        }\\n\\n        // Set whitelist statuses for suppliers\\n        for (uint256 i = 0; i < suppliers.length; i++) {\\n            address supplier = suppliers[i];\\n\\n            if (statuses[i]) {\\n                // If not already whitelisted, add to whitelist\\n                if (!whitelist[supplier]) {\\n                    whitelist[supplier] = true;\\n                    whitelistArray.push(supplier);\\n                    whitelistIndexes[supplier] = whitelistArray.length - 1;\\n                }\\n            } else {\\n                // If whitelisted, remove from whitelist\\n                if (whitelist[supplier]) {\\n                    uint256 supplierIndex = whitelistIndexes[supplier];\\n\\n                    // If supplier not at the end of the whitelist array, replace it with the item at the end of the whitelist array\\n                    if (supplierIndex < whitelistArray.length - 1) {\\n                        address lastElement = whitelistArray[\\n                            whitelistArray.length - 1\\n                        ];\\n                        whitelistArray[supplierIndex] = lastElement; // Copy last item in list to location of item to be removed\\n                        whitelistIndexes[lastElement] = supplierIndex; // Set whitelist index of moved item to correct index\\n                    }\\n\\n                    // Remove the last element of the whitelist array\\n                    whitelistArray.length--; // Reduce length by 1\\n                    whitelistIndexes[supplier] = 0; // Reset supplier whitelist index to 0 for a gas refund\\n                    whitelist[supplier] = false; // Tell the contract that the supplier is no longer whitelisted\\n                }\\n            }\\n        }\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new price oracle for the comptroller\\n     * @dev Admin function to set a new price oracle\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\\n                );\\n        }\\n\\n        // Track the old oracle for the comptroller\\n        PriceOracle oldOracle = oracle;\\n\\n        // Set comptroller's oracle to newOracle\\n        oracle = newOracle;\\n\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\n        emit NewPriceOracle(oldOracle, newOracle);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the closeFactor used when liquidating borrows\\n     * @dev Admin function to set closeFactor\\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function _setCloseFactor(uint256 newCloseFactorMantissa)\\n        external\\n        returns (uint256)\\n    {\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK\\n                );\\n        }\\n\\n        // Check limits\\n        Exp memory newCloseFactorExp = Exp({mantissa: newCloseFactorMantissa});\\n        Exp memory lowLimit = Exp({mantissa: closeFactorMinMantissa});\\n        if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\\n            return\\n                fail(\\n                    Error.INVALID_CLOSE_FACTOR,\\n                    FailureInfo.SET_CLOSE_FACTOR_VALIDATION\\n                );\\n        }\\n\\n        Exp memory highLimit = Exp({mantissa: closeFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCloseFactorExp)) {\\n            return\\n                fail(\\n                    Error.INVALID_CLOSE_FACTOR,\\n                    FailureInfo.SET_CLOSE_FACTOR_VALIDATION\\n                );\\n        }\\n\\n        // Set pool close factor to new close factor, remember old value\\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\\n        closeFactorMantissa = newCloseFactorMantissa;\\n\\n        // Emit event\\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the collateralFactor for a market\\n     * @dev Admin function to set per-market collateralFactor\\n     * @param cToken The market to set the factor on\\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function _setCollateralFactor(\\n        CToken cToken,\\n        uint256 newCollateralFactorMantissa\\n    ) public returns (uint256) {\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\\n                );\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return\\n                fail(\\n                    Error.MARKET_NOT_LISTED,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\\n                );\\n        }\\n\\n        Exp memory newCollateralFactorExp = Exp({\\n            mantissa: newCollateralFactorMantissa\\n        });\\n\\n        // Check collateral factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n            return\\n                fail(\\n                    Error.INVALID_COLLATERAL_FACTOR,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\\n                );\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        if (\\n            newCollateralFactorMantissa != 0 &&\\n            oracle.getUnderlyingPrice(cToken) == 0\\n        ) {\\n            return\\n                fail(\\n                    Error.PRICE_ERROR,\\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\\n                );\\n        }\\n\\n        // Set market's collateral factor to new collateral factor, remember old value\\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n        // Emit event with asset, old collateral factor, and new collateral factor\\n        emit NewCollateralFactor(\\n            cToken,\\n            oldCollateralFactorMantissa,\\n            newCollateralFactorMantissa\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets liquidationIncentive\\n     * @dev Admin function to set liquidationIncentive\\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n     */\\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa)\\n        external\\n        returns (uint256)\\n    {\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\\n                );\\n        }\\n\\n        // Check de-scaled min <= newLiquidationIncentive <= max\\n        Exp memory newLiquidationIncentive = Exp({\\n            mantissa: newLiquidationIncentiveMantissa\\n        });\\n        Exp memory minLiquidationIncentive = Exp({\\n            mantissa: liquidationIncentiveMinMantissa\\n        });\\n        if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\\n            return\\n                fail(\\n                    Error.INVALID_LIQUIDATION_INCENTIVE,\\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION\\n                );\\n        }\\n\\n        Exp memory maxLiquidationIncentive = Exp({\\n            mantissa: liquidationIncentiveMaxMantissa\\n        });\\n        if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\\n            return\\n                fail(\\n                    Error.INVALID_LIQUIDATION_INCENTIVE,\\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION\\n                );\\n        }\\n\\n        // Save current value for use in log\\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\n\\n        // Set liquidation incentive to new incentive\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        // Emit event with old incentive, new incentive\\n        emit NewLiquidationIncentive(\\n            oldLiquidationIncentiveMantissa,\\n            newLiquidationIncentiveMantissa\\n        );\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Add the market to the markets mapping and set it as listed\\n     * @dev Admin function to set isListed and add support for the market\\n     * @param cToken The address of the market (token) to list\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _supportMarket(CToken cToken) internal returns (uint256) {\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\\n                );\\n        }\\n\\n        // Is market already listed?\\n        if (markets[address(cToken)].isListed) {\\n            return\\n                fail(\\n                    Error.MARKET_ALREADY_LISTED,\\n                    FailureInfo.SUPPORT_MARKET_EXISTS\\n                );\\n        }\\n\\n        // Sanity check to make sure its really a CToken\\n        require(cToken.isCToken(), \\\"marker method returned false\\\");\\n\\n        // Check cToken.comptroller == this\\n        require(\\n            address(cToken.comptroller()) == address(this),\\n            \\\"Cannot support a market with a different Comptroller.\\\"\\n        );\\n\\n        // Make sure market is not already listed\\n        address underlying = cToken.isCEther()\\n            ? address(0)\\n            : CErc20(address(cToken)).underlying();\\n\\n        if (address(cTokensByUnderlying[underlying]) != address(0)) {\\n            return\\n                fail(\\n                    Error.MARKET_ALREADY_LISTED,\\n                    FailureInfo.SUPPORT_MARKET_EXISTS\\n                );\\n        }\\n\\n        // List market and emit event\\n        markets[address(cToken)] = Market({\\n            isListed: true,\\n            collateralFactorMantissa: 0\\n        });\\n        allMarkets.push(cToken);\\n        cTokensByUnderlying[underlying] = cToken;\\n        emit MarketListed(cToken);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Deploy cToken, add the market to the markets mapping, and set it as listed and set the collateral factor\\n     * @dev Admin function to deploy cToken, set isListed, and add support for the market and set the collateral factor\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _deployMarket(\\n        bool isCEther,\\n        bytes calldata constructorData,\\n        uint256 collateralFactorMantissa\\n    ) external returns (uint256) {\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\\n                );\\n        }\\n\\n        // Temporarily enable Fuse admin rights for asset deployment (storing the original value)\\n        bool oldFuseAdminHasRights = fuseAdminHasRights;\\n        fuseAdminHasRights = true;\\n\\n        // Deploy via Fuse admin\\n        CToken cToken = CToken(\\n            isCEther\\n                ? fuseAdmin.deployCEther(constructorData)\\n                : fuseAdmin.deployCErc20(constructorData)\\n        );\\n\\n        // Reset Fuse admin rights to the original value\\n        fuseAdminHasRights = oldFuseAdminHasRights;\\n\\n        // Support market here in the Comptroller\\n        uint256 err = _supportMarket(cToken);\\n\\n        // Set collateral factor\\n        return\\n            err == uint256(Error.NO_ERROR)\\n                ? _setCollateralFactor(cToken, collateralFactorMantissa)\\n                : err;\\n    }\\n\\n    /**\\n     * @notice Removed a market from the markets mapping and sets it as unlisted\\n     * @dev Admin function unset isListed and collateralFactorMantissa and unadd support for the market\\n     * @param cToken The address of the market (token) to unlist\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _unsupportMarket(CToken cToken) external returns (uint256) {\\n        // Check admin rights\\n        if (!hasAdminRights())\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.UNSUPPORT_MARKET_OWNER_CHECK\\n                );\\n\\n        // Check if market is already unlisted\\n        if (!markets[address(cToken)].isListed)\\n            return\\n                fail(\\n                    Error.MARKET_NOT_LISTED,\\n                    FailureInfo.UNSUPPORT_MARKET_DOES_NOT_EXIST\\n                );\\n\\n        // Check if market is in use\\n        if (cToken.totalSupply() > 0)\\n            return\\n                fail(\\n                    Error.NONZERO_TOTAL_SUPPLY,\\n                    FailureInfo.UNSUPPORT_MARKET_IN_USE\\n                );\\n\\n        // Unlist market\\n        delete markets[address(cToken)];\\n\\n        /* Delete cToken from allMarkets */\\n        // load into memory for faster iteration\\n        CToken[] memory _allMarkets = allMarkets;\\n        uint256 len = _allMarkets.length;\\n        uint256 assetIndex = len;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (_allMarkets[i] == cToken) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        assert(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        allMarkets[assetIndex] = allMarkets[allMarkets.length - 1];\\n        allMarkets.length--;\\n\\n        cTokensByUnderlying[\\n            cToken.isCEther()\\n                ? address(0)\\n                : CErc20(address(cToken)).underlying()\\n        ] = CToken(address(0));\\n        emit MarketUnlisted(cToken);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Toggles the auto-implementation feature\\n     * @param enabled If the feature is to be enabled\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _toggleAutoImplementations(bool enabled) public returns (uint256) {\\n        if (!hasAdminRights()) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK\\n                );\\n        }\\n\\n        // Return no error if already set to the desired value\\n        if (autoImplementation == enabled) return uint256(Error.NO_ERROR);\\n\\n        // Store autoImplementation with value enabled\\n        autoImplementation = enabled;\\n\\n        // Emit AutoImplementationsToggled(enabled)\\n        emit AutoImplementationsToggled(enabled);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Set the given supply caps for the given cToken markets. Supplying that brings total underlying supply to or above supply cap will revert.\\n     * @dev Admin or borrowCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\\n     * @param cTokens The addresses of the markets (tokens) to change the supply caps for\\n     * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\\n     */\\n    function _setMarketSupplyCaps(\\n        CToken[] calldata cTokens,\\n        uint256[] calldata newSupplyCaps\\n    ) external {\\n        require(\\n            hasAdminRights() || msg.sender == borrowCapGuardian,\\n            \\\"only admin or borrow cap guardian can set supply caps\\\"\\n        );\\n\\n        uint256 numMarkets = cTokens.length;\\n        uint256 numSupplyCaps = newSupplyCaps.length;\\n\\n        require(\\n            numMarkets != 0 && numMarkets == numSupplyCaps,\\n            \\\"invalid input\\\"\\n        );\\n\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            supplyCaps[address(cTokens[i])] = newSupplyCaps[i];\\n            emit NewSupplyCap(cTokens[i], newSupplyCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n     * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n     * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n     */\\n    function _setMarketBorrowCaps(\\n        CToken[] calldata cTokens,\\n        uint256[] calldata newBorrowCaps\\n    ) external {\\n        require(\\n            hasAdminRights() || msg.sender == borrowCapGuardian,\\n            \\\"only admin or borrow cap guardian can set borrow caps\\\"\\n        );\\n\\n        uint256 numMarkets = cTokens.length;\\n        uint256 numBorrowCaps = newBorrowCaps.length;\\n\\n        require(\\n            numMarkets != 0 && numMarkets == numBorrowCaps,\\n            \\\"invalid input\\\"\\n        );\\n\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Borrow Cap Guardian\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n     */\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\n        require(hasAdminRights(), \\\"only admin can set borrow cap guardian\\\");\\n\\n        // Save current value for inclusion in log\\n        address oldBorrowCapGuardian = borrowCapGuardian;\\n\\n        // Store borrowCapGuardian with value newBorrowCapGuardian\\n        borrowCapGuardian = newBorrowCapGuardian;\\n\\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(address newPauseGuardian)\\n        public\\n        returns (uint256)\\n    {\\n        if (!hasAdminRights()) {\\n            return\\n                fail(\\n                    Error.UNAUTHORIZED,\\n                    FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\\n                );\\n        }\\n\\n        // Save current value for inclusion in log\\n        address oldPauseGuardian = pauseGuardian;\\n\\n        // Store pauseGuardian with value newPauseGuardian\\n        pauseGuardian = newPauseGuardian;\\n\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\\n        require(\\n            markets[address(cToken)].isListed,\\n            \\\"cannot pause a market that is not listed\\\"\\n        );\\n        require(\\n            msg.sender == pauseGuardian || hasAdminRights(),\\n            \\\"only pause guardian and admin can pause\\\"\\n        );\\n        require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\n\\n        mintGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Mint\\\", state);\\n        return state;\\n    }\\n\\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\\n        require(\\n            markets[address(cToken)].isListed,\\n            \\\"cannot pause a market that is not listed\\\"\\n        );\\n        require(\\n            msg.sender == pauseGuardian || hasAdminRights(),\\n            \\\"only pause guardian and admin can pause\\\"\\n        );\\n        require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\n\\n        borrowGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Borrow\\\", state);\\n        return state;\\n    }\\n\\n    function _setTransferPaused(bool state) public returns (bool) {\\n        require(\\n            msg.sender == pauseGuardian || hasAdminRights(),\\n            \\\"only pause guardian and admin can pause\\\"\\n        );\\n        require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\n\\n        transferGuardianPaused = state;\\n        emit ActionPaused(\\\"Transfer\\\", state);\\n        return state;\\n    }\\n\\n    function _setSeizePaused(bool state) public returns (bool) {\\n        require(\\n            msg.sender == pauseGuardian || hasAdminRights(),\\n            \\\"only pause guardian and admin can pause\\\"\\n        );\\n        require(hasAdminRights() || state == true, \\\"only admin can unpause\\\");\\n\\n        seizeGuardianPaused = state;\\n        emit ActionPaused(\\\"Seize\\\", state);\\n        return state;\\n    }\\n\\n    function _become(UnitrollerInterface unitroller) public {\\n        require(\\n            (msg.sender == address(fuseAdmin) &&\\n                unitroller.fuseAdminHasRights()) ||\\n                (msg.sender == unitroller.admin() &&\\n                    unitroller.adminHasRights()),\\n            \\\"only unitroller admin can change brains\\\"\\n        );\\n\\n        uint256 changeStatus = unitroller._acceptImplementation();\\n        require(changeStatus == 0, \\\"change not authorized\\\");\\n\\n        Comptroller(address(unitroller))._becomeImplementation();\\n    }\\n\\n    function _becomeImplementation() external {\\n        require(\\n            msg.sender == comptrollerImplementation,\\n            \\\"only implementation may call _becomeImplementation\\\"\\n        );\\n\\n        if (!_notEnteredInitialized) {\\n            _notEntered = true;\\n            _notEnteredInitialized = true;\\n        }\\n    }\\n\\n    /*** Helper Functions ***/\\n\\n    /**\\n     * @notice Return all of the markets\\n     * @dev The automatic getter may be used to access an individual market.\\n     * @return The list of market addresses\\n     */\\n    function getAllMarkets() public view returns (CToken[] memory) {\\n        return allMarkets;\\n    }\\n\\n    /**\\n     * @notice Return all of the borrowers\\n     * @dev The automatic getter may be used to access an individual borrower.\\n     * @return The list of borrower account addresses\\n     */\\n    function getAllBorrowers() public view returns (address[] memory) {\\n        return allBorrowers;\\n    }\\n\\n    /**\\n     * @notice Return all of the whitelist\\n     * @dev The automatic getter may be used to access an individual whitelist status.\\n     * @return The list of borrower account addresses\\n     */\\n    function getWhitelist() external view returns (address[] memory) {\\n        return whitelistArray;\\n    }\\n\\n    /**\\n     * @notice Returns an array of all RewardsDistributors\\n     */\\n    function getRewardsDistributors() external view returns (address[] memory) {\\n        return rewardsDistributors;\\n    }\\n\\n    /**\\n     * @notice Returns true if the given cToken market has been deprecated\\n     * @dev All borrows in a deprecated cToken market can be immediately liquidated\\n     * @param cToken The market to check if deprecated\\n     */\\n    function isDeprecated(CToken cToken) public view returns (bool) {\\n        return\\n            markets[address(cToken)].collateralFactorMantissa == 0 &&\\n            borrowGuardianPaused[address(cToken)] == true &&\\n            add_(\\n                add_(cToken.reserveFactorMantissa(), cToken.adminFeeMantissa()),\\n                cToken.fuseFeeMantissa()\\n            ) ==\\n            1e18;\\n    }\\n\\n    /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\n\\n    /**\\n     * @dev Called by cTokens before a non-reentrant function for pool-wide reentrancy prevention.\\n     * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\\n     */\\n    function _beforeNonReentrant() external {\\n        require(\\n            markets[msg.sender].isListed,\\n            \\\"Comptroller:_beforeNonReentrant: caller not listed as market\\\"\\n        );\\n        require(_notEntered, \\\"re-entered across assets\\\");\\n        _notEntered = false;\\n    }\\n\\n    /**\\n     * @dev Called by cTokens after a non-reentrant function for pool-wide reentrancy prevention.\\n     * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\\n     */\\n    function _afterNonReentrant() external {\\n        require(\\n            markets[msg.sender].isListed,\\n            \\\"Comptroller:_afterNonReentrant: caller not listed as market\\\"\\n        );\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0x74b7a8034c93b39df3cabe106c70dcec672f09902a113fc1da134569d6460868\"},\"contracts/rari-fuse/src/core/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /// @notice Administrator for Fuse\\n    function fuseAdmin() external returns (IFuseFeeDistributor);\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens)\\n        external\\n        returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintWithinLimits(\\n        address cToken,\\n        uint256 exchangeRateMantissa,\\n        uint256 accountTokens,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowWithinLimits(address cToken, uint256 accountBorrowsNew)\\n        external\\n        returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\n\\n    function _beforeNonReentrant() external;\\n\\n    function _afterNonReentrant() external;\\n}\\n\",\"keccak256\":\"0x50a795845d3f32598fe532c7215f78411fd848ea708974eb6185db579b04b2b9\"},\"contracts/rari-fuse/src/core/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n     * @notice Administrator for Fuse\\n     */\\n    IFuseFeeDistributor public fuseAdmin;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address public pendingAdmin;\\n\\n    /**\\n     * @notice Whether or not the Fuse admin has admin rights\\n     */\\n    bool public fuseAdminHasRights = true;\\n\\n    /**\\n     * @notice Whether or not the admin has admin rights\\n     */\\n    bool public adminHasRights = true;\\n\\n    /**\\n     * @notice Returns a boolean indicating if the sender has admin rights\\n     */\\n    function hasAdminRights() internal view returns (bool) {\\n        return\\n            (msg.sender == admin && adminHasRights) ||\\n            (msg.sender == address(fuseAdmin) && fuseAdminHasRights);\\n    }\\n\\n    /**\\n     * @notice Active brains of Unitroller\\n     */\\n    address public comptrollerImplementation;\\n\\n    /**\\n     * @notice Pending brains of Unitroller\\n     */\\n    address public pendingComptrollerImplementation;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[10] private __gap;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint256 public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint256 public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint256 internal maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    struct Market {\\n        /**\\n         * @notice Whether or not this market is listed\\n         */\\n        bool isListed;\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint256 collateralFactorMantissa;\\n        /**\\n         * @notice Per-market mapping of \\\"accounts in this asset\\\"\\n         */\\n        mapping(address => bool) accountMembership;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /**\\n     * @dev Maps borrowers to booleans indicating if they have entered any markets\\n     */\\n    mapping(address => bool) internal borrowers;\\n\\n    /// @notice A list of all borrowers who have entered markets\\n    address[] public allBorrowers;\\n\\n    /// @notice Indexes of borrower account addresses in the `allBorrowers` array\\n    mapping(address => uint256) internal borrowerIndexes;\\n\\n    /**\\n     * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\\n     */\\n    mapping(address => bool) public suppliers;\\n\\n    /// @notice All cTokens addresses mapped by their underlying token addresses\\n    mapping(address => CToken) public cTokensByUnderlying;\\n\\n    /// @notice Whether or not the supplier whitelist is enforced\\n    bool public enforceWhitelist;\\n\\n    /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\\n    mapping(address => bool) public whitelist;\\n\\n    /// @notice An array of all whitelisted accounts\\n    address[] public whitelistArray;\\n\\n    /// @notice Indexes of account addresses in the `whitelistArray` array\\n    mapping(address => uint256) internal whitelistIndexes;\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    /**\\n     * @dev Whether or not the implementation should be auto-upgraded.\\n     */\\n    bool public autoImplementation;\\n\\n    /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    address public borrowCapGuardian;\\n\\n    /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n    mapping(address => uint256) public borrowCaps;\\n\\n    /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n    mapping(address => uint256) public supplyCaps;\\n\\n    /// @notice RewardsDistributor contracts to notify of flywheel changes.\\n    address[] public rewardsDistributors;\\n\\n    /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\\n    bool internal _notEntered;\\n\\n    /// @dev Whether or not _notEntered has been initialized\\n    bool internal _notEnteredInitialized;\\n}\\n\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\n    bool public _globalPauseBorrowOverride;\\n}\\n\",\"keccak256\":\"0x6e6531ea9a0395dc3acae7a389cd85026702e239a409e810bf948d75e6eaa41b\"},\"contracts/rari-fuse/src/core/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount)\\n        external\\n        returns (bool success);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount)\\n        external\\n        returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0xc2a9ae6160881b4c0e51752032ea8e924923b255539328eaafbec80606befb29\"},\"contracts/rari-fuse/src/core/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount)\\n        external\\n        returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0xce2d453a6327b77cd28c5f983531cb1551b65c6cdd11bb548e8bc8afaa96d28b\"},\"contracts/rari-fuse/src/core/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY,\\n        SUPPLIER_NOT_WHITELISTED,\\n        BORROW_BELOW_MIN,\\n        SUPPLY_ABOVE_MAX,\\n        NONZERO_TOTAL_SUPPLY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n        TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SET_WHITELIST_ENFORCEMENT_OWNER_CHECK,\\n        SET_WHITELIST_STATUS_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n        UNSUPPORT_MARKET_OWNER_CHECK,\\n        UNSUPPORT_MARKET_DOES_NOT_EXIST,\\n        UNSUPPORT_MARKET_IN_USE\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), 0);\\n\\n        return uint256(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(\\n        Error err,\\n        FailureInfo info,\\n        uint256 opaqueError\\n    ) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n        return uint256(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED,\\n        UTILIZATION_ABOVE_MAX\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_FUSE_FEES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_ADMIN_FEES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        NEW_UTILIZATION_RATE_ABOVE_MAX,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        WITHDRAW_FUSE_FEES_ACCRUE_INTEREST_FAILED,\\n        WITHDRAW_FUSE_FEES_CASH_NOT_AVAILABLE,\\n        WITHDRAW_FUSE_FEES_FRESH_CHECK,\\n        WITHDRAW_FUSE_FEES_VALIDATION,\\n        WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED,\\n        WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE,\\n        WITHDRAW_ADMIN_FEES_FRESH_CHECK,\\n        WITHDRAW_ADMIN_FEES_VALIDATION,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED,\\n        SET_ADMIN_FEE_ADMIN_CHECK,\\n        SET_ADMIN_FEE_FRESH_CHECK,\\n        SET_ADMIN_FEE_BOUNDS_CHECK,\\n        SET_FUSE_FEE_ACCRUE_INTEREST_FAILED,\\n        SET_FUSE_FEE_FRESH_CHECK,\\n        SET_FUSE_FEE_BOUNDS_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), 0);\\n\\n        return uint256(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(\\n        Error err,\\n        FailureInfo info,\\n        uint256 opaqueError\\n    ) internal returns (uint256) {\\n        emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n        return\\n            err == Error.COMPTROLLER_REJECTION\\n                ? 1000 + opaqueError\\n                : uint256(err);\\n    }\\n}\\n\",\"keccak256\":\"0x2bae81b24c07a36912e9b70126dcc0f3976de070a1928acb795c68a0010d8156\"},\"contracts/rari-fuse/src/core/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint256 num, uint256 denom)\\n        internal\\n        pure\\n        returns (MathError, Exp memory)\\n    {\\n        (MathError err0, uint256 scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint256 rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b)\\n        internal\\n        pure\\n        returns (MathError, Exp memory)\\n    {\\n        (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b)\\n        internal\\n        pure\\n        returns (MathError, Exp memory)\\n    {\\n        (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint256 scalar)\\n        internal\\n        pure\\n        returns (MathError, Exp memory)\\n    {\\n        (MathError err0, uint256 scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint256 scalar)\\n        internal\\n        pure\\n        returns (MathError, uint256)\\n    {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint256 scalar,\\n        uint256 addend\\n    ) internal pure returns (MathError, uint256) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint256 scalar)\\n        internal\\n        pure\\n        returns (MathError, Exp memory)\\n    {\\n        (MathError err0, uint256 descaledMantissa) = divUInt(\\n            a.mantissa,\\n            scalar\\n        );\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint256 scalar, Exp memory divisor)\\n        internal\\n        pure\\n        returns (MathError, Exp memory)\\n    {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint256 numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint256 scalar, Exp memory divisor)\\n        internal\\n        pure\\n        returns (MathError, uint256)\\n    {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b)\\n        internal\\n        pure\\n        returns (MathError, Exp memory)\\n    {\\n        (MathError err0, uint256 doubleScaledProduct) = mulUInt(\\n            a.mantissa,\\n            b.mantissa\\n        );\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(\\n            halfExpScale,\\n            doubleScaledProduct\\n        );\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint256 product) = divUInt(\\n            doubleScaledProductWithHalfScale,\\n            expScale\\n        );\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (MathError, Exp memory)\\n    {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(\\n        Exp memory a,\\n        Exp memory b,\\n        Exp memory c\\n    ) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b)\\n        internal\\n        pure\\n        returns (MathError, Exp memory)\\n    {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n}\\n\",\"keccak256\":\"0x29a89c982f5966558b20a8844e8d2de66a5354cd7aa22c09ee25b9c8ad36a7c3\"},\"contracts/rari-fuse/src/core/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint256 constant expScale = 1e18;\\n    uint256 constant doubleScale = 1e36;\\n    uint256 constant halfExpScale = expScale / 2;\\n    uint256 constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint256 mantissa;\\n    }\\n\\n    struct Double {\\n        uint256 mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint256) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint256 scalar)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint256 scalar,\\n        uint256 addend\\n    ) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe216(uint256 n, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint216)\\n    {\\n        require(n < 2**216, errorMessage);\\n        return uint216(n);\\n    }\\n\\n    function safe40(uint256 n, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint40)\\n    {\\n        require(n < 2**40, errorMessage);\\n        return uint40(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b)\\n        internal\\n        pure\\n        returns (Exp memory)\\n    {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b)\\n        internal\\n        pure\\n        returns (Exp memory)\\n    {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b)\\n        internal\\n        pure\\n        returns (Exp memory)\\n    {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b)\\n        internal\\n        pure\\n        returns (Exp memory)\\n    {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return\\n            Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint256 b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0x618f4c3459d723ccd5cce0cc52566737132df478c0391df1831ae78de2a40904\"},\"contracts/rari-fuse/src/core/IFuseFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\ninterface IFuseFeeDistributor {\\n    function minBorrowEth() external view returns (uint256);\\n\\n    function maxSupplyEth() external view returns (uint256);\\n\\n    function maxUtilizationRate() external view returns (uint256);\\n\\n    function interestFeeRate() external view returns (uint256);\\n\\n    function _callPool(address[] calldata targets, bytes[] calldata data)\\n        external;\\n\\n    function owner() external view returns (address);\\n\\n    function comptrollerImplementationWhitelist(\\n        address oldImplementation,\\n        address newImplementation\\n    ) external view returns (bool);\\n\\n    function cErc20DelegateWhitelist(\\n        address oldImplementation,\\n        address newImplementation,\\n        bool allowResign\\n    ) external view returns (bool);\\n\\n    function cEtherDelegateWhitelist(\\n        address oldImplementation,\\n        address newImplementation,\\n        bool allowResign\\n    ) external view returns (bool);\\n\\n    function latestComptrollerImplementation(address oldImplementation)\\n        external\\n        view\\n        returns (address);\\n\\n    function latestCErc20Delegate(address oldImplementation)\\n        external\\n        view\\n        returns (\\n            address cErc20Delegate,\\n            bool allowResign,\\n            bytes memory becomeImplementationData\\n        );\\n\\n    function latestCEtherDelegate(address oldImplementation)\\n        external\\n        view\\n        returns (\\n            address cEtherDelegate,\\n            bool allowResign,\\n            bytes memory becomeImplementationData\\n        );\\n\\n    function deployCEther(bytes calldata constructorData)\\n        external\\n        returns (address);\\n\\n    function deployCErc20(bytes calldata constructorData)\\n        external\\n        returns (address);\\n\\n    function() external payable;\\n}\\n\",\"keccak256\":\"0x3ab3066211efbec2145e911d1f3cc46bbb2f25173ad41a1025512285179b1eb6\"},\"contracts/rari-fuse/src/core/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6be3eb182fefbff1337d7943268a0712da26f14f5f58410b6a3dec9d16773060\"},\"contracts/rari-fuse/src/core/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n     * @notice Get the underlying price of a cToken asset\\n     * @param cToken The cToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\n     *  Zero means the price is unavailable.\\n     */\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x84371d7b84c5ec127d79df60ddaa2232849496515ae579317e2b5464b0f9caaa\"},\"contracts/rari-fuse/src/core/RewardsDistributorDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\nimport \\\"./Comptroller.sol\\\";\\nimport \\\"./RewardsDistributorStorage.sol\\\";\\n\\n/**\\n * @title RewardsDistributorDelegate (COMP distribution logic extracted from `Comptroller`)\\n * @author Compound\\n */\\ncontract RewardsDistributorDelegate is\\n    RewardsDistributorDelegateStorageV1,\\n    ExponentialNoError\\n{\\n    /// @dev Notice that this contract is a RewardsDistributor\\n    bool public constant isRewardsDistributor = true;\\n\\n    /// @notice Emitted when pendingAdmin is changed\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /// @notice Emitted when a new COMP speed is calculated for a market\\n    event CompSupplySpeedUpdated(CToken indexed cToken, uint256 newSpeed);\\n\\n    /// @notice Emitted when a new COMP speed is calculated for a market\\n    event CompBorrowSpeedUpdated(CToken indexed cToken, uint256 newSpeed);\\n\\n    /// @notice Emitted when a new COMP speed is set for a contributor\\n    event ContributorCompSpeedUpdated(\\n        address indexed contributor,\\n        uint256 newSpeed\\n    );\\n\\n    /// @notice Emitted when COMP is distributed to a supplier\\n    event DistributedSupplierComp(\\n        CToken indexed cToken,\\n        address indexed supplier,\\n        uint256 compDelta,\\n        uint256 compSupplyIndex\\n    );\\n\\n    /// @notice Emitted when COMP is distributed to a borrower\\n    event DistributedBorrowerComp(\\n        CToken indexed cToken,\\n        address indexed borrower,\\n        uint256 compDelta,\\n        uint256 compBorrowIndex\\n    );\\n\\n    /// @notice Emitted when COMP is granted by admin\\n    event CompGranted(address recipient, uint256 amount);\\n\\n    /// @notice The initial COMP index for a market\\n    uint216 public constant compInitialIndex = 1e36;\\n\\n    /// @dev Intitializer to set admin to caller and set reward token\\n    function initialize(address _rewardToken) external {\\n        require(msg.sender == admin, \\\"Only admin can initialize.\\\");\\n        require(rewardToken == address(0), \\\"Already initialized.\\\");\\n        require(\\n            _rewardToken != address(0),\\n            \\\"Cannot initialize reward token to the zero address.\\\"\\n        );\\n        rewardToken = _rewardToken;\\n    }\\n\\n    /*** Set Admin ***/\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     */\\n    function _setPendingAdmin(address newPendingAdmin) external {\\n        // Check caller = admin\\n        require(\\n            msg.sender == admin,\\n            \\\"RewardsDistributor:_setPendingAdmin: admin only\\\"\\n        );\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     */\\n    function _acceptAdmin() external {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        require(\\n            msg.sender == pendingAdmin && msg.sender != address(0),\\n            \\\"RewardsDistributor:_acceptAdmin: pending admin only\\\"\\n        );\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n    }\\n\\n    /*** Comp Distribution ***/\\n\\n    /**\\n     * @notice Check the cToken before adding\\n     * @param cToken The market to add\\n     */\\n    function checkCToken(CToken cToken) internal view {\\n        // Make sure cToken is listed\\n        Comptroller comptroller = Comptroller(address(cToken.comptroller()));\\n        (bool isListed, ) = comptroller.markets(address(cToken));\\n        require(isListed == true, \\\"comp market is not listed\\\");\\n\\n        // Make sure distributor is added\\n        bool distributorAdded = false;\\n        address[] memory distributors = comptroller.getRewardsDistributors();\\n        for (uint256 i = 0; i < distributors.length; i++)\\n            if (distributors[i] == address(this)) distributorAdded = true;\\n        require(distributorAdded == true, \\\"distributor not added\\\");\\n    }\\n\\n    /**\\n     * @notice Set COMP speed for a single market\\n     * @param cToken The market whose COMP speed to update\\n     * @param compSpeed New COMP speed for market\\n     */\\n    function setCompSupplySpeedInternal(CToken cToken, uint256 compSpeed)\\n        internal\\n    {\\n        uint256 currentCompSpeed = compSupplySpeeds[address(cToken)];\\n        if (currentCompSpeed != 0) {\\n            // note that COMP speed could be set to 0 to halt liquidity rewards for a market\\n            updateCompSupplyIndex(address(cToken));\\n        } else if (compSpeed != 0) {\\n            // Make sure cToken is listed and distributor is added\\n            checkCToken(cToken);\\n\\n            // Add the COMP market\\n            if (compSupplyState[address(cToken)].index == 0) {\\n                compSupplyState[address(cToken)] = CompMarketState({\\n                    index: compInitialIndex,\\n                    block: safe40(\\n                        getBlockNumber(),\\n                        \\\"block timestamp exceeds 40 bits\\\"\\n                    )\\n                });\\n\\n                // Add to allMarkets array if not already there\\n                if (compBorrowState[address(cToken)].index == 0) {\\n                    allMarkets.push(cToken);\\n                }\\n            } else {\\n                // Update block number to ensure extra interest is not accrued during the prior period\\n                compSupplyState[address(cToken)].block = safe40(\\n                    getBlockNumber(),\\n                    \\\"block timestamp exceeds 40 bits\\\"\\n                );\\n            }\\n        }\\n\\n        if (currentCompSpeed != compSpeed) {\\n            compSupplySpeeds[address(cToken)] = compSpeed;\\n            emit CompSupplySpeedUpdated(cToken, compSpeed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set COMP speed for a single market\\n     * @param cToken The market whose COMP speed to update\\n     * @param compSpeed New COMP speed for market\\n     */\\n    function setCompBorrowSpeedInternal(CToken cToken, uint256 compSpeed)\\n        internal\\n    {\\n        uint256 currentCompSpeed = compBorrowSpeeds[address(cToken)];\\n        if (currentCompSpeed != 0) {\\n            // note that COMP speed could be set to 0 to halt liquidity rewards for a market\\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\n            updateCompBorrowIndex(address(cToken), borrowIndex);\\n        } else if (compSpeed != 0) {\\n            // Make sure cToken is listed and distributor is added\\n            checkCToken(cToken);\\n\\n            // Add the COMP market\\n            if (compBorrowState[address(cToken)].index == 0) {\\n                compBorrowState[address(cToken)] = CompMarketState({\\n                    index: compInitialIndex,\\n                    block: safe40(\\n                        getBlockNumber(),\\n                        \\\"block timestamp exceeds 40 bits\\\"\\n                    )\\n                });\\n\\n                // Add to allMarkets array if not already there\\n                if (compSupplyState[address(cToken)].index == 0) {\\n                    allMarkets.push(cToken);\\n                }\\n            } else {\\n                // Update block number to ensure extra interest is not accrued during the prior period\\n                compBorrowState[address(cToken)].block = safe40(\\n                    getBlockNumber(),\\n                    \\\"block timestamp exceeds 40 bits\\\"\\n                );\\n            }\\n        }\\n\\n        if (currentCompSpeed != compSpeed) {\\n            compBorrowSpeeds[address(cToken)] = compSpeed;\\n            emit CompBorrowSpeedUpdated(cToken, compSpeed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue COMP to the market by updating the supply index\\n     * @param cToken The market whose supply index to update\\n     */\\n    function updateCompSupplyIndex(address cToken) internal {\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        uint256 supplySpeed = compSupplySpeeds[cToken];\\n        uint256 blockNumber = getBlockNumber();\\n        uint256 deltaBlocks = sub_(blockNumber, uint256(supplyState.block));\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\n            uint256 supplyTokens = CToken(cToken).totalSupply();\\n            uint256 compAccrued_ = mul_(deltaBlocks, supplySpeed);\\n            Double memory ratio = supplyTokens > 0\\n                ? fraction(compAccrued_, supplyTokens)\\n                : Double({mantissa: 0});\\n            Double memory index = add_(\\n                Double({mantissa: supplyState.index}),\\n                ratio\\n            );\\n            compSupplyState[cToken] = CompMarketState({\\n                index: safe216(index.mantissa, \\\"new index exceeds 216 bits\\\"),\\n                block: safe40(blockNumber, \\\"block timestamp exceeds 40 bits\\\")\\n            });\\n        } else if (deltaBlocks > 0 && supplyState.index > 0) {\\n            supplyState.block = safe40(\\n                blockNumber,\\n                \\\"block timestamp exceeds 40 bits\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue COMP to the market by updating the borrow index\\n     * @param cToken The market whose borrow index to update\\n     */\\n    function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex)\\n        internal\\n    {\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n        uint256 borrowSpeed = compBorrowSpeeds[cToken];\\n        uint256 blockNumber = getBlockNumber();\\n        uint256 deltaBlocks = sub_(blockNumber, uint256(borrowState.block));\\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\\n            uint256 borrowAmount = div_(\\n                CToken(cToken).totalBorrows(),\\n                marketBorrowIndex\\n            );\\n            uint256 compAccrued_ = mul_(deltaBlocks, borrowSpeed);\\n            Double memory ratio = borrowAmount > 0\\n                ? fraction(compAccrued_, borrowAmount)\\n                : Double({mantissa: 0});\\n            Double memory index = add_(\\n                Double({mantissa: borrowState.index}),\\n                ratio\\n            );\\n            compBorrowState[cToken] = CompMarketState({\\n                index: safe216(index.mantissa, \\\"new index exceeds 216 bits\\\"),\\n                block: safe40(blockNumber, \\\"block timestamp exceeds 40 bits\\\")\\n            });\\n        } else if (deltaBlocks > 0 && borrowState.index > 0) {\\n            borrowState.block = safe40(\\n                blockNumber,\\n                \\\"block timestamp exceeds 40 bits\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\\n     * @param cToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute COMP to\\n     */\\n    function distributeSupplierComp(address cToken, address supplier) internal {\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\\n        Double memory supplierIndex = Double({\\n            mantissa: compSupplierIndex[cToken][supplier]\\n        });\\n        compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;\\n\\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\\n            // Set the supplier reward index to the initial reward index if it has never been set before.\\n            // If it has never been set before, the supplier has not taken any action since the reward stream was set up, meaning they have been supplying the whole time, so their index should start at the beginning.\\n            supplierIndex.mantissa = compInitialIndex;\\n        }\\n\\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\\n        uint256 supplierTokens = CToken(cToken).balanceOf(supplier);\\n        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\\n        uint256 supplierAccrued = add_(compAccrued[supplier], supplierDelta);\\n        compAccrued[supplier] = supplierAccrued;\\n        emit DistributedSupplierComp(\\n            CToken(cToken),\\n            supplier,\\n            supplierDelta,\\n            supplyIndex.mantissa\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\\n     * @param cToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute COMP to\\n     */\\n    function distributeBorrowerComp(\\n        address cToken,\\n        address borrower,\\n        Exp memory marketBorrowIndex\\n    ) internal {\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\\n        Double memory borrowerIndex = Double({\\n            mantissa: compBorrowerIndex[cToken][borrower]\\n        });\\n        compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;\\n\\n        if (borrowerIndex.mantissa == 0 && borrowIndex.mantissa > 0) {\\n            // Set the borrower reward index to the initial reward index if it has never been set before.\\n            // If it has never been set before, the borrower has not taken any action since the reward stream was set up, meaning they have been borrowing the whole time, so their index should start at the beginning.\\n            // (Originally, Compound set this up so that borrowers would not begin to accrue COMP until after the first interaction with the protocol.)\\n            borrowerIndex.mantissa = compInitialIndex;\\n        }\\n\\n        Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\\n        uint256 borrowerAmount = div_(\\n            CToken(cToken).borrowBalanceStored(borrower),\\n            marketBorrowIndex\\n        );\\n        uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n        uint256 borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\\n        compAccrued[borrower] = borrowerAccrued;\\n        emit DistributedBorrowerComp(\\n            CToken(cToken),\\n            borrower,\\n            borrowerDelta,\\n            borrowIndex.mantissa\\n        );\\n    }\\n\\n    /**\\n     * @notice Keeps the flywheel moving pre-mint and pre-redeem\\n     * @dev Called by the Comptroller\\n     * @param cToken The relevant market\\n     * @param supplier The minter/redeemer\\n     */\\n    function flywheelPreSupplierAction(address cToken, address supplier)\\n        external\\n    {\\n        if (compSupplyState[cToken].index > 0) {\\n            updateCompSupplyIndex(cToken);\\n            distributeSupplierComp(cToken, supplier);\\n        }\\n    }\\n\\n    /**\\n     * @notice Keeps the flywheel moving pre-borrow and pre-repay\\n     * @dev Called by the Comptroller\\n     * @param cToken The relevant market\\n     * @param borrower The borrower\\n     */\\n    function flywheelPreBorrowerAction(address cToken, address borrower)\\n        external\\n    {\\n        if (compBorrowState[cToken].index > 0) {\\n            Exp memory borrowIndex = Exp({\\n                mantissa: CToken(cToken).borrowIndex()\\n            });\\n            updateCompBorrowIndex(cToken, borrowIndex);\\n            distributeBorrowerComp(cToken, borrower, borrowIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Keeps the flywheel moving pre-transfer and pre-seize\\n     * @dev Called by the Comptroller\\n     * @param cToken The relevant market\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     */\\n    function flywheelPreTransferAction(\\n        address cToken,\\n        address src,\\n        address dst\\n    ) external {\\n        if (compSupplyState[cToken].index > 0) {\\n            updateCompSupplyIndex(cToken);\\n            distributeSupplierComp(cToken, src);\\n            distributeSupplierComp(cToken, dst);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate additional accrued COMP for a contributor since last accrual\\n     * @param contributor The address to calculate contributor rewards for\\n     */\\n    function updateContributorRewards(address contributor) public {\\n        uint256 compSpeed = compContributorSpeeds[contributor];\\n        uint256 blockNumber = getBlockNumber();\\n        uint256 deltaBlocks = sub_(\\n            blockNumber,\\n            lastContributorBlock[contributor]\\n        );\\n        if (deltaBlocks > 0 && compSpeed > 0) {\\n            uint256 newAccrued = mul_(deltaBlocks, compSpeed);\\n            uint256 contributorAccrued = add_(\\n                compAccrued[contributor],\\n                newAccrued\\n            );\\n\\n            compAccrued[contributor] = contributorAccrued;\\n            lastContributorBlock[contributor] = blockNumber;\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim all the comp accrued by holder in all markets\\n     * @param holder The address to claim COMP for\\n     */\\n    function claimRewards(address holder) public {\\n        return claimRewards(holder, allMarkets);\\n    }\\n\\n    /**\\n     * @notice Claim all the comp accrued by holder in the specified markets\\n     * @param holder The address to claim COMP for\\n     * @param cTokens The list of markets to claim COMP in\\n     */\\n    function claimRewards(address holder, CToken[] memory cTokens) public {\\n        address[] memory holders = new address[](1);\\n        holders[0] = holder;\\n        claimRewards(holders, cTokens, true, true);\\n    }\\n\\n    /**\\n     * @notice Claim all comp accrued by the holders\\n     * @param holders The addresses to claim COMP for\\n     * @param cTokens The list of markets to claim COMP in\\n     * @param borrowers Whether or not to claim COMP earned by borrowing\\n     * @param suppliers Whether or not to claim COMP earned by supplying\\n     */\\n    function claimRewards(\\n        address[] memory holders,\\n        CToken[] memory cTokens,\\n        bool borrowers,\\n        bool suppliers\\n    ) public {\\n        for (uint256 i = 0; i < cTokens.length; i++) {\\n            CToken cToken = cTokens[i];\\n            if (\\n                borrowers == true && compBorrowState[address(cToken)].index > 0\\n            ) {\\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\n                updateCompBorrowIndex(address(cToken), borrowIndex);\\n                for (uint256 j = 0; j < holders.length; j++) {\\n                    distributeBorrowerComp(\\n                        address(cToken),\\n                        holders[j],\\n                        borrowIndex\\n                    );\\n                }\\n            }\\n            if (\\n                suppliers == true && compSupplyState[address(cToken)].index > 0\\n            ) {\\n                updateCompSupplyIndex(address(cToken));\\n                for (uint256 j = 0; j < holders.length; j++) {\\n                    distributeSupplierComp(address(cToken), holders[j]);\\n                }\\n            }\\n        }\\n        for (uint256 j = 0; j < holders.length; j++) {\\n            compAccrued[holders[j]] = grantCompInternal(\\n                holders[j],\\n                compAccrued[holders[j]]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer COMP to the user\\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\n     * @param user The address of the user to transfer COMP to\\n     * @param amount The amount of COMP to (possibly) transfer\\n     * @return The amount of COMP which was NOT transferred to the user\\n     */\\n    function grantCompInternal(address user, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        EIP20NonStandardInterface comp = EIP20NonStandardInterface(rewardToken);\\n        uint256 compRemaining = comp.balanceOf(address(this));\\n        if (amount > 0 && amount <= compRemaining) {\\n            comp.transfer(user, amount);\\n            return 0;\\n        }\\n        return amount;\\n    }\\n\\n    /*** Comp Distribution Admin ***/\\n\\n    /**\\n     * @notice Transfer COMP to the recipient\\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\n     * @param recipient The address of the recipient to transfer COMP to\\n     * @param amount The amount of COMP to (possibly) transfer\\n     */\\n    function _grantComp(address recipient, uint256 amount) public {\\n        require(msg.sender == admin, \\\"only admin can grant comp\\\");\\n        uint256 amountLeft = grantCompInternal(recipient, amount);\\n        require(amountLeft == 0, \\\"insufficient comp for grant\\\");\\n        emit CompGranted(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Set COMP speed for a single market\\n     * @param cToken The market whose COMP speed to update\\n     * @param compSpeed New COMP speed for market\\n     */\\n    function _setCompSupplySpeed(CToken cToken, uint256 compSpeed) public {\\n        require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\n        setCompSupplySpeedInternal(cToken, compSpeed);\\n    }\\n\\n    /**\\n     * @notice Set COMP speed for a single market\\n     * @param cToken The market whose COMP speed to update\\n     * @param compSpeed New COMP speed for market\\n     */\\n    function _setCompBorrowSpeed(CToken cToken, uint256 compSpeed) public {\\n        require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\n        setCompBorrowSpeedInternal(cToken, compSpeed);\\n    }\\n\\n    /**\\n     * @notice Set COMP borrow and supply speeds for the specified markets.\\n     * @param cTokens The markets whose COMP speed to update.\\n     * @param supplySpeeds New supply-side COMP speed for the corresponding market.\\n     * @param borrowSpeeds New borrow-side COMP speed for the corresponding market.\\n     */\\n    function _setCompSpeeds(\\n        CToken[] memory cTokens,\\n        uint256[] memory supplySpeeds,\\n        uint256[] memory borrowSpeeds\\n    ) public {\\n        require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\n\\n        uint256 numTokens = cTokens.length;\\n        require(\\n            numTokens == supplySpeeds.length &&\\n                numTokens == borrowSpeeds.length,\\n            \\\"RewardsDistributor::_setCompSpeeds invalid input\\\"\\n        );\\n\\n        for (uint256 i = 0; i < numTokens; ++i) {\\n            setCompSupplySpeedInternal(cTokens[i], supplySpeeds[i]);\\n            setCompBorrowSpeedInternal(cTokens[i], borrowSpeeds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set COMP speed for a single contributor\\n     * @param contributor The contributor whose COMP speed to update\\n     * @param compSpeed New COMP speed for contributor\\n     */\\n    function _setContributorCompSpeed(address contributor, uint256 compSpeed)\\n        public\\n    {\\n        require(msg.sender == admin, \\\"only admin can set comp speed\\\");\\n\\n        // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\\n        updateContributorRewards(contributor);\\n        if (compSpeed == 0) {\\n            // release storage\\n            delete lastContributorBlock[contributor];\\n        } else {\\n            lastContributorBlock[contributor] = getBlockNumber();\\n        }\\n        compContributorSpeeds[contributor] = compSpeed;\\n\\n        emit ContributorCompSpeedUpdated(contributor, compSpeed);\\n    }\\n\\n    /*** Helper Functions */\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     * @dev WARNING: On Citrus, it will return the timestamp instead.\\n     *  It should not matter as long as you keep using this function.\\n     */\\n    function getBlockNumber() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns an array of all markets.\\n     */\\n    function getAllMarkets() external view returns (CToken[] memory) {\\n        return allMarkets;\\n    }\\n}\\n\",\"keccak256\":\"0x3cf5c2c67f0b7563480746b5e6da8cbf82a864603cb8c94e362af9acce79c4ba\"},\"contracts/rari-fuse/src/core/RewardsDistributorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ncontract RewardsDistributorDelegatorStorage {\\n    /// @notice Administrator for this contract\\n    address public admin;\\n\\n    /// @notice Pending administrator for this contract\\n    address public pendingAdmin;\\n\\n    /// @notice Active brains of RewardsDistributor\\n    address public implementation;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[10] private __gap;\\n}\\n\\n/**\\n * @title Storage for RewardsDistributorDelegate\\n * @notice For future upgrades, do not change RewardsDistributorDelegateStorageV1. Create a new\\n * contract which implements RewardsDistributorDelegateStorageV1 and following the naming convention\\n * RewardsDistributorDelegateStorageVX.\\n */\\ncontract RewardsDistributorDelegateStorageV1 is\\n    RewardsDistributorDelegatorStorage\\n{\\n    /// @dev The token to reward (i.e., COMP)\\n    address public rewardToken;\\n\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint216 index;\\n        /// @notice The block number the index was last updated at\\n        /// @dev WARNING: On Citrus, this is a timestamp\\n        uint40 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /// @notice Rewards per block that each market currently receives\\n    mapping(address => uint256) public compSupplySpeeds;\\n\\n    /// @notice Rewards per block that each market currently receives\\n    mapping(address => uint256) public compBorrowSpeeds;\\n\\n    /// @notice The COMP market supply state for each market\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP market borrow state for each market\\n    mapping(address => CompMarketState) public compBorrowState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint256)) public compSupplierIndex;\\n\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint256)) public compBorrowerIndex;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    mapping(address => uint256) public compAccrued;\\n\\n    /// @notice The portion of COMP that each contributor receives per second\\n    mapping(address => uint256) public compContributorSpeeds;\\n\\n    /// @notice Last timestamp at which a contributor's COMP rewards have been allocated\\n    /// @dev WARNING: On Citrus, this is a timestamp\\n    mapping(address => uint256) public lastContributorBlock;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[10] private __gap;\\n}\\n\",\"keccak256\":\"0x2f6a2ed1f78724eabeb498dd784151f8678a0d73aebd1087af34446de66d4f20\"},\"contracts/rari-fuse/src/core/UnitrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.17;\\n\\n/**\\n * @title UnitrollerInterface\\n */\\ncontract UnitrollerInterface {\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address public admin;\\n\\n    /**\\n     * @notice Whether or not the Fuse admin has admin rights\\n     */\\n    bool public fuseAdminHasRights;\\n\\n    /**\\n     * @notice Whether or not the admin has admin rights\\n     */\\n    bool public adminHasRights;\\n\\n    /**\\n     * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\n     * @dev Admin function for new implementation to accept it's role as implementation\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptImplementation() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x755d3ef89d7a9f55740c3f78f0c1cbb8d0e82ba8074797e27ec138972df9072e\"}},\"version\":1}",
  "bytecode": "0x60806040526002805460ff60a81b1960ff60a01b19909116600160a01b1716600160a81b17905534801561003257600080fd5b50615e6c80620000436000396000f3fe608060405234801561001057600080fd5b50600436106104ab5760003560e01c80636d154ea51161026d578063bdcdc25811610151578063da3d454c116100ce578063e6653f3d11610092578063e6653f3d1461123e578063e875544614611246578063eabe7d911461124e578063ede4edd014611284578063f6c9aea7146112aa578063f851a440146112c9576104ab565b8063da3d454c146111a0578063dce15449146111d6578063dcfbc0c714611202578063dd5cd22c1461120a578063e4028eee14611212576104ab565b8063c90c20b111610115578063c90c20b11461110e578063d01f63f514611116578063d02f73511461111e578063d251fefc14611164578063d533316614611181576104ab565b8063bdcdc25814610f07578063c299823814610f43578063c488847b14610fe4578063c6c5b0dd14611033578063c8c9c97514611050576104ab565b8063929fe9a1116101ea578063abfceffc116101ae578063abfceffc14610e9b578063ac0b0bb714610ec1578063b0772d0b14610ec9578063b095721014610ed1578063b9b5b15314610ed9578063bb82aa5e14610eff576104ab565b8063929fe9a114610d8b57806394543c1514610db9578063952adf5a14610ddf5780639b19251a14610dfe578063aba35b9814610e24576104ab565b80637dc0d1d0116102315780637dc0d1d014610cf5578063819605a814610cfd57806387f7630314610d235780638e8f294b14610d2b5780638ebf636414610d6c576104ab565b80636d154ea514610c1a5780636d35bf9114610c40578063731f0c2b14610c865780637515bafa14610cac578063779b229414610cc9576104ab565b80633c94786f1161039457806352d84d1e116103115780635ec88c79116102d55780635ec88c7914610a865780635f5af1aa14610aac5780635fc7e71e14610ad2578063607ef6c114610b18578063632e514214610bd65780636a56947e14610bde576104ab565b806352d84d1e146109fd57806355ee1fe114610a1a578063570e136f14610a405780635c77860514610a485780635d72de6214610a7e576104ab565b80634e79238f116103585780634e79238f146108565780634ef4c3e1146108b05780634fd42e17146108e657806351a485e41461090357806351dff989146109c1576104ab565b80633c94786f1461079857806341c728b9146107a057806347ef3b3b146107dc5780634a584432146108285780634ada90af1461084e576104ab565b806324008a621161042d578063317b0b77116103f1578063317b0b77146106a157806331ff47fa146106be57806332abcdbe146106e45780633605b51b1461073c578063391957d7146107445780633bcf7ec11461076a576104ab565b806324008a621461062e57806324a3d6221461066a57806326782247146106725780632d70db781461067a5780632f1069ba14610699576104ab565b806318c882a51161047457806318c882a5146105565780631d504dc6146105845780631ededc91146105ac57806321af4569146105ee5780632259192a146105f6576104ab565b80627e3dd2146104b057806302c3bcbb146104cc5780630a755ec21461050457806315761d511461050c57806316dc15fe14610530575b600080fd5b6104b86112d1565b604080519115158252519081900360200190f35b6104f2600480360360208110156104e257600080fd5b50356001600160a01b03166112d6565b60408051918252519081900360200190f35b6104b86112e8565b6105146112f8565b604080516001600160a01b039092168252519081900360200190f35b6104b86004803603602081101561054657600080fd5b50356001600160a01b0316611307565b6104b86004803603604081101561056c57600080fd5b506001600160a01b038135169060200135151561131c565b6105aa6004803603602081101561059a57600080fd5b50356001600160a01b03166114af565b005b6105aa600480360360a08110156105c257600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060800135611755565b61051461175c565b6104f26004803603608081101561060c57600080fd5b506001600160a01b038135169060208101359060408101359060600135611770565b6104f26004803603608081101561064457600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013561177f565b6105146117ba565b6105146117c9565b6104b86004803603602081101561069057600080fd5b503515156117d8565b6104b8611905565b6104f2600480360360208110156106b757600080fd5b5035611915565b610514600480360360208110156106d457600080fd5b50356001600160a01b0316611a23565b6106ec611a3e565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610728578181015183820152602001610710565b505050509050019250505060405180910390f35b6106ec611aa1565b6105aa6004803603602081101561075a57600080fd5b50356001600160a01b0316611b01565b6104b86004803603604081101561078057600080fd5b506001600160a01b0381351690602001351515611bb1565b6104b8611d3d565b6105aa600480360360808110156107b657600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135611d4d565b6105aa600480360360c08110156107f257600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060808101359060a00135611d74565b6104f26004803603602081101561083e57600080fd5b50356001600160a01b0316611d79565b6104f2611d8b565b6108926004803603608081101561086c57600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135611d91565b60408051938452602084019290925282820152519081900360600190f35b6104f2600480360360608110156108c657600080fd5b506001600160a01b03813581169160208101359091169060400135611dcb565b6104f2600480360360208110156108fc57600080fd5b50356121ce565b6105aa6004803603604081101561091957600080fd5b810190602081018135600160201b81111561093357600080fd5b82018360208201111561094557600080fd5b803590602001918460208302840111600160201b8311171561096657600080fd5b919390929091602081019035600160201b81111561098357600080fd5b82018360208201111561099557600080fd5b803590602001918460208302840111600160201b831117156109b657600080fd5b5090925090506122bd565b6105aa600480360360808110156109d757600080fd5b506001600160a01b0381358116916020810135909116906040810135906060013561244c565b61051460048036036020811015610a1357600080fd5b50356124a6565b6104f260048036036020811015610a3057600080fd5b50356001600160a01b03166124cd565b6104b861254f565b6105aa60048036036060811015610a5e57600080fd5b506001600160a01b0381358116916020810135909116906040013561255e565b6105aa612563565b61089260048036036020811015610a9c57600080fd5b50356001600160a01b03166125d6565b6104f260048036036020811015610ac257600080fd5b50356001600160a01b031661260b565b6104f2600480360360a0811015610ae857600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135909116906080013561268a565b6105aa60048036036040811015610b2e57600080fd5b810190602081018135600160201b811115610b4857600080fd5b820183602082011115610b5a57600080fd5b803590602001918460208302840111600160201b83111715610b7b57600080fd5b919390929091602081019035600160201b811115610b9857600080fd5b820183602082011115610baa57600080fd5b803590602001918460208302840111600160201b83111715610bcb57600080fd5b509092509050612841565b6105aa6129c7565b6105aa60048036036080811015610bf457600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135612a24565b6104b860048036036020811015610c3057600080fd5b50356001600160a01b0316612a29565b6105aa600480360360a0811015610c5657600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135611755565b6104b860048036036020811015610c9c57600080fd5b50356001600160a01b0316612a3e565b61051460048036036020811015610cc257600080fd5b5035612a52565b6104f260048036036040811015610cdf57600080fd5b506001600160a01b038135169060200135612a5f565b610514612bf1565b6104f260048036036020811015610d1357600080fd5b50356001600160a01b0316612c00565b6104b8612f5a565b610d5160048036036020811015610d4157600080fd5b50356001600160a01b0316612f6a565b60408051921515835260208301919091528051918290030190f35b6104b860048036036020811015610d8257600080fd5b50351515612f89565b6104b860048036036040811015610da157600080fd5b506001600160a01b03813581169160200135166130b5565b6104b860048036036020811015610dcf57600080fd5b50356001600160a01b03166130e8565b6104f260048036036020811015610df557600080fd5b5035151561325a565b6104b860048036036020811015610e1457600080fd5b50356001600160a01b03166132d7565b6104f260048036036060811015610e3a57600080fd5b813515159190810190604081016020820135600160201b811115610e5d57600080fd5b820183602082011115610e6f57600080fd5b803590602001918460018302840111600160201b83111715610e9057600080fd5b9193509150356132ec565b6106ec60048036036020811015610eb157600080fd5b50356001600160a01b03166134bb565b6104b8613544565b6106ec613554565b6104b86135b4565b6104f260048036036020811015610eef57600080fd5b50356001600160a01b03166135bd565b61051461378e565b6104f260048036036080811015610f1d57600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013561379d565b6106ec60048036036020811015610f5957600080fd5b810190602081018135600160201b811115610f7357600080fd5b820183602082011115610f8557600080fd5b803590602001918460208302840111600160201b83111715610fa657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613827945050505050565b61101a60048036036060811015610ffa57600080fd5b506001600160a01b038135811691602081013590911690604001356138be565b6040805192835260208301919091528051918290030190f35b6105146004803603602081101561104957600080fd5b5035613adf565b6104f26004803603604081101561106657600080fd5b810190602081018135600160201b81111561108057600080fd5b82018360208201111561109257600080fd5b803590602001918460208302840111600160201b831117156110b357600080fd5b919390929091602081019035600160201b8111156110d057600080fd5b8201836020820111156110e257600080fd5b803590602001918460208302840111600160201b8311171561110357600080fd5b509092509050613aec565b6105aa613cff565b6106ec613db0565b6104f2600480360360a081101561113457600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135613e10565b6105146004803603602081101561117a57600080fd5b5035613fa6565b6104f26004803603602081101561119757600080fd5b50351515613fb3565b6104f2600480360360608110156111b657600080fd5b506001600160a01b03813581169160208101359091169060400135614030565b610514600480360360408110156111ec57600080fd5b506001600160a01b0381351690602001356143da565b61051461440f565b6104b861441e565b6104f26004803603604081101561122857600080fd5b506001600160a01b038135169060200135614427565b6104b86145ce565b6104f26145de565b6104f26004803603606081101561126457600080fd5b506001600160a01b038135811691602081013590911690604001356145e4565b6104f26004803603602081101561129a57600080fd5b50356001600160a01b0316614601565b6105aa600480360360208110156112c057600080fd5b503515156149ec565b610514614a4a565b600181565b60246020526000908152604090205481565b600254600160a81b900460ff1681565b6000546001600160a01b031681565b60196020526000908152604090205460ff1681565b6001600160a01b03821660009081526014602052604081205460ff166113735760405162461bcd60e51b8152600401808060200182810382526028815260200180615c076028913960400191505060405180910390fd5b601f546001600160a01b031633148061138f575061138f614a59565b6113ca5760405162461bcd60e51b8152600401808060200182810382526027815260200180615c926027913960400191505060405180910390fd5b6113d2614a59565b806113df57506001821515145b611429576040805162461bcd60e51b81526020600482015260166024820152756f6e6c792061646d696e2063616e20756e706175736560501b604482015290519081900360640190fd5b6001600160a01b038316600081815260216020908152604091829020805486151560ff199091168117909155825193845283830152606090830181905260069083015265426f72726f7760d01b6080830152517f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09181900360a00190a150805b92915050565b6000546001600160a01b03163314801561152a5750806001600160a01b0316632f1069ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114fd57600080fd5b505afa158015611511573d6000803e3d6000fd5b505050506040513d602081101561152757600080fd5b50515b8061160d5750806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561156957600080fd5b505afa15801561157d573d6000803e3d6000fd5b505050506040513d602081101561159357600080fd5b50516001600160a01b03163314801561160d5750806001600160a01b0316630a755ec26040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e057600080fd5b505afa1580156115f4573d6000803e3d6000fd5b505050506040513d602081101561160a57600080fd5b50515b6116485760405162461bcd60e51b8152600401808060200182810382526027815260200180615e116027913960400191505060405180910390fd5b6000816001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561168557600080fd5b505af1158015611699573d6000803e3d6000fd5b505050506040513d60208110156116af57600080fd5b5051905080156116fe576040805162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b604482015290519081900360640190fd5b816001600160a01b0316635d72de626040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561173957600080fd5b505af115801561174d573d6000803e3d6000fd5b505050505050565b5050505050565b60225461010090046001600160a01b031681565b6000805b90505b949350505050565b6001600160a01b03841660009081526014602052604081205460ff166117a95760095b9050611777565b6117b38584614aad565b6000611774565b601f546001600160a01b031681565b6002546001600160a01b031681565b601f546000906001600160a01b03163314806117f757506117f7614a59565b6118325760405162461bcd60e51b8152600401808060200182810382526027815260200180615c926027913960400191505060405180910390fd5b61183a614a59565b8061184757506001821515145b611891576040805162461bcd60e51b81526020600482015260166024820152756f6e6c792061646d696e2063616e20756e706175736560501b604482015290519081900360640190fd5b601f8054831515600160b81b810260ff60b81b1990921691909117909155604080516020810192909252808252600582820152645365697a6560d81b6060830152517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de09181900360800190a150805b919050565b600254600160a01b900460ff1681565b600061191f614a59565b6119365761192f60016007614b45565b9050611900565b61193e615b1e565b506040805160208101909152828152611955615b1e565b50604080516020810190915266b1a2bc2ec5000081526119758282614bab565b1561198f5761198660056008614b45565b92505050611900565b611997615b1e565b506040805160208101909152670c7d713b49da000081526119b88184614bb3565b156119d3576119c960056008614b45565b9350505050611900565b6010805490869055604080518281526020810188905281517f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd9929181900390910190a160005b9695505050505050565b601a602052600090815260409020546001600160a01b031681565b60606017805480602002602001604051908101604052809291908181526020018280548015611a9657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a78575b505050505090505b90565b60606025805480602002602001604051908101604052809291908181526020018280548015611a96576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611a78575050505050905090565b611b09614a59565b611b445760405162461bcd60e51b8152600401808060200182810382526026815260200180615cb96026913960400191505060405180910390fd5b602280546001600160a01b03838116610100818102610100600160a81b03198516179094556040805194909304919091168084526020840191909152815190927feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e2992908290030190a15050565b6001600160a01b03821660009081526014602052604081205460ff16611c085760405162461bcd60e51b8152600401808060200182810382526028815260200180615c076028913960400191505060405180910390fd5b601f546001600160a01b0316331480611c245750611c24614a59565b611c5f5760405162461bcd60e51b8152600401808060200182810382526027815260200180615c926027913960400191505060405180910390fd5b611c67614a59565b80611c7457506001821515145b611cbe576040805162461bcd60e51b81526020600482015260166024820152756f6e6c792061646d696e2063616e20756e706175736560501b604482015290519081900360640190fd5b6001600160a01b03831660008181526020808052604091829020805486151560ff199091168117909155825193845283830152606090830181905260049083015263135a5b9d60e21b6080830152517f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09181900360a00190a150919050565b601f54600160a01b900460ff1681565b50506001600160a01b03166000908152601960205260409020805460ff1916600117905550565b61174d565b60236020526000908152604090205481565b60115481565b600080600080600080611da68a8a8a8a614bba565b925092509250826015811115611db857fe5b95509093509150505b9450945094915050565b6001600160a01b038316600090815260208052604081205460ff1615611e29576040805162461bcd60e51b815260206004820152600e60248201526d1b5a5b9d081a5cc81c185d5cd95960921b604482015290519081900360640190fd5b6001600160a01b03841660009081526014602052604090205460ff16611e535760095b90506121c7565b601b5460ff168015611e7e57506001600160a01b0383166000908152601c602052604090205460ff16155b15611e8a576012611e4c565b6001600160a01b03841660009081526024602052604090205480156121b6576000856001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee457600080fd5b505afa158015611ef8573d6000803e3d6000fd5b505050506040513d6020811015611f0e57600080fd5b5051604080516308f7a6e360e31b815290519192506000916001600160a01b038916916347bd3718916004808301926020929190829003018186803b158015611f5657600080fd5b505afa158015611f6a573d6000803e3d6000fd5b505050506040513d6020811015611f8057600080fd5b505160408051638f840ddd60e01b815290519192506000916001600160a01b038a1691638f840ddd916004808301926020929190829003018186803b158015611fc857600080fd5b505afa158015611fdc573d6000803e3d6000fd5b505050506040513d6020811015611ff257600080fd5b50516040805163dc028ab160e01b815290519192506000916001600160a01b038b169163dc028ab1916004808301926020929190829003018186803b15801561203a57600080fd5b505afa15801561204e573d6000803e3d6000fd5b505050506040513d602081101561206457600080fd5b5051604080516361feacff60e01b815290519192506000916001600160a01b038c16916361feacff916004808301926020929190829003018186803b1580156120ac57600080fd5b505afa1580156120c0573d6000803e3d6000fd5b505050506040513d60208110156120d657600080fd5b505190506000806120fa87876120f56120ef8989614ef3565b87614ef3565b614f29565b9092509050600082600381111561210d57fe5b1461212357600b985050505050505050506121c7565b600061212f828c614f75565b9093509050600083600381111561214257fe5b1461215957600b99505050505050505050506121c7565b8881106121ad576040805162461bcd60e51b815260206004820152601960248201527f6d61726b657420737570706c7920636170207265616368656400000000000000604482015290519081900360640190fd5b50505050505050505b6121c08585614f9e565b60005b9150505b9392505050565b60006121d8614a59565b6121e85761192f6001600d614b45565b6121f0615b1e565b506040805160208101909152828152612207615b1e565b506040805160208101909152670de0b6b3a764000081526122288282614bb3565b15612239576119866007600e614b45565b612241615b1e565b5060408051602081019091526714d1120d7b16000081526122628184614bb3565b15612273576119c96007600e614b45565b6011805490869055604080518281526020810188905281517faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec1316929181900390910190a16000611a19565b6122c5614a59565b806122df575060225461010090046001600160a01b031633145b61231a5760405162461bcd60e51b8152600401808060200182810382526035815260200180615da76035913960400191505060405180910390fd5b8281811580159061232a57508082145b61236b576040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015290519081900360640190fd5b60005b828110156124435784848281811061238257fe5b905060200201356024600089898581811061239957fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020819055508686828181106123d957fe5b905060200201356001600160a01b03166001600160a01b03167f9e0ad9cee10bdf36b7fbd38910c0bdff0f275ace679b45b922381c2723d676f886868481811061241f57fe5b905060200201356040518082815260200191505060405180910390a260010161236e565b50505050505050565b8015801561245a5750600082115b156124a0576040805162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b604482015290519081900360640190fd5b50505050565b601581815481106124b357fe5b6000918252602090912001546001600160a01b0316905081565b60006124d7614a59565b6124e75761192f60016013614b45565b600f80546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e22929181900390910190a160009392505050565b60265462010000900460ff1681565b505050565b6003546001600160a01b031633146125ac5760405162461bcd60e51b8152600401808060200182810382526032815260200180615cdf6032913960400191505060405180910390fd5b602654610100900460ff166125d4576026805461ff001960ff19909116600117166101001790555b565b6000806000806000806125ed876000806000614bba565b9250925092508260158111156125ff57fe5b97919650945092505050565b6000612615614a59565b6126255761192f60016018614b45565b601f80546001600160a01b038481166001600160a01b0319831617928390556040805192821680845293909116602083015280517f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e9281900390910190a160006121c7565b6001600160a01b03851660009081526014602052604081205460ff1615806126cb57506001600160a01b03851660009081526014602052604090205460ff16155b156126da5760095b9050612838565b6000866001600160a01b03166395dd9193856040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561273257600080fd5b505afa158015612746573d6000803e3d6000fd5b505050506040513d602081101561275c57600080fd5b50519050612769876130e8565b156127b257828110156127ad5760405162461bcd60e51b8152600401808060200182810382526028815260200180615c2f6028913960400191505060405180910390fd5b612832565b6000806127be86615035565b919350909150600090508260158111156127d457fe5b146127ef578160158111156127e557fe5b9350505050612838565b806127fb5760036127e5565b6000612817604051806020016040528060105481525085615055565b90508086111561282e576011945050505050612838565b5050505b60009150505b95945050505050565b612849614a59565b80612863575060225461010090046001600160a01b031633145b61289e5760405162461bcd60e51b8152600401808060200182810382526035815260200180615d4d6035913960400191505060405180910390fd5b828181158015906128ae57508082145b6128ef576040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015290519081900360640190fd5b60005b828110156124435784848281811061290657fe5b905060200201356023600089898581811061291d57fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000208190555086868281811061295d57fe5b905060200201356001600160a01b03166001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f68686848181106129a357fe5b905060200201356040518082815260200191505060405180910390a26001016128f2565b3360009081526014602052604090205460ff16612a155760405162461bcd60e51b815260040180806020018281038252603b815260200180615c57603b913960400191505060405180910390fd5b6026805460ff19166001179055565b6124a0565b60216020526000908152604090205460ff1681565b602080526000908152604090205460ff1681565b601781815481106124b357fe5b602654600090819062010000900460ff16612af2576000809054906101000a90046001600160a01b03166001600160a01b031663fdb25fb16040518163ffffffff1660e01b815260040160206040518083038186803b158015612ac157600080fd5b505afa158015612ad5573d6000803e3d6000fd5b505050506040513d6020811015612aeb57600080fd5b5051612afc565b670de0b6b3a76400005b90508015612be757600f546040805163fc57d4df60e01b81526001600160a01b0387811660048301529151600093929092169163fc57d4df91602480820192602092909190829003018186803b158015612b5557600080fd5b505afa158015612b69573d6000803e3d6000fd5b505050506040513d6020811015612b7f57600080fd5b5051905080612b9357600d925050506114a9565b600080612bae60405180602001604052808581525087615074565b90925090506000826003811115612bc157fe5b14612bd457600b5b9450505050506114a9565b83811015612be3576013612bc9565b5050505b6000949350505050565b600f546001600160a01b031681565b6000612c0a614a59565b612c1a5761192f60016019614b45565b6001600160a01b03821660009081526014602052604090205460ff16612c465761192f6009601a614b45565b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c8157600080fd5b505afa158015612c95573d6000803e3d6000fd5b505050506040513d6020811015612cab57600080fd5b50511115612cbf5761192f6015601b614b45565b6001600160a01b0382166000908152601460209081526040808320805460ff19168155600101929092556015805483518184028101840190945280845260609392830182828015612d3957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612d1b575b5050835193945083925060009150505b82811015612d8e57856001600160a01b0316848281518110612d6757fe5b60200260200101516001600160a01b03161415612d8657809150612d8e565b600101612d49565b50818110612d9857fe5b601580546000198101908110612daa57fe5b600091825260209091200154601580546001600160a01b039092169183908110612dd057fe5b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790556015805490612e0c906000198301615b31565b506000601a6000876001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e4c57600080fd5b505afa158015612e60573d6000803e3d6000fd5b505050506040513d6020811015612e7657600080fd5b5051612ee657876001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015612eb557600080fd5b505afa158015612ec9573d6000803e3d6000fd5b505050506040513d6020811015612edf57600080fd5b5051612ee9565b60005b6001600160a01b039081168252602080830193909352604091820160002080546001600160a01b0319169482169490941790935580519288168352517f302feb03efd5741df80efe7f97f5d93d74d46a542a3d312d0faae64fa1f3e0e99281900390910190a1600095945050505050565b601f54600160b01b900460ff1681565b6014602052600090815260409020805460019091015460ff9091169082565b601f546000906001600160a01b0316331480612fa85750612fa8614a59565b612fe35760405162461bcd60e51b8152600401808060200182810382526027815260200180615c926027913960400191505060405180910390fd5b612feb614a59565b80612ff857506001821515145b613042576040805162461bcd60e51b81526020600482015260166024820152756f6e6c792061646d696e2063616e20756e706175736560501b604482015290519081900360640190fd5b601f8054831515600160b01b810260ff60b01b1990921691909117909155604080516020810192909252808252600882820152672a3930b739b332b960c11b6060830152517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de09181900360800190a15090565b6001600160a01b038082166000908152601460209081526040808320938616835260029093019052205460ff1692915050565b6001600160a01b03811660009081526014602052604081206001015415801561312e57506001600160a01b03821660009081526021602052604090205460ff1615156001145b80156114a9575061324a613211836001600160a01b031663173b99046040518163ffffffff1660e01b815260040160206040518083038186803b15801561317457600080fd5b505afa158015613188573d6000803e3d6000fd5b505050506040513d602081101561319e57600080fd5b505160408051638d02d9a160e01b815290516001600160a01b03871691638d02d9a1916004808301926020929190829003018186803b1580156131e057600080fd5b505afa1580156131f4573d6000803e3d6000fd5b505050506040513d602081101561320a57600080fd5b5051614ef3565b836001600160a01b031663dbfe7c196040518163ffffffff1660e01b815260040160206040518083038186803b1580156131e057600080fd5b670de0b6b3a76400001492915050565b6000613264614a59565b6132745761192f60016014614b45565b601b5460ff161515821515141561328c57600061192f565b601b805483151560ff19909116811790915560408051918252517f84c7d948374a180eddab35d27d2f7a94167a1ff4e79467f1e89c061984190a1e9181900360200190a160006114a9565b601c6020526000908152604090205460ff1681565b60006132f6614a59565b613306576117a260016017614b45565b60028054600160a01b60ff60a01b19821681179092550460ff166000866133cf57600054604051638754e4fd60e01b8152602060048201908152602482018890526001600160a01b0390921691638754e4fd91899189918190604401848480828437600081840152601f19601f8201169050808301925050509350505050602060405180830381600087803b15801561339e57600080fd5b505af11580156133b2573d6000803e3d6000fd5b505050506040513d60208110156133c857600080fd5b5051613473565b600054604051639b86a9b560e01b8152602060048201908152602482018890526001600160a01b0390921691639b86a9b591899189918190604401848480828437600081840152601f19601f8201169050808301925050509350505050602060405180830381600087803b15801561344657600080fd5b505af115801561345a573d6000803e3d6000fd5b505050506040513d602081101561347057600080fd5b50515b6002805460ff60a01b1916600160a01b8515150217905590506000613497826150c7565b905080156134a557806134af565b6134af8286614427565b98975050505050505050565b60608060136000846001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561353757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613519575b5093979650505050505050565b601f54600160b81b900460ff1681565b60606015805480602002602001604051908101604052809291908181526020018280548015611a96576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611a78575050505050905090565b601b5460ff1681565b60006135c7614a59565b6135d75761192f60016002614b45565b816001600160a01b031663abc6d72d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561361057600080fd5b505afa158015613624573d6000803e3d6000fd5b505050506040513d602081101561363a57600080fd5b505161368d576040805162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c736500000000604482015290519081900360640190fd5b60005b60255481101561370557602581815481106136a757fe5b6000918252602090912001546001600160a01b03848116911614156136fd5760405162461bcd60e51b8152600401808060200182810382526029815260200180615bde6029913960400191505060405180910390fd5b600101613690565b50602580546001810182556000919091527f401968ff42a154441da5f6c4c935ac46b8671f0e062baaa62a7545ba53bb6e4c0180546001600160a01b0384166001600160a01b0319909116811790915560408051918252517f98ef1187fb6fd2bc85f8996489877eb2b5428f9e9bdfc068c9ad6c2ea82eacc79181900360200190a160006114a9565b6003546001600160a01b031681565b601f54600090600160b01b900460ff16156137f4576040805162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c881a5cc81c185d5cd95960721b604482015290519081900360640190fd5b600061380186868561545a565b90508015613810579050611777565b61381b868686615506565b60009695505050505050565b606060008251905060608160405190808252806020026020018201604052801561385b578160200160208202803883390190505b50905060005b828110156138b657600085828151811061387757fe5b6020026020010151905061388b81336155a6565b601581111561389657fe5b8383815181106138a257fe5b602090810291909101015250600101613861565b509392505050565b600f546040805163fc57d4df60e01b81526001600160a01b03868116600483015291516000938493849391169163fc57d4df91602480820192602092909190829003018186803b15801561391157600080fd5b505afa158015613925573d6000803e3d6000fd5b505050506040513d602081101561393b57600080fd5b5051600f546040805163fc57d4df60e01b81526001600160a01b0389811660048301529151939450600093919092169163fc57d4df916024808301926020929190829003018186803b15801561399057600080fd5b505afa1580156139a4573d6000803e3d6000fd5b505050506040513d60208110156139ba57600080fd5b505190508115806139c9575080155b156139de57600d935060009250613ad7915050565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015613a1957600080fd5b505afa158015613a2d573d6000803e3d6000fd5b505050506040513d6020811015613a4357600080fd5b505190506000613a51615b1e565b613a59615b1e565b613a61615b1e565b613a89604051806020016040528060115481525060405180602001604052808a815250615733565b9250613ab1604051806020016040528088815250604051806020016040528088815250615733565b9150613abd8383615772565b9050613ac9818b615055565b600099509750505050505050505b935093915050565b602581815481106124b357fe5b6000613af6614a59565b613b06576117a260016015614b45565b60005b84811015613cf7576000868683818110613b1f57fe5b905060200201356001600160a01b03169050848483818110613b3d57fe5b9050602002013515613be9576001600160a01b0381166000908152601c602052604090205460ff16613be4576001600160a01b0381166000818152601c60209081526040808320805460ff19166001908117909155601d805491820181557f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f90910180546001600160a01b0319168617905554938352601e90915290206000199190910190555b613cee565b6001600160a01b0381166000908152601c602052604090205460ff1615613cee576001600160a01b0381166000908152601e6020526040902054601d5460001901811015613cab57601d8054600091906000198101908110613c4757fe5b600091825260209091200154601d80546001600160a01b039092169250829184908110613c7057fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152601e909152604090208190555b601d805490613cbe906000198301615b31565b50506001600160a01b0381166000908152601e60209081526040808320839055601c9091529020805460ff191690555b50600101613b09565b506000611774565b3360009081526014602052604090205460ff16613d4d5760405162461bcd60e51b815260040180806020018281038252603c815260200180615d11603c913960400191505060405180910390fd5b60265460ff16613da4576040805162461bcd60e51b815260206004820152601860248201527f72652d656e7465726564206163726f7373206173736574730000000000000000604482015290519081900360640190fd5b6026805460ff19169055565b6060601d805480602002602001604051908101604052809291908181526020018280548015611a96576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611a78575050505050905090565b601f54600090600160b81b900460ff1615613e64576040805162461bcd60e51b815260206004820152600f60248201526e1cd95a5e99481a5cc81c185d5cd959608a1b604482015290519081900360640190fd5b6001600160a01b03861660009081526014602052604090205460ff161580613ea557506001600160a01b03851660009081526014602052604090205460ff16155b15613eb15760096126d3565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613eea57600080fd5b505afa158015613efe573d6000803e3d6000fd5b505050506040513d6020811015613f1457600080fd5b505160408051635fe3b56760e01b815290516001600160a01b0392831692891691635fe3b567916004808301926020929190829003018186803b158015613f5a57600080fd5b505afa158015613f6e573d6000803e3d6000fd5b505050506040513d6020811015613f8457600080fd5b50516001600160a01b031614613f9b5760026126d3565b61381b868486615506565b601d81815481106124b357fe5b6000613fbd614a59565b613fcd5761192f60016006614b45565b60225460ff1615158215151415613fe557600061192f565b6022805483151560ff19909116811790915560408051918252517faa40ee94af55250363b91641a0a615c47690148901505f89b01dafae03fff2819181900360200190a160006114a9565b6001600160a01b03831660009081526021602052604081205460ff1615614091576040805162461bcd60e51b815260206004820152601060248201526f189bdc9c9bddc81a5cc81c185d5cd95960821b604482015290519081900360640190fd5b6001600160a01b03841660009081526014602052604090205460ff166140b8576009611e4c565b6001600160a01b038085166000908152601460209081526040808320938716835260029093019052205460ff166141a857336001600160a01b0385161461413e576040805162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba1031329031aa37b5b2b760591b604482015290519081900360640190fd5b600061414a33856155a6565b9050600081601581111561415a57fe5b146141735780601581111561416b57fe5b9150506121c7565b6001600160a01b038086166000908152601460209081526040808320938816835260029093019052205460ff166141a657fe5b505b600f546040805163fc57d4df60e01b81526001600160a01b0387811660048301529151919092169163fc57d4df916024808301926020929190829003018186803b1580156141f557600080fd5b505afa158015614209573d6000803e3d6000fd5b505050506040513d602081101561421f57600080fd5b505161422c57600d611e4c565b601b5460ff16801561425757506001600160a01b0383166000908152601c602052604090205460ff16155b15614263576012611e4c565b6001600160a01b0384166000908152602360205260409020548015614375576000856001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b1580156142bd57600080fd5b505afa1580156142d1573d6000803e3d6000fd5b505050506040513d60208110156142e757600080fd5b505190506000806142f88387614f75565b9092509050600082600381111561430b57fe5b1461431d57600b9450505050506121c7565b838110614371576040805162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f7720636170207265616368656400000000000000604482015290519081900360640190fd5b5050505b61437f8585614aad565b60008061438f8688600088614bba565b919350909150600090508260158111156143a557fe5b146143c0578160158111156143b657fe5b93505050506121c7565b80156143cd5760046143b6565b6000979650505050505050565b601360205281600052604060002081815481106143f357fe5b6000918252602090912001546001600160a01b03169150829050565b6004546001600160a01b031681565b60225460ff1681565b6000614431614a59565b6144485761444160016009614b45565b90506114a9565b6001600160a01b0383166000908152601460205260409020805460ff1661447d576144756009600a614b45565b9150506114a9565b614485615b1e565b50604080516020810190915283815261449c615b1e565b506040805160208101909152670c7d713b49da000081526144bd8183614bb3565b156144d8576144ce6006600b614b45565b93505050506114a9565b841580159061455d5750600f546040805163fc57d4df60e01b81526001600160a01b0389811660048301529151919092169163fc57d4df916024808301926020929190829003018186803b15801561452f57600080fd5b505afa158015614543573d6000803e3d6000fd5b505050506040513d602081101561455957600080fd5b5051155b1561456e576144ce600d600c614b45565b60018301805490869055604080516001600160a01b03891681526020810183905280820188905290517f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59181900360600190a16000979650505050505050565b601f54600160a81b900460ff1681565b60105481565b6000806145f285858561545a565b905080156121b65790506121c7565b6000808290506000806000836001600160a01b031663c37f68e2336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b15801561466257600080fd5b505afa158015614676573d6000803e3d6000fd5b505050506040513d608081101561468c57600080fd5b5080516020820151604090920151909450909250905082156146df5760405162461bcd60e51b8152600401808060200182810382526025815260200180615d826025913960400191505060405180910390fd5b80156146fc576146f1600c6003614b45565b945050505050611900565b600061470987338561545a565b9050801561472a5761471e600e6004836157ae565b95505050505050611900565b6001600160a01b0385166000908152601460209081526040808320338452600281019092529091205460ff166147695760009650505050505050611900565b3360009081526002820160209081526040808320805460ff1916905560138252918290208054835181840281018401909452808452606093928301828280156147db57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116147bd575b5050835193945083925060009150505b8281101561483057896001600160a01b031684828151811061480957fe5b60200260200101516001600160a01b0316141561482857809150614830565b6001016147eb565b5081811061483a57fe5b33600090815260136020526040902080548190600019810190811061485b57fe5b9060005260206000200160009054906101000a90046001600160a01b031681838154811061488557fe5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580546148be826000198301615b31565b50805461499757336000908152601860205260409020546017546000190181101561495d57601780546000919060001981019081106148f957fe5b600091825260209091200154601780546001600160a01b03909216925082918490811061492257fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559290911681526018909152604090208190555b6017805490614970906000198301615b31565b505033600090815260186020908152604080832083905560169091529020805460ff191690555b604080516001600160a01b038c16815233602082015281517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d929181900390910190a160009c9b505050505050505050505050565b6149f4614a59565b614a2e576040805162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b604482015290519081900360640190fd5b60268054911515620100000262ff000019909216919091179055565b6001546001600160a01b031681565b6001546000906001600160a01b031633148015614a7f5750600254600160a81b900460ff165b80614aa857506000546001600160a01b031633148015614aa85750600254600160a01b900460ff165b905090565b60005b60255481101561255e5760258181548110614ac757fe5b600091825260208220015460408051631cdc2c5d60e31b81526001600160a01b03878116600483015286811660248301529151919092169263e6e162e8926044808201939182900301818387803b158015614b2157600080fd5b505af1158015614b35573d6000803e3d6000fd5b505060019092019150614ab09050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836015811115614b7457fe5b83601b811115614b8057fe5b604080519283526020830191909152600082820152519081900360600190a18260158111156121c757fe5b519051111590565b5190511090565b6000806000614bc7615b55565b6001600160a01b03881660009081526013602090815260408083208054825181850281018501909352808352606093830182828015614c2f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614c11575b50939450600093505050505b8151811015614eb4576000828281518110614c5257fe5b60200260200101519050806001600160a01b031663c37f68e28d6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b158015614cb257600080fd5b505afa158015614cc6573d6000803e3d6000fd5b505050506040513d6080811015614cdc57600080fd5b508051602082015160408084015160609485015160808b0152938901939093529187019190915293508315614d215750600f965060009550859450611dc19350505050565b60408051602080820183526001600160a01b0380851660008181526014845285902060010154845260c08a01939093528351808301855260808a0151815260e08a0152600f54845163fc57d4df60e01b81526004810194909452935193169263fc57d4df926024808201939291829003018186803b158015614da257600080fd5b505afa158015614db6573d6000803e3d6000fd5b505050506040513d6020811015614dcc57600080fd5b505160a08601819052614def5750600d965060009550859450611dc19350505050565b604080516020810190915260a0860151815261010086015260c085015160e0860151614e2991614e1e91615733565b866101000151615733565b610120860181905260408601518651614e43929190615814565b855261010085015160608601516020870151614e60929190615814565b60208601526001600160a01b03818116908c161415614eab57614e8d8561012001518b8760200151615814565b60208601819052610100860151614ea5918b90615814565b60208601525b50600101614c3b565b50602083015183511115614eda5750506020810151905160009450039150829050611dc1565b5050805160209091015160009450849350039050611dc1565b60006121c78383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b81525061583c565b600080600080614f398787614f75565b90925090506000826003811115614f4c57fe5b14614f5d5750915060009050613ad7565b614f6781866158d7565b935093505050935093915050565b600080838301848110614f8d57600092509050614f97565b5060029150600090505b9250929050565b60005b60255481101561255e5760258181548110614fb857fe5b60009182526020822001546040805162e48b0f60e51b81526001600160a01b038781166004830152868116602483015291519190921692631c9161e0926044808201939182900301818387803b15801561501157600080fd5b505af1158015615025573d6000803e3d6000fd5b505060019092019150614fa19050565b6000806000615048846000806000614bba565b9250925092509193909250565b600061505f615b1e565b61506984846158fa565b90506117778161591b565b6000806000615081615b1e565b61508b868661592a565b9092509050600082600381111561509e57fe5b146150af5750915060009050614f97565b60006150ba8261591b565b9350935050509250929050565b60006150d1614a59565b6150e15761192f60016017614b45565b6001600160a01b03821660009081526014602052604090205460ff161561510e5761192f600a6016614b45565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561514757600080fd5b505afa15801561515b573d6000803e3d6000fd5b505050506040513d602081101561517157600080fd5b50516151c4576040805162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c736500000000604482015290519081900360640190fd5b306001600160a01b0316826001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561520757600080fd5b505afa15801561521b573d6000803e3d6000fd5b505050506040513d602081101561523157600080fd5b50516001600160a01b0316146152785760405162461bcd60e51b8152600401808060200182810382526035815260200180615ddc6035913960400191505060405180910390fd5b6000826001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156152b357600080fd5b505afa1580156152c7573d6000803e3d6000fd5b505050506040513d60208110156152dd57600080fd5b505161534d57826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561531c57600080fd5b505afa158015615330573d6000803e3d6000fd5b505050506040513d602081101561534657600080fd5b5051615350565b60005b6001600160a01b038082166000908152601a602052604090205491925016156153875761537f600a6016614b45565b915050611900565b6040805180820182526001808252600060208084018281526001600160a01b03898116808552601484528785209651875460ff19169015151787559151958501959095556015805494850190557f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47590930180546001600160a01b031990811685179091559386168252601a81529084902080549093168217909255825190815291517fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f9281900390910190a160006121c7565b6001600160a01b03831660009081526014602052604081205460ff16615481576009611e4c565b6001600160a01b038085166000908152601460209081526040808320938716835260029093019052205460ff166154b9576000611e4c565b6000806154c98587866000614bba565b919350909150600090508260158111156154df57fe5b146154f9578160158111156154f057fe5b925050506121c7565b801561381b5760046154f0565b60005b6025548110156124a0576025818154811061552057fe5b600091825260208220015460408051634e081c9560e01b81526001600160a01b0388811660048301528781166024830152868116604483015291519190921692634e081c95926064808201939182900301818387803b15801561558257600080fd5b505af1158015615596573d6000803e3d6000fd5b5050600190920191506155099050565b6001600160a01b0382166000908152601460205260408120805460ff166155d15760099150506114a9565b6001600160a01b038316600090815260028201602052604090205460ff161515600114156156035760009150506114a9565b6001600160a01b03838116600081815260028401602090815260408083208054600160ff199091168117909155601383528184208054918201815584528284200180546001600160a01b031916958a16959095179094559181526016909152205460ff166156e45760178054600180820183557fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1590910180546001600160a01b0319166001600160a01b0387169081179091556000908152601660209081526040808320805460ff1916909417909355925460189093522060001990910190555b604080516001600160a01b0380871682528516602082015281517f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5929181900390910190a15060009392505050565b61573b615b1e565b6040518060200160405280670de0b6b3a764000061576186600001518660000151615992565b8161576857fe5b0490529392505050565b61577a615b1e565b60405180602001604052806157a561579e8660000151670de0b6b3a7640000615992565b85516159d4565b90529392505050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08460158111156157dd57fe5b84601b8111156157e957fe5b604080519283526020830191909152818101859052519081900360600190a183601581111561177757fe5b600061581e615b1e565b61582885856158fa565b90506121c36158368261591b565b84614ef3565b600083830182858210156158ce5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561589357818101518382015260200161587b565b50505050905090810190601f1680156158c05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50949350505050565b6000808383116158ee575060009050818303614f97565b50600390506000614f97565b615902615b1e565b60405180602001604052806157a5856000015185615992565b51670de0b6b3a7640000900490565b6000615934615b1e565b600080615945866000015186615a07565b9092509050600082600381111561595857fe5b1461597757506040805160208101909152600081529092509050614f97565b60408051602081019091529081526000969095509350505050565b60006121c783836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250615a46565b60006121c783836040518060400160405280600e81526020016d646976696465206279207a65726f60901b815250615abc565b60008083615a1a57506000905080614f97565b83830283858281615a2757fe5b0414615a3b57506002915060009050614f97565b600092509050614f97565b6000831580615a53575082155b15615a60575060006121c7565b83830283858281615a6d57fe5b041483906158ce5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561589357818101518382015260200161587b565b60008183615b0b5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561589357818101518382015260200161587b565b50828481615b1557fe5b04949350505050565b6040518060200160405280600081525090565b81548183558181111561255e5760008381526020902061255e918101908301615bbf565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001615b93615b1e565b8152602001615ba0615b1e565b8152602001615bad615b1e565b8152602001615bba615b1e565b905290565b611a9e91905b80821115615bd95760008155600101615bc5565b509056fe526577617264734469737472696275746f7220636f6e747261637420616c726561647920616464656463616e6e6f742070617573652061206d61726b65742074686174206973206e6f74206c697374656443616e206e6f74207265706179206d6f7265207468616e2074686520746f74616c20626f72726f77436f6d7074726f6c6c65723a5f61667465724e6f6e5265656e7472616e743a2063616c6c6572206e6f74206c6973746564206173206d61726b65746f6e6c7920706175736520677561726469616e20616e642061646d696e2063616e2070617573656f6e6c792061646d696e2063616e2073657420626f72726f772063617020677561726469616e6f6e6c7920696d706c656d656e746174696f6e206d61792063616c6c205f6265636f6d65496d706c656d656e746174696f6e436f6d7074726f6c6c65723a5f6265666f72654e6f6e5265656e7472616e743a2063616c6c6572206e6f74206c6973746564206173206d61726b65746f6e6c792061646d696e206f7220626f72726f772063617020677561726469616e2063616e2073657420626f72726f772063617073657869744d61726b65743a206765744163636f756e74536e617073686f74206661696c65646f6e6c792061646d696e206f7220626f72726f772063617020677561726469616e2063616e2073657420737570706c79206361707343616e6e6f7420737570706f72742061206d61726b65742077697468206120646966666572656e7420436f6d7074726f6c6c65722e6f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676520627261696e73a265627a7a723158206f29da39703b0c540e93c507f9304fe41ae1ea94f118487a879088722223371f64736f6c63430005110032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104ab5760003560e01c80636d154ea51161026d578063bdcdc25811610151578063da3d454c116100ce578063e6653f3d11610092578063e6653f3d1461123e578063e875544614611246578063eabe7d911461124e578063ede4edd014611284578063f6c9aea7146112aa578063f851a440146112c9576104ab565b8063da3d454c146111a0578063dce15449146111d6578063dcfbc0c714611202578063dd5cd22c1461120a578063e4028eee14611212576104ab565b8063c90c20b111610115578063c90c20b11461110e578063d01f63f514611116578063d02f73511461111e578063d251fefc14611164578063d533316614611181576104ab565b8063bdcdc25814610f07578063c299823814610f43578063c488847b14610fe4578063c6c5b0dd14611033578063c8c9c97514611050576104ab565b8063929fe9a1116101ea578063abfceffc116101ae578063abfceffc14610e9b578063ac0b0bb714610ec1578063b0772d0b14610ec9578063b095721014610ed1578063b9b5b15314610ed9578063bb82aa5e14610eff576104ab565b8063929fe9a114610d8b57806394543c1514610db9578063952adf5a14610ddf5780639b19251a14610dfe578063aba35b9814610e24576104ab565b80637dc0d1d0116102315780637dc0d1d014610cf5578063819605a814610cfd57806387f7630314610d235780638e8f294b14610d2b5780638ebf636414610d6c576104ab565b80636d154ea514610c1a5780636d35bf9114610c40578063731f0c2b14610c865780637515bafa14610cac578063779b229414610cc9576104ab565b80633c94786f1161039457806352d84d1e116103115780635ec88c79116102d55780635ec88c7914610a865780635f5af1aa14610aac5780635fc7e71e14610ad2578063607ef6c114610b18578063632e514214610bd65780636a56947e14610bde576104ab565b806352d84d1e146109fd57806355ee1fe114610a1a578063570e136f14610a405780635c77860514610a485780635d72de6214610a7e576104ab565b80634e79238f116103585780634e79238f146108565780634ef4c3e1146108b05780634fd42e17146108e657806351a485e41461090357806351dff989146109c1576104ab565b80633c94786f1461079857806341c728b9146107a057806347ef3b3b146107dc5780634a584432146108285780634ada90af1461084e576104ab565b806324008a621161042d578063317b0b77116103f1578063317b0b77146106a157806331ff47fa146106be57806332abcdbe146106e45780633605b51b1461073c578063391957d7146107445780633bcf7ec11461076a576104ab565b806324008a621461062e57806324a3d6221461066a57806326782247146106725780632d70db781461067a5780632f1069ba14610699576104ab565b806318c882a51161047457806318c882a5146105565780631d504dc6146105845780631ededc91146105ac57806321af4569146105ee5780632259192a146105f6576104ab565b80627e3dd2146104b057806302c3bcbb146104cc5780630a755ec21461050457806315761d511461050c57806316dc15fe14610530575b600080fd5b6104b86112d1565b604080519115158252519081900360200190f35b6104f2600480360360208110156104e257600080fd5b50356001600160a01b03166112d6565b60408051918252519081900360200190f35b6104b86112e8565b6105146112f8565b604080516001600160a01b039092168252519081900360200190f35b6104b86004803603602081101561054657600080fd5b50356001600160a01b0316611307565b6104b86004803603604081101561056c57600080fd5b506001600160a01b038135169060200135151561131c565b6105aa6004803603602081101561059a57600080fd5b50356001600160a01b03166114af565b005b6105aa600480360360a08110156105c257600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060800135611755565b61051461175c565b6104f26004803603608081101561060c57600080fd5b506001600160a01b038135169060208101359060408101359060600135611770565b6104f26004803603608081101561064457600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013561177f565b6105146117ba565b6105146117c9565b6104b86004803603602081101561069057600080fd5b503515156117d8565b6104b8611905565b6104f2600480360360208110156106b757600080fd5b5035611915565b610514600480360360208110156106d457600080fd5b50356001600160a01b0316611a23565b6106ec611a3e565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610728578181015183820152602001610710565b505050509050019250505060405180910390f35b6106ec611aa1565b6105aa6004803603602081101561075a57600080fd5b50356001600160a01b0316611b01565b6104b86004803603604081101561078057600080fd5b506001600160a01b0381351690602001351515611bb1565b6104b8611d3d565b6105aa600480360360808110156107b657600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135611d4d565b6105aa600480360360c08110156107f257600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060808101359060a00135611d74565b6104f26004803603602081101561083e57600080fd5b50356001600160a01b0316611d79565b6104f2611d8b565b6108926004803603608081101561086c57600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135611d91565b60408051938452602084019290925282820152519081900360600190f35b6104f2600480360360608110156108c657600080fd5b506001600160a01b03813581169160208101359091169060400135611dcb565b6104f2600480360360208110156108fc57600080fd5b50356121ce565b6105aa6004803603604081101561091957600080fd5b810190602081018135600160201b81111561093357600080fd5b82018360208201111561094557600080fd5b803590602001918460208302840111600160201b8311171561096657600080fd5b919390929091602081019035600160201b81111561098357600080fd5b82018360208201111561099557600080fd5b803590602001918460208302840111600160201b831117156109b657600080fd5b5090925090506122bd565b6105aa600480360360808110156109d757600080fd5b506001600160a01b0381358116916020810135909116906040810135906060013561244c565b61051460048036036020811015610a1357600080fd5b50356124a6565b6104f260048036036020811015610a3057600080fd5b50356001600160a01b03166124cd565b6104b861254f565b6105aa60048036036060811015610a5e57600080fd5b506001600160a01b0381358116916020810135909116906040013561255e565b6105aa612563565b61089260048036036020811015610a9c57600080fd5b50356001600160a01b03166125d6565b6104f260048036036020811015610ac257600080fd5b50356001600160a01b031661260b565b6104f2600480360360a0811015610ae857600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135909116906080013561268a565b6105aa60048036036040811015610b2e57600080fd5b810190602081018135600160201b811115610b4857600080fd5b820183602082011115610b5a57600080fd5b803590602001918460208302840111600160201b83111715610b7b57600080fd5b919390929091602081019035600160201b811115610b9857600080fd5b820183602082011115610baa57600080fd5b803590602001918460208302840111600160201b83111715610bcb57600080fd5b509092509050612841565b6105aa6129c7565b6105aa60048036036080811015610bf457600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135612a24565b6104b860048036036020811015610c3057600080fd5b50356001600160a01b0316612a29565b6105aa600480360360a0811015610c5657600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135611755565b6104b860048036036020811015610c9c57600080fd5b50356001600160a01b0316612a3e565b61051460048036036020811015610cc257600080fd5b5035612a52565b6104f260048036036040811015610cdf57600080fd5b506001600160a01b038135169060200135612a5f565b610514612bf1565b6104f260048036036020811015610d1357600080fd5b50356001600160a01b0316612c00565b6104b8612f5a565b610d5160048036036020811015610d4157600080fd5b50356001600160a01b0316612f6a565b60408051921515835260208301919091528051918290030190f35b6104b860048036036020811015610d8257600080fd5b50351515612f89565b6104b860048036036040811015610da157600080fd5b506001600160a01b03813581169160200135166130b5565b6104b860048036036020811015610dcf57600080fd5b50356001600160a01b03166130e8565b6104f260048036036020811015610df557600080fd5b5035151561325a565b6104b860048036036020811015610e1457600080fd5b50356001600160a01b03166132d7565b6104f260048036036060811015610e3a57600080fd5b813515159190810190604081016020820135600160201b811115610e5d57600080fd5b820183602082011115610e6f57600080fd5b803590602001918460018302840111600160201b83111715610e9057600080fd5b9193509150356132ec565b6106ec60048036036020811015610eb157600080fd5b50356001600160a01b03166134bb565b6104b8613544565b6106ec613554565b6104b86135b4565b6104f260048036036020811015610eef57600080fd5b50356001600160a01b03166135bd565b61051461378e565b6104f260048036036080811015610f1d57600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013561379d565b6106ec60048036036020811015610f5957600080fd5b810190602081018135600160201b811115610f7357600080fd5b820183602082011115610f8557600080fd5b803590602001918460208302840111600160201b83111715610fa657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550613827945050505050565b61101a60048036036060811015610ffa57600080fd5b506001600160a01b038135811691602081013590911690604001356138be565b6040805192835260208301919091528051918290030190f35b6105146004803603602081101561104957600080fd5b5035613adf565b6104f26004803603604081101561106657600080fd5b810190602081018135600160201b81111561108057600080fd5b82018360208201111561109257600080fd5b803590602001918460208302840111600160201b831117156110b357600080fd5b919390929091602081019035600160201b8111156110d057600080fd5b8201836020820111156110e257600080fd5b803590602001918460208302840111600160201b8311171561110357600080fd5b509092509050613aec565b6105aa613cff565b6106ec613db0565b6104f2600480360360a081101561113457600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135613e10565b6105146004803603602081101561117a57600080fd5b5035613fa6565b6104f26004803603602081101561119757600080fd5b50351515613fb3565b6104f2600480360360608110156111b657600080fd5b506001600160a01b03813581169160208101359091169060400135614030565b610514600480360360408110156111ec57600080fd5b506001600160a01b0381351690602001356143da565b61051461440f565b6104b861441e565b6104f26004803603604081101561122857600080fd5b506001600160a01b038135169060200135614427565b6104b86145ce565b6104f26145de565b6104f26004803603606081101561126457600080fd5b506001600160a01b038135811691602081013590911690604001356145e4565b6104f26004803603602081101561129a57600080fd5b50356001600160a01b0316614601565b6105aa600480360360208110156112c057600080fd5b503515156149ec565b610514614a4a565b600181565b60246020526000908152604090205481565b600254600160a81b900460ff1681565b6000546001600160a01b031681565b60196020526000908152604090205460ff1681565b6001600160a01b03821660009081526014602052604081205460ff166113735760405162461bcd60e51b8152600401808060200182810382526028815260200180615c076028913960400191505060405180910390fd5b601f546001600160a01b031633148061138f575061138f614a59565b6113ca5760405162461bcd60e51b8152600401808060200182810382526027815260200180615c926027913960400191505060405180910390fd5b6113d2614a59565b806113df57506001821515145b611429576040805162461bcd60e51b81526020600482015260166024820152756f6e6c792061646d696e2063616e20756e706175736560501b604482015290519081900360640190fd5b6001600160a01b038316600081815260216020908152604091829020805486151560ff199091168117909155825193845283830152606090830181905260069083015265426f72726f7760d01b6080830152517f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09181900360a00190a150805b92915050565b6000546001600160a01b03163314801561152a5750806001600160a01b0316632f1069ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114fd57600080fd5b505afa158015611511573d6000803e3d6000fd5b505050506040513d602081101561152757600080fd5b50515b8061160d5750806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561156957600080fd5b505afa15801561157d573d6000803e3d6000fd5b505050506040513d602081101561159357600080fd5b50516001600160a01b03163314801561160d5750806001600160a01b0316630a755ec26040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e057600080fd5b505afa1580156115f4573d6000803e3d6000fd5b505050506040513d602081101561160a57600080fd5b50515b6116485760405162461bcd60e51b8152600401808060200182810382526027815260200180615e116027913960400191505060405180910390fd5b6000816001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561168557600080fd5b505af1158015611699573d6000803e3d6000fd5b505050506040513d60208110156116af57600080fd5b5051905080156116fe576040805162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b604482015290519081900360640190fd5b816001600160a01b0316635d72de626040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561173957600080fd5b505af115801561174d573d6000803e3d6000fd5b505050505050565b5050505050565b60225461010090046001600160a01b031681565b6000805b90505b949350505050565b6001600160a01b03841660009081526014602052604081205460ff166117a95760095b9050611777565b6117b38584614aad565b6000611774565b601f546001600160a01b031681565b6002546001600160a01b031681565b601f546000906001600160a01b03163314806117f757506117f7614a59565b6118325760405162461bcd60e51b8152600401808060200182810382526027815260200180615c926027913960400191505060405180910390fd5b61183a614a59565b8061184757506001821515145b611891576040805162461bcd60e51b81526020600482015260166024820152756f6e6c792061646d696e2063616e20756e706175736560501b604482015290519081900360640190fd5b601f8054831515600160b81b810260ff60b81b1990921691909117909155604080516020810192909252808252600582820152645365697a6560d81b6060830152517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de09181900360800190a150805b919050565b600254600160a01b900460ff1681565b600061191f614a59565b6119365761192f60016007614b45565b9050611900565b61193e615b1e565b506040805160208101909152828152611955615b1e565b50604080516020810190915266b1a2bc2ec5000081526119758282614bab565b1561198f5761198660056008614b45565b92505050611900565b611997615b1e565b506040805160208101909152670c7d713b49da000081526119b88184614bb3565b156119d3576119c960056008614b45565b9350505050611900565b6010805490869055604080518281526020810188905281517f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd9929181900390910190a160005b9695505050505050565b601a602052600090815260409020546001600160a01b031681565b60606017805480602002602001604051908101604052809291908181526020018280548015611a9657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a78575b505050505090505b90565b60606025805480602002602001604051908101604052809291908181526020018280548015611a96576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611a78575050505050905090565b611b09614a59565b611b445760405162461bcd60e51b8152600401808060200182810382526026815260200180615cb96026913960400191505060405180910390fd5b602280546001600160a01b03838116610100818102610100600160a81b03198516179094556040805194909304919091168084526020840191909152815190927feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e2992908290030190a15050565b6001600160a01b03821660009081526014602052604081205460ff16611c085760405162461bcd60e51b8152600401808060200182810382526028815260200180615c076028913960400191505060405180910390fd5b601f546001600160a01b0316331480611c245750611c24614a59565b611c5f5760405162461bcd60e51b8152600401808060200182810382526027815260200180615c926027913960400191505060405180910390fd5b611c67614a59565b80611c7457506001821515145b611cbe576040805162461bcd60e51b81526020600482015260166024820152756f6e6c792061646d696e2063616e20756e706175736560501b604482015290519081900360640190fd5b6001600160a01b03831660008181526020808052604091829020805486151560ff199091168117909155825193845283830152606090830181905260049083015263135a5b9d60e21b6080830152517f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09181900360a00190a150919050565b601f54600160a01b900460ff1681565b50506001600160a01b03166000908152601960205260409020805460ff1916600117905550565b61174d565b60236020526000908152604090205481565b60115481565b600080600080600080611da68a8a8a8a614bba565b925092509250826015811115611db857fe5b95509093509150505b9450945094915050565b6001600160a01b038316600090815260208052604081205460ff1615611e29576040805162461bcd60e51b815260206004820152600e60248201526d1b5a5b9d081a5cc81c185d5cd95960921b604482015290519081900360640190fd5b6001600160a01b03841660009081526014602052604090205460ff16611e535760095b90506121c7565b601b5460ff168015611e7e57506001600160a01b0383166000908152601c602052604090205460ff16155b15611e8a576012611e4c565b6001600160a01b03841660009081526024602052604090205480156121b6576000856001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee457600080fd5b505afa158015611ef8573d6000803e3d6000fd5b505050506040513d6020811015611f0e57600080fd5b5051604080516308f7a6e360e31b815290519192506000916001600160a01b038916916347bd3718916004808301926020929190829003018186803b158015611f5657600080fd5b505afa158015611f6a573d6000803e3d6000fd5b505050506040513d6020811015611f8057600080fd5b505160408051638f840ddd60e01b815290519192506000916001600160a01b038a1691638f840ddd916004808301926020929190829003018186803b158015611fc857600080fd5b505afa158015611fdc573d6000803e3d6000fd5b505050506040513d6020811015611ff257600080fd5b50516040805163dc028ab160e01b815290519192506000916001600160a01b038b169163dc028ab1916004808301926020929190829003018186803b15801561203a57600080fd5b505afa15801561204e573d6000803e3d6000fd5b505050506040513d602081101561206457600080fd5b5051604080516361feacff60e01b815290519192506000916001600160a01b038c16916361feacff916004808301926020929190829003018186803b1580156120ac57600080fd5b505afa1580156120c0573d6000803e3d6000fd5b505050506040513d60208110156120d657600080fd5b505190506000806120fa87876120f56120ef8989614ef3565b87614ef3565b614f29565b9092509050600082600381111561210d57fe5b1461212357600b985050505050505050506121c7565b600061212f828c614f75565b9093509050600083600381111561214257fe5b1461215957600b99505050505050505050506121c7565b8881106121ad576040805162461bcd60e51b815260206004820152601960248201527f6d61726b657420737570706c7920636170207265616368656400000000000000604482015290519081900360640190fd5b50505050505050505b6121c08585614f9e565b60005b9150505b9392505050565b60006121d8614a59565b6121e85761192f6001600d614b45565b6121f0615b1e565b506040805160208101909152828152612207615b1e565b506040805160208101909152670de0b6b3a764000081526122288282614bb3565b15612239576119866007600e614b45565b612241615b1e565b5060408051602081019091526714d1120d7b16000081526122628184614bb3565b15612273576119c96007600e614b45565b6011805490869055604080518281526020810188905281517faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec1316929181900390910190a16000611a19565b6122c5614a59565b806122df575060225461010090046001600160a01b031633145b61231a5760405162461bcd60e51b8152600401808060200182810382526035815260200180615da76035913960400191505060405180910390fd5b8281811580159061232a57508082145b61236b576040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015290519081900360640190fd5b60005b828110156124435784848281811061238257fe5b905060200201356024600089898581811061239957fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020819055508686828181106123d957fe5b905060200201356001600160a01b03166001600160a01b03167f9e0ad9cee10bdf36b7fbd38910c0bdff0f275ace679b45b922381c2723d676f886868481811061241f57fe5b905060200201356040518082815260200191505060405180910390a260010161236e565b50505050505050565b8015801561245a5750600082115b156124a0576040805162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b604482015290519081900360640190fd5b50505050565b601581815481106124b357fe5b6000918252602090912001546001600160a01b0316905081565b60006124d7614a59565b6124e75761192f60016013614b45565b600f80546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e22929181900390910190a160009392505050565b60265462010000900460ff1681565b505050565b6003546001600160a01b031633146125ac5760405162461bcd60e51b8152600401808060200182810382526032815260200180615cdf6032913960400191505060405180910390fd5b602654610100900460ff166125d4576026805461ff001960ff19909116600117166101001790555b565b6000806000806000806125ed876000806000614bba565b9250925092508260158111156125ff57fe5b97919650945092505050565b6000612615614a59565b6126255761192f60016018614b45565b601f80546001600160a01b038481166001600160a01b0319831617928390556040805192821680845293909116602083015280517f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e9281900390910190a160006121c7565b6001600160a01b03851660009081526014602052604081205460ff1615806126cb57506001600160a01b03851660009081526014602052604090205460ff16155b156126da5760095b9050612838565b6000866001600160a01b03166395dd9193856040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561273257600080fd5b505afa158015612746573d6000803e3d6000fd5b505050506040513d602081101561275c57600080fd5b50519050612769876130e8565b156127b257828110156127ad5760405162461bcd60e51b8152600401808060200182810382526028815260200180615c2f6028913960400191505060405180910390fd5b612832565b6000806127be86615035565b919350909150600090508260158111156127d457fe5b146127ef578160158111156127e557fe5b9350505050612838565b806127fb5760036127e5565b6000612817604051806020016040528060105481525085615055565b90508086111561282e576011945050505050612838565b5050505b60009150505b95945050505050565b612849614a59565b80612863575060225461010090046001600160a01b031633145b61289e5760405162461bcd60e51b8152600401808060200182810382526035815260200180615d4d6035913960400191505060405180910390fd5b828181158015906128ae57508082145b6128ef576040805162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b604482015290519081900360640190fd5b60005b828110156124435784848281811061290657fe5b905060200201356023600089898581811061291d57fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000208190555086868281811061295d57fe5b905060200201356001600160a01b03166001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f68686848181106129a357fe5b905060200201356040518082815260200191505060405180910390a26001016128f2565b3360009081526014602052604090205460ff16612a155760405162461bcd60e51b815260040180806020018281038252603b815260200180615c57603b913960400191505060405180910390fd5b6026805460ff19166001179055565b6124a0565b60216020526000908152604090205460ff1681565b602080526000908152604090205460ff1681565b601781815481106124b357fe5b602654600090819062010000900460ff16612af2576000809054906101000a90046001600160a01b03166001600160a01b031663fdb25fb16040518163ffffffff1660e01b815260040160206040518083038186803b158015612ac157600080fd5b505afa158015612ad5573d6000803e3d6000fd5b505050506040513d6020811015612aeb57600080fd5b5051612afc565b670de0b6b3a76400005b90508015612be757600f546040805163fc57d4df60e01b81526001600160a01b0387811660048301529151600093929092169163fc57d4df91602480820192602092909190829003018186803b158015612b5557600080fd5b505afa158015612b69573d6000803e3d6000fd5b505050506040513d6020811015612b7f57600080fd5b5051905080612b9357600d925050506114a9565b600080612bae60405180602001604052808581525087615074565b90925090506000826003811115612bc157fe5b14612bd457600b5b9450505050506114a9565b83811015612be3576013612bc9565b5050505b6000949350505050565b600f546001600160a01b031681565b6000612c0a614a59565b612c1a5761192f60016019614b45565b6001600160a01b03821660009081526014602052604090205460ff16612c465761192f6009601a614b45565b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c8157600080fd5b505afa158015612c95573d6000803e3d6000fd5b505050506040513d6020811015612cab57600080fd5b50511115612cbf5761192f6015601b614b45565b6001600160a01b0382166000908152601460209081526040808320805460ff19168155600101929092556015805483518184028101840190945280845260609392830182828015612d3957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612d1b575b5050835193945083925060009150505b82811015612d8e57856001600160a01b0316848281518110612d6757fe5b60200260200101516001600160a01b03161415612d8657809150612d8e565b600101612d49565b50818110612d9857fe5b601580546000198101908110612daa57fe5b600091825260209091200154601580546001600160a01b039092169183908110612dd057fe5b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790556015805490612e0c906000198301615b31565b506000601a6000876001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e4c57600080fd5b505afa158015612e60573d6000803e3d6000fd5b505050506040513d6020811015612e7657600080fd5b5051612ee657876001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015612eb557600080fd5b505afa158015612ec9573d6000803e3d6000fd5b505050506040513d6020811015612edf57600080fd5b5051612ee9565b60005b6001600160a01b039081168252602080830193909352604091820160002080546001600160a01b0319169482169490941790935580519288168352517f302feb03efd5741df80efe7f97f5d93d74d46a542a3d312d0faae64fa1f3e0e99281900390910190a1600095945050505050565b601f54600160b01b900460ff1681565b6014602052600090815260409020805460019091015460ff9091169082565b601f546000906001600160a01b0316331480612fa85750612fa8614a59565b612fe35760405162461bcd60e51b8152600401808060200182810382526027815260200180615c926027913960400191505060405180910390fd5b612feb614a59565b80612ff857506001821515145b613042576040805162461bcd60e51b81526020600482015260166024820152756f6e6c792061646d696e2063616e20756e706175736560501b604482015290519081900360640190fd5b601f8054831515600160b01b810260ff60b01b1990921691909117909155604080516020810192909252808252600882820152672a3930b739b332b960c11b6060830152517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de09181900360800190a15090565b6001600160a01b038082166000908152601460209081526040808320938616835260029093019052205460ff1692915050565b6001600160a01b03811660009081526014602052604081206001015415801561312e57506001600160a01b03821660009081526021602052604090205460ff1615156001145b80156114a9575061324a613211836001600160a01b031663173b99046040518163ffffffff1660e01b815260040160206040518083038186803b15801561317457600080fd5b505afa158015613188573d6000803e3d6000fd5b505050506040513d602081101561319e57600080fd5b505160408051638d02d9a160e01b815290516001600160a01b03871691638d02d9a1916004808301926020929190829003018186803b1580156131e057600080fd5b505afa1580156131f4573d6000803e3d6000fd5b505050506040513d602081101561320a57600080fd5b5051614ef3565b836001600160a01b031663dbfe7c196040518163ffffffff1660e01b815260040160206040518083038186803b1580156131e057600080fd5b670de0b6b3a76400001492915050565b6000613264614a59565b6132745761192f60016014614b45565b601b5460ff161515821515141561328c57600061192f565b601b805483151560ff19909116811790915560408051918252517f84c7d948374a180eddab35d27d2f7a94167a1ff4e79467f1e89c061984190a1e9181900360200190a160006114a9565b601c6020526000908152604090205460ff1681565b60006132f6614a59565b613306576117a260016017614b45565b60028054600160a01b60ff60a01b19821681179092550460ff166000866133cf57600054604051638754e4fd60e01b8152602060048201908152602482018890526001600160a01b0390921691638754e4fd91899189918190604401848480828437600081840152601f19601f8201169050808301925050509350505050602060405180830381600087803b15801561339e57600080fd5b505af11580156133b2573d6000803e3d6000fd5b505050506040513d60208110156133c857600080fd5b5051613473565b600054604051639b86a9b560e01b8152602060048201908152602482018890526001600160a01b0390921691639b86a9b591899189918190604401848480828437600081840152601f19601f8201169050808301925050509350505050602060405180830381600087803b15801561344657600080fd5b505af115801561345a573d6000803e3d6000fd5b505050506040513d602081101561347057600080fd5b50515b6002805460ff60a01b1916600160a01b8515150217905590506000613497826150c7565b905080156134a557806134af565b6134af8286614427565b98975050505050505050565b60608060136000846001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561353757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613519575b5093979650505050505050565b601f54600160b81b900460ff1681565b60606015805480602002602001604051908101604052809291908181526020018280548015611a96576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611a78575050505050905090565b601b5460ff1681565b60006135c7614a59565b6135d75761192f60016002614b45565b816001600160a01b031663abc6d72d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561361057600080fd5b505afa158015613624573d6000803e3d6000fd5b505050506040513d602081101561363a57600080fd5b505161368d576040805162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c736500000000604482015290519081900360640190fd5b60005b60255481101561370557602581815481106136a757fe5b6000918252602090912001546001600160a01b03848116911614156136fd5760405162461bcd60e51b8152600401808060200182810382526029815260200180615bde6029913960400191505060405180910390fd5b600101613690565b50602580546001810182556000919091527f401968ff42a154441da5f6c4c935ac46b8671f0e062baaa62a7545ba53bb6e4c0180546001600160a01b0384166001600160a01b0319909116811790915560408051918252517f98ef1187fb6fd2bc85f8996489877eb2b5428f9e9bdfc068c9ad6c2ea82eacc79181900360200190a160006114a9565b6003546001600160a01b031681565b601f54600090600160b01b900460ff16156137f4576040805162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c881a5cc81c185d5cd95960721b604482015290519081900360640190fd5b600061380186868561545a565b90508015613810579050611777565b61381b868686615506565b60009695505050505050565b606060008251905060608160405190808252806020026020018201604052801561385b578160200160208202803883390190505b50905060005b828110156138b657600085828151811061387757fe5b6020026020010151905061388b81336155a6565b601581111561389657fe5b8383815181106138a257fe5b602090810291909101015250600101613861565b509392505050565b600f546040805163fc57d4df60e01b81526001600160a01b03868116600483015291516000938493849391169163fc57d4df91602480820192602092909190829003018186803b15801561391157600080fd5b505afa158015613925573d6000803e3d6000fd5b505050506040513d602081101561393b57600080fd5b5051600f546040805163fc57d4df60e01b81526001600160a01b0389811660048301529151939450600093919092169163fc57d4df916024808301926020929190829003018186803b15801561399057600080fd5b505afa1580156139a4573d6000803e3d6000fd5b505050506040513d60208110156139ba57600080fd5b505190508115806139c9575080155b156139de57600d935060009250613ad7915050565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015613a1957600080fd5b505afa158015613a2d573d6000803e3d6000fd5b505050506040513d6020811015613a4357600080fd5b505190506000613a51615b1e565b613a59615b1e565b613a61615b1e565b613a89604051806020016040528060115481525060405180602001604052808a815250615733565b9250613ab1604051806020016040528088815250604051806020016040528088815250615733565b9150613abd8383615772565b9050613ac9818b615055565b600099509750505050505050505b935093915050565b602581815481106124b357fe5b6000613af6614a59565b613b06576117a260016015614b45565b60005b84811015613cf7576000868683818110613b1f57fe5b905060200201356001600160a01b03169050848483818110613b3d57fe5b9050602002013515613be9576001600160a01b0381166000908152601c602052604090205460ff16613be4576001600160a01b0381166000818152601c60209081526040808320805460ff19166001908117909155601d805491820181557f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f90910180546001600160a01b0319168617905554938352601e90915290206000199190910190555b613cee565b6001600160a01b0381166000908152601c602052604090205460ff1615613cee576001600160a01b0381166000908152601e6020526040902054601d5460001901811015613cab57601d8054600091906000198101908110613c4757fe5b600091825260209091200154601d80546001600160a01b039092169250829184908110613c7057fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152601e909152604090208190555b601d805490613cbe906000198301615b31565b50506001600160a01b0381166000908152601e60209081526040808320839055601c9091529020805460ff191690555b50600101613b09565b506000611774565b3360009081526014602052604090205460ff16613d4d5760405162461bcd60e51b815260040180806020018281038252603c815260200180615d11603c913960400191505060405180910390fd5b60265460ff16613da4576040805162461bcd60e51b815260206004820152601860248201527f72652d656e7465726564206163726f7373206173736574730000000000000000604482015290519081900360640190fd5b6026805460ff19169055565b6060601d805480602002602001604051908101604052809291908181526020018280548015611a96576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611a78575050505050905090565b601f54600090600160b81b900460ff1615613e64576040805162461bcd60e51b815260206004820152600f60248201526e1cd95a5e99481a5cc81c185d5cd959608a1b604482015290519081900360640190fd5b6001600160a01b03861660009081526014602052604090205460ff161580613ea557506001600160a01b03851660009081526014602052604090205460ff16155b15613eb15760096126d3565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613eea57600080fd5b505afa158015613efe573d6000803e3d6000fd5b505050506040513d6020811015613f1457600080fd5b505160408051635fe3b56760e01b815290516001600160a01b0392831692891691635fe3b567916004808301926020929190829003018186803b158015613f5a57600080fd5b505afa158015613f6e573d6000803e3d6000fd5b505050506040513d6020811015613f8457600080fd5b50516001600160a01b031614613f9b5760026126d3565b61381b868486615506565b601d81815481106124b357fe5b6000613fbd614a59565b613fcd5761192f60016006614b45565b60225460ff1615158215151415613fe557600061192f565b6022805483151560ff19909116811790915560408051918252517faa40ee94af55250363b91641a0a615c47690148901505f89b01dafae03fff2819181900360200190a160006114a9565b6001600160a01b03831660009081526021602052604081205460ff1615614091576040805162461bcd60e51b815260206004820152601060248201526f189bdc9c9bddc81a5cc81c185d5cd95960821b604482015290519081900360640190fd5b6001600160a01b03841660009081526014602052604090205460ff166140b8576009611e4c565b6001600160a01b038085166000908152601460209081526040808320938716835260029093019052205460ff166141a857336001600160a01b0385161461413e576040805162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba1031329031aa37b5b2b760591b604482015290519081900360640190fd5b600061414a33856155a6565b9050600081601581111561415a57fe5b146141735780601581111561416b57fe5b9150506121c7565b6001600160a01b038086166000908152601460209081526040808320938816835260029093019052205460ff166141a657fe5b505b600f546040805163fc57d4df60e01b81526001600160a01b0387811660048301529151919092169163fc57d4df916024808301926020929190829003018186803b1580156141f557600080fd5b505afa158015614209573d6000803e3d6000fd5b505050506040513d602081101561421f57600080fd5b505161422c57600d611e4c565b601b5460ff16801561425757506001600160a01b0383166000908152601c602052604090205460ff16155b15614263576012611e4c565b6001600160a01b0384166000908152602360205260409020548015614375576000856001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b1580156142bd57600080fd5b505afa1580156142d1573d6000803e3d6000fd5b505050506040513d60208110156142e757600080fd5b505190506000806142f88387614f75565b9092509050600082600381111561430b57fe5b1461431d57600b9450505050506121c7565b838110614371576040805162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f7720636170207265616368656400000000000000604482015290519081900360640190fd5b5050505b61437f8585614aad565b60008061438f8688600088614bba565b919350909150600090508260158111156143a557fe5b146143c0578160158111156143b657fe5b93505050506121c7565b80156143cd5760046143b6565b6000979650505050505050565b601360205281600052604060002081815481106143f357fe5b6000918252602090912001546001600160a01b03169150829050565b6004546001600160a01b031681565b60225460ff1681565b6000614431614a59565b6144485761444160016009614b45565b90506114a9565b6001600160a01b0383166000908152601460205260409020805460ff1661447d576144756009600a614b45565b9150506114a9565b614485615b1e565b50604080516020810190915283815261449c615b1e565b506040805160208101909152670c7d713b49da000081526144bd8183614bb3565b156144d8576144ce6006600b614b45565b93505050506114a9565b841580159061455d5750600f546040805163fc57d4df60e01b81526001600160a01b0389811660048301529151919092169163fc57d4df916024808301926020929190829003018186803b15801561452f57600080fd5b505afa158015614543573d6000803e3d6000fd5b505050506040513d602081101561455957600080fd5b5051155b1561456e576144ce600d600c614b45565b60018301805490869055604080516001600160a01b03891681526020810183905280820188905290517f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59181900360600190a16000979650505050505050565b601f54600160a81b900460ff1681565b60105481565b6000806145f285858561545a565b905080156121b65790506121c7565b6000808290506000806000836001600160a01b031663c37f68e2336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b15801561466257600080fd5b505afa158015614676573d6000803e3d6000fd5b505050506040513d608081101561468c57600080fd5b5080516020820151604090920151909450909250905082156146df5760405162461bcd60e51b8152600401808060200182810382526025815260200180615d826025913960400191505060405180910390fd5b80156146fc576146f1600c6003614b45565b945050505050611900565b600061470987338561545a565b9050801561472a5761471e600e6004836157ae565b95505050505050611900565b6001600160a01b0385166000908152601460209081526040808320338452600281019092529091205460ff166147695760009650505050505050611900565b3360009081526002820160209081526040808320805460ff1916905560138252918290208054835181840281018401909452808452606093928301828280156147db57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116147bd575b5050835193945083925060009150505b8281101561483057896001600160a01b031684828151811061480957fe5b60200260200101516001600160a01b0316141561482857809150614830565b6001016147eb565b5081811061483a57fe5b33600090815260136020526040902080548190600019810190811061485b57fe5b9060005260206000200160009054906101000a90046001600160a01b031681838154811061488557fe5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580546148be826000198301615b31565b50805461499757336000908152601860205260409020546017546000190181101561495d57601780546000919060001981019081106148f957fe5b600091825260209091200154601780546001600160a01b03909216925082918490811061492257fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559290911681526018909152604090208190555b6017805490614970906000198301615b31565b505033600090815260186020908152604080832083905560169091529020805460ff191690555b604080516001600160a01b038c16815233602082015281517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d929181900390910190a160009c9b505050505050505050505050565b6149f4614a59565b614a2e576040805162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b604482015290519081900360640190fd5b60268054911515620100000262ff000019909216919091179055565b6001546001600160a01b031681565b6001546000906001600160a01b031633148015614a7f5750600254600160a81b900460ff165b80614aa857506000546001600160a01b031633148015614aa85750600254600160a01b900460ff165b905090565b60005b60255481101561255e5760258181548110614ac757fe5b600091825260208220015460408051631cdc2c5d60e31b81526001600160a01b03878116600483015286811660248301529151919092169263e6e162e8926044808201939182900301818387803b158015614b2157600080fd5b505af1158015614b35573d6000803e3d6000fd5b505060019092019150614ab09050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836015811115614b7457fe5b83601b811115614b8057fe5b604080519283526020830191909152600082820152519081900360600190a18260158111156121c757fe5b519051111590565b5190511090565b6000806000614bc7615b55565b6001600160a01b03881660009081526013602090815260408083208054825181850281018501909352808352606093830182828015614c2f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614c11575b50939450600093505050505b8151811015614eb4576000828281518110614c5257fe5b60200260200101519050806001600160a01b031663c37f68e28d6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b158015614cb257600080fd5b505afa158015614cc6573d6000803e3d6000fd5b505050506040513d6080811015614cdc57600080fd5b508051602082015160408084015160609485015160808b0152938901939093529187019190915293508315614d215750600f965060009550859450611dc19350505050565b60408051602080820183526001600160a01b0380851660008181526014845285902060010154845260c08a01939093528351808301855260808a0151815260e08a0152600f54845163fc57d4df60e01b81526004810194909452935193169263fc57d4df926024808201939291829003018186803b158015614da257600080fd5b505afa158015614db6573d6000803e3d6000fd5b505050506040513d6020811015614dcc57600080fd5b505160a08601819052614def5750600d965060009550859450611dc19350505050565b604080516020810190915260a0860151815261010086015260c085015160e0860151614e2991614e1e91615733565b866101000151615733565b610120860181905260408601518651614e43929190615814565b855261010085015160608601516020870151614e60929190615814565b60208601526001600160a01b03818116908c161415614eab57614e8d8561012001518b8760200151615814565b60208601819052610100860151614ea5918b90615814565b60208601525b50600101614c3b565b50602083015183511115614eda5750506020810151905160009450039150829050611dc1565b5050805160209091015160009450849350039050611dc1565b60006121c78383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b81525061583c565b600080600080614f398787614f75565b90925090506000826003811115614f4c57fe5b14614f5d5750915060009050613ad7565b614f6781866158d7565b935093505050935093915050565b600080838301848110614f8d57600092509050614f97565b5060029150600090505b9250929050565b60005b60255481101561255e5760258181548110614fb857fe5b60009182526020822001546040805162e48b0f60e51b81526001600160a01b038781166004830152868116602483015291519190921692631c9161e0926044808201939182900301818387803b15801561501157600080fd5b505af1158015615025573d6000803e3d6000fd5b505060019092019150614fa19050565b6000806000615048846000806000614bba565b9250925092509193909250565b600061505f615b1e565b61506984846158fa565b90506117778161591b565b6000806000615081615b1e565b61508b868661592a565b9092509050600082600381111561509e57fe5b146150af5750915060009050614f97565b60006150ba8261591b565b9350935050509250929050565b60006150d1614a59565b6150e15761192f60016017614b45565b6001600160a01b03821660009081526014602052604090205460ff161561510e5761192f600a6016614b45565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561514757600080fd5b505afa15801561515b573d6000803e3d6000fd5b505050506040513d602081101561517157600080fd5b50516151c4576040805162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c736500000000604482015290519081900360640190fd5b306001600160a01b0316826001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561520757600080fd5b505afa15801561521b573d6000803e3d6000fd5b505050506040513d602081101561523157600080fd5b50516001600160a01b0316146152785760405162461bcd60e51b8152600401808060200182810382526035815260200180615ddc6035913960400191505060405180910390fd5b6000826001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156152b357600080fd5b505afa1580156152c7573d6000803e3d6000fd5b505050506040513d60208110156152dd57600080fd5b505161534d57826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561531c57600080fd5b505afa158015615330573d6000803e3d6000fd5b505050506040513d602081101561534657600080fd5b5051615350565b60005b6001600160a01b038082166000908152601a602052604090205491925016156153875761537f600a6016614b45565b915050611900565b6040805180820182526001808252600060208084018281526001600160a01b03898116808552601484528785209651875460ff19169015151787559151958501959095556015805494850190557f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47590930180546001600160a01b031990811685179091559386168252601a81529084902080549093168217909255825190815291517fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f9281900390910190a160006121c7565b6001600160a01b03831660009081526014602052604081205460ff16615481576009611e4c565b6001600160a01b038085166000908152601460209081526040808320938716835260029093019052205460ff166154b9576000611e4c565b6000806154c98587866000614bba565b919350909150600090508260158111156154df57fe5b146154f9578160158111156154f057fe5b925050506121c7565b801561381b5760046154f0565b60005b6025548110156124a0576025818154811061552057fe5b600091825260208220015460408051634e081c9560e01b81526001600160a01b0388811660048301528781166024830152868116604483015291519190921692634e081c95926064808201939182900301818387803b15801561558257600080fd5b505af1158015615596573d6000803e3d6000fd5b5050600190920191506155099050565b6001600160a01b0382166000908152601460205260408120805460ff166155d15760099150506114a9565b6001600160a01b038316600090815260028201602052604090205460ff161515600114156156035760009150506114a9565b6001600160a01b03838116600081815260028401602090815260408083208054600160ff199091168117909155601383528184208054918201815584528284200180546001600160a01b031916958a16959095179094559181526016909152205460ff166156e45760178054600180820183557fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1590910180546001600160a01b0319166001600160a01b0387169081179091556000908152601660209081526040808320805460ff1916909417909355925460189093522060001990910190555b604080516001600160a01b0380871682528516602082015281517f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5929181900390910190a15060009392505050565b61573b615b1e565b6040518060200160405280670de0b6b3a764000061576186600001518660000151615992565b8161576857fe5b0490529392505050565b61577a615b1e565b60405180602001604052806157a561579e8660000151670de0b6b3a7640000615992565b85516159d4565b90529392505050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08460158111156157dd57fe5b84601b8111156157e957fe5b604080519283526020830191909152818101859052519081900360600190a183601581111561177757fe5b600061581e615b1e565b61582885856158fa565b90506121c36158368261591b565b84614ef3565b600083830182858210156158ce5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561589357818101518382015260200161587b565b50505050905090810190601f1680156158c05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50949350505050565b6000808383116158ee575060009050818303614f97565b50600390506000614f97565b615902615b1e565b60405180602001604052806157a5856000015185615992565b51670de0b6b3a7640000900490565b6000615934615b1e565b600080615945866000015186615a07565b9092509050600082600381111561595857fe5b1461597757506040805160208101909152600081529092509050614f97565b60408051602081019091529081526000969095509350505050565b60006121c783836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250615a46565b60006121c783836040518060400160405280600e81526020016d646976696465206279207a65726f60901b815250615abc565b60008083615a1a57506000905080614f97565b83830283858281615a2757fe5b0414615a3b57506002915060009050614f97565b600092509050614f97565b6000831580615a53575082155b15615a60575060006121c7565b83830283858281615a6d57fe5b041483906158ce5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561589357818101518382015260200161587b565b60008183615b0b5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561589357818101518382015260200161587b565b50828481615b1557fe5b04949350505050565b6040518060200160405280600081525090565b81548183558181111561255e5760008381526020902061255e918101908301615bbf565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001615b93615b1e565b8152602001615ba0615b1e565b8152602001615bad615b1e565b8152602001615bba615b1e565b905290565b611a9e91905b80821115615bd95760008155600101615bc5565b509056fe526577617264734469737472696275746f7220636f6e747261637420616c726561647920616464656463616e6e6f742070617573652061206d61726b65742074686174206973206e6f74206c697374656443616e206e6f74207265706179206d6f7265207468616e2074686520746f74616c20626f72726f77436f6d7074726f6c6c65723a5f61667465724e6f6e5265656e7472616e743a2063616c6c6572206e6f74206c6973746564206173206d61726b65746f6e6c7920706175736520677561726469616e20616e642061646d696e2063616e2070617573656f6e6c792061646d696e2063616e2073657420626f72726f772063617020677561726469616e6f6e6c7920696d706c656d656e746174696f6e206d61792063616c6c205f6265636f6d65496d706c656d656e746174696f6e436f6d7074726f6c6c65723a5f6265666f72654e6f6e5265656e7472616e743a2063616c6c6572206e6f74206c6973746564206173206d61726b65746f6e6c792061646d696e206f7220626f72726f772063617020677561726469616e2063616e2073657420626f72726f772063617073657869744d61726b65743a206765744163636f756e74536e617073686f74206661696c65646f6e6c792061646d696e206f7220626f72726f772063617020677561726469616e2063616e2073657420737570706c79206361707343616e6e6f7420737570706f72742061206d61726b65742077697468206120646966666572656e7420436f6d7074726f6c6c65722e6f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676520627261696e73a265627a7a723158206f29da39703b0c540e93c507f9304fe41ae1ea94f118487a879088722223371f64736f6c63430005110032",
  "devdoc": {
    "author": "Compound",
    "details": "This contract should not to be deployed alone; instead, deploy `Unitroller` (proxy contract) on top of this `Comptroller` (logic/implementation contract).",
    "methods": {
      "_addRewardsDistributor(address)": {
        "details": "Admin function to add a RewardsDistributor contract",
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_afterNonReentrant()": {
        "details": "Called by cTokens after a non-reentrant function for pool-wide reentrancy prevention. Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream."
      },
      "_beforeNonReentrant()": {
        "details": "Called by cTokens before a non-reentrant function for pool-wide reentrancy prevention. Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream."
      },
      "_deployMarket(bool,bytes,uint256)": {
        "details": "Admin function to deploy cToken, set isListed, and add support for the market and set the collateral factor",
        "return": "uint 0=success, otherwise a failure. (See enum Error for details)"
      },
      "_setBorrowCapGuardian(address)": {
        "params": {
          "newBorrowCapGuardian": "The address of the new Borrow Cap Guardian"
        }
      },
      "_setCloseFactor(uint256)": {
        "details": "Admin function to set closeFactor",
        "params": {
          "newCloseFactorMantissa": "New close factor, scaled by 1e18"
        },
        "return": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
      },
      "_setCollateralFactor(address,uint256)": {
        "details": "Admin function to set per-market collateralFactor",
        "params": {
          "cToken": "The market to set the factor on",
          "newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18"
        },
        "return": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
      },
      "_setLiquidationIncentive(uint256)": {
        "details": "Admin function to set liquidationIncentive",
        "params": {
          "newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18"
        },
        "return": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "details": "Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.",
        "params": {
          "cTokens": "The addresses of the markets (tokens) to change the borrow caps for",
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing."
        }
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "details": "Admin or borrowCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.",
        "params": {
          "cTokens": "The addresses of the markets (tokens) to change the supply caps for",
          "newSupplyCaps": "The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying."
        }
      },
      "_setPauseGuardian(address)": {
        "params": {
          "newPauseGuardian": "The address of the new Pause Guardian"
        },
        "return": "uint 0=success, otherwise a failure. (See enum Error for details)"
      },
      "_setPriceOracle(address)": {
        "details": "Admin function to set a new price oracle",
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_setWhitelistEnforcement(bool)": {
        "details": "Admin function to set a new whitelist enforcement boolean",
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_setWhitelistStatuses(address[],bool[])": {
        "details": "Admin function to set the whitelist `statuses` for `suppliers`",
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "_toggleAutoImplementations(bool)": {
        "params": {
          "enabled": "If the feature is to be enabled"
        },
        "return": "uint 0=success, otherwise a failure. (See enum Error for details)"
      },
      "_unsupportMarket(address)": {
        "details": "Admin function unset isListed and collateralFactorMantissa and unadd support for the market",
        "params": {
          "cToken": "The address of the market (token) to unlist"
        },
        "return": "uint 0=success, otherwise a failure. (See enum Error for details)"
      },
      "borrowAllowed(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of underlying the account would borrow",
          "borrower": "The account which would borrow the asset",
          "cToken": "The market to verify the borrow against"
        },
        "return": "0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      },
      "borrowVerify(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of the underlying asset requested to borrow",
          "borrower": "The address borrowing the underlying",
          "cToken": "Asset whose underlying is being borrowed"
        }
      },
      "borrowWithinLimits(address,uint256)": {
        "params": {
          "accountBorrowsNew": "The user's new borrow balance of the underlying asset",
          "cToken": "Asset whose underlying is being borrowed"
        }
      },
      "checkMembership(address,address)": {
        "params": {
          "account": "The address of the account to check",
          "cToken": "The cToken to check"
        },
        "return": "True if the account is in the asset, otherwise false."
      },
      "enterMarkets(address[])": {
        "params": {
          "cTokens": "The list of addresses of the cToken markets to be enabled"
        },
        "return": "Success indicator for whether each corresponding market was entered"
      },
      "exitMarket(address)": {
        "details": "Sender must not have an outstanding borrow balance in the asset, or be providing neccessary collateral for an outstanding borrow.",
        "params": {
          "cTokenAddress": "The address of the asset to be removed"
        },
        "return": "Whether or not the account successfully exited the market"
      },
      "getAccountLiquidity(address)": {
        "return": "(possible error code (semi-opaque), account liquidity in excess of collateral requirements,         account shortfall below collateral requirements)"
      },
      "getAllBorrowers()": {
        "details": "The automatic getter may be used to access an individual borrower.",
        "return": "The list of borrower account addresses"
      },
      "getAllMarkets()": {
        "details": "The automatic getter may be used to access an individual market.",
        "return": "The list of market addresses"
      },
      "getAssetsIn(address)": {
        "params": {
          "account": "The address of the account to pull assets for"
        },
        "return": "A dynamic list with the assets the account has entered"
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "params": {
          "account": "The account to determine liquidity for",
          "borrowAmount": "The amount of underlying to hypothetically borrow",
          "cTokenModify": "The market to hypothetically redeem/borrow in",
          "redeemTokens": "The number of tokens to hypothetically redeem"
        },
        "return": "(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,         hypothetical account shortfall below collateral requirements)"
      },
      "getWhitelist()": {
        "details": "The automatic getter may be used to access an individual whitelist status.",
        "return": "The list of borrower account addresses"
      },
      "isDeprecated(address)": {
        "details": "All borrows in a deprecated cToken market can be immediately liquidated",
        "params": {
          "cToken": "The market to check if deprecated"
        }
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "repayAmount": "The amount of underlying being repaid"
        }
      },
      "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
        "params": {
          "actualRepayAmount": "The amount of underlying being repaid",
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral"
        }
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "details": "Used in liquidation (called in cToken.liquidateBorrowFresh)",
        "params": {
          "actualRepayAmount": "The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens",
          "cTokenBorrowed": "The address of the borrowed cToken",
          "cTokenCollateral": "The address of the collateral cToken"
        },
        "return": "(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)"
      },
      "mintAllowed(address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the mint against",
          "mintAmount": "The amount of underlying being supplied to the market in exchange for tokens",
          "minter": "The account which would get the minted tokens"
        },
        "return": "0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      },
      "mintVerify(address,address,uint256,uint256)": {
        "params": {
          "actualMintAmount": "The amount of the underlying asset being minted",
          "cToken": "Asset being minted",
          "mintTokens": "The number of tokens being minted",
          "minter": "The address minting the tokens"
        }
      },
      "mintWithinLimits(address,uint256,uint256,uint256)": {
        "params": {
          "accountTokens": "Underlying amount to mint",
          "cToken": "Asset whose underlying is being borrowed",
          "exchangeRateMantissa": "Underlying/cToken exchange rate"
        }
      },
      "redeemAllowed(address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the redeem against",
          "redeemTokens": "The number of cTokens to exchange for the underlying asset in the market",
          "redeemer": "The account which would redeem the tokens"
        },
        "return": "0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "params": {
          "cToken": "Asset being redeemed",
          "redeemAmount": "The amount of the underlying asset being redeemed",
          "redeemTokens": "The number of tokens being redeemed",
          "redeemer": "The address redeeming the tokens"
        }
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "params": {
          "borrower": "The account which would borrowed the asset",
          "cToken": "The market to verify the repay against",
          "payer": "The account which would repay the asset",
          "repayAmount": "The amount of the underlying asset the account would repay"
        },
        "return": "0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      },
      "repayBorrowVerify(address,address,address,uint256,uint256)": {
        "params": {
          "actualRepayAmount": "The amount of underlying being repaid",
          "borrower": "The address of the borrower",
          "cToken": "Asset being repaid",
          "payer": "The address repaying the borrow"
        }
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize"
        }
      },
      "seizeVerify(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize"
        }
      },
      "transferAllowed(address,address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the transfer against",
          "dst": "The account which receives the tokens",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of cTokens to transfer"
        },
        "return": "0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
      },
      "transferVerify(address,address,address,uint256)": {
        "params": {
          "cToken": "Asset being transferred",
          "dst": "The account which receives the tokens",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of cTokens to transfer"
        }
      }
    },
    "title": "Compound's Comptroller Contract"
  },
  "userdoc": {
    "methods": {
      "_addRewardsDistributor(address)": {
        "notice": "Add a RewardsDistributor contracts."
      },
      "_deployMarket(bool,bytes,uint256)": {
        "notice": "Deploy cToken, add the market to the markets mapping, and set it as listed and set the collateral factor"
      },
      "_setBorrowCapGuardian(address)": {
        "notice": "Admin function to change the Borrow Cap Guardian"
      },
      "_setCloseFactor(uint256)": {
        "notice": "Sets the closeFactor used when liquidating borrows"
      },
      "_setCollateralFactor(address,uint256)": {
        "notice": "Sets the collateralFactor for a market"
      },
      "_setGlobalPauseBorrowOverride(bool)": {
        "notice": "Sets the global pause borrows override"
      },
      "_setLiquidationIncentive(uint256)": {
        "notice": "Sets liquidationIncentive"
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert."
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "notice": "Set the given supply caps for the given cToken markets. Supplying that brings total underlying supply to or above supply cap will revert."
      },
      "_setPauseGuardian(address)": {
        "notice": "Admin function to change the Pause Guardian"
      },
      "_setPriceOracle(address)": {
        "notice": "Sets a new price oracle for the comptroller"
      },
      "_setWhitelistEnforcement(bool)": {
        "notice": "Sets the whitelist enforcement for the comptroller"
      },
      "_setWhitelistStatuses(address[],bool[])": {
        "notice": "Sets the whitelist `statuses` for `suppliers`"
      },
      "_toggleAutoImplementations(bool)": {
        "notice": "Toggles the auto-implementation feature"
      },
      "_unsupportMarket(address)": {
        "notice": "Removed a market from the markets mapping and sets it as unlisted"
      },
      "borrowAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
      },
      "borrowVerify(address,address,uint256)": {
        "notice": "Validates borrow and reverts on rejection. May emit logs."
      },
      "borrowWithinLimits(address,uint256)": {
        "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
      },
      "checkMembership(address,address)": {
        "notice": "Returns whether the given account is entered in the given asset"
      },
      "enterMarkets(address[])": {
        "notice": "Add assets to be included in account liquidity calculation"
      },
      "exitMarket(address)": {
        "notice": "Removes asset from sender's account liquidity calculation"
      },
      "getAccountLiquidity(address)": {
        "notice": "Determine the current account liquidity wrt collateral requirements"
      },
      "getAllBorrowers()": {
        "notice": "Return all of the borrowers"
      },
      "getAllMarkets()": {
        "notice": "Return all of the markets"
      },
      "getAssetsIn(address)": {
        "notice": "Returns the assets an account has entered"
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "notice": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed"
      },
      "getRewardsDistributors()": {
        "notice": "Returns an array of all RewardsDistributors"
      },
      "getWhitelist()": {
        "notice": "Return all of the whitelist"
      },
      "isDeprecated(address)": {
        "notice": "Returns true if the given cToken market has been deprecated"
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the liquidation should be allowed to occur"
      },
      "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
        "notice": "Validates liquidateBorrow and reverts on rejection. May emit logs."
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "notice": "Calculate number of tokens of collateral asset to seize given an underlying amount"
      },
      "mintAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to mint tokens in the given market"
      },
      "mintVerify(address,address,uint256,uint256)": {
        "notice": "Validates mint and reverts on rejection. May emit logs."
      },
      "mintWithinLimits(address,uint256,uint256,uint256)": {
        "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
      },
      "redeemAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to redeem tokens in the given market"
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "notice": "Validates redeem and reverts on rejection. May emit logs."
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to repay a borrow in the given market"
      },
      "repayBorrowVerify(address,address,address,uint256,uint256)": {
        "notice": "Validates repayBorrow and reverts on rejection. May emit logs."
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the seizing of assets should be allowed to occur"
      },
      "seizeVerify(address,address,address,address,uint256)": {
        "notice": "Validates seize and reverts on rejection. May emit logs."
      },
      "transferAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to transfer tokens in the given market"
      },
      "transferVerify(address,address,address,uint256)": {
        "notice": "Validates transfer and reverts on rejection. May emit logs."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13228,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "fuseAdmin",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFuseFeeDistributor)15573"
      },
      {
        "astId": 13230,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13232,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13235,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "fuseAdminHasRights",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 13238,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "adminHasRights",
        "offset": 21,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 13264,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "comptrollerImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 13266,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "pendingComptrollerImplementation",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 13270,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "__gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)10_storage"
      },
      {
        "astId": 13278,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "oracle",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(PriceOracle)15977"
      },
      {
        "astId": 13280,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "closeFactorMantissa",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 13282,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "liquidationIncentiveMantissa",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 13284,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "maxAssets",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 13289,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "accountAssets",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_array(t_contract(CToken)6395)dyn_storage)"
      },
      {
        "astId": 13305,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "markets",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_struct(Market)13301_storage)"
      },
      {
        "astId": 13308,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "allMarkets",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_contract(CToken)6395)dyn_storage"
      },
      {
        "astId": 13312,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "borrowers",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13315,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "allBorrowers",
        "offset": 0,
        "slot": "23",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 13319,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "borrowerIndexes",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13323,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "suppliers",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13327,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "cTokensByUnderlying",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_contract(CToken)6395)"
      },
      {
        "astId": 13329,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "enforceWhitelist",
        "offset": 0,
        "slot": "27",
        "type": "t_bool"
      },
      {
        "astId": 13333,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "whitelist",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13336,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "whitelistArray",
        "offset": 0,
        "slot": "29",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 13340,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "whitelistIndexes",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13342,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "pauseGuardian",
        "offset": 0,
        "slot": "31",
        "type": "t_address"
      },
      {
        "astId": 13344,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "_mintGuardianPaused",
        "offset": 20,
        "slot": "31",
        "type": "t_bool"
      },
      {
        "astId": 13346,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "_borrowGuardianPaused",
        "offset": 21,
        "slot": "31",
        "type": "t_bool"
      },
      {
        "astId": 13348,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "transferGuardianPaused",
        "offset": 22,
        "slot": "31",
        "type": "t_bool"
      },
      {
        "astId": 13350,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "seizeGuardianPaused",
        "offset": 23,
        "slot": "31",
        "type": "t_bool"
      },
      {
        "astId": 13354,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "mintGuardianPaused",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13358,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "borrowGuardianPaused",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13363,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "autoImplementation",
        "offset": 0,
        "slot": "34",
        "type": "t_bool"
      },
      {
        "astId": 13365,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "borrowCapGuardian",
        "offset": 1,
        "slot": "34",
        "type": "t_address"
      },
      {
        "astId": 13369,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "borrowCaps",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13373,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "supplyCaps",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13376,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "rewardsDistributors",
        "offset": 0,
        "slot": "37",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 13378,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "_notEntered",
        "offset": 0,
        "slot": "38",
        "type": "t_bool"
      },
      {
        "astId": 13380,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "_notEnteredInitialized",
        "offset": 1,
        "slot": "38",
        "type": "t_bool"
      },
      {
        "astId": 13385,
        "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
        "label": "_globalPauseBorrowOverride",
        "offset": 2,
        "slot": "38",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(CToken)6395)dyn_storage": {
        "base": "t_contract(CToken)6395",
        "encoding": "dynamic_array",
        "label": "contract CToken[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CToken)6395": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(IFuseFeeDistributor)15573": {
        "encoding": "inplace",
        "label": "contract IFuseFeeDistributor",
        "numberOfBytes": "20"
      },
      "t_contract(PriceOracle)15977": {
        "encoding": "inplace",
        "label": "contract PriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(CToken)6395)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract CToken[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(CToken)6395)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(CToken)6395)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract CToken)",
        "numberOfBytes": "32",
        "value": "t_contract(CToken)6395"
      },
      "t_mapping(t_address,t_struct(Market)13301_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV2Storage.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)13301_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Market)13301_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV2Storage.Market",
        "members": [
          {
            "astId": 13294,
            "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13296,
            "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
            "label": "collateralFactorMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13300,
            "contract": "contracts/rari-fuse/src/core/Comptroller.sol:Comptroller",
            "label": "accountMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
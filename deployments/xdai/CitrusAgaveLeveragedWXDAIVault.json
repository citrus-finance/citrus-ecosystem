{
  "address": "0x4f6F3aAd9A82Bed611D74b2856200F52103Be9FE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract ILendingPool",
          "name": "_lendingPool",
          "type": "address"
        },
        {
          "internalType": "contract IAaveIncentivesController",
          "name": "_incentivesController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetsPerShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesToHarvester",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxCollateralRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxCollateralRatio",
          "type": "uint256"
        }
      ],
      "name": "MaxCollateralRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTargetCollateralRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTargetCollateralRatio",
          "type": "uint256"
        }
      ],
      "name": "TargetCollateralRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "excluded",
          "type": "bool"
        }
      ],
      "name": "UpdateFeeExclusion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "UpdateHarvestCallAuthorisation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "allowHarvestCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "exclude",
          "type": "bool"
        }
      ],
      "name": "excludeFromFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "excludedFromFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowedFromProtocol",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainingProtocolBorrowCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainingProtocolSupplyCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSuppliedToProtocol",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct HarvestCall[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "harvest",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "harvestCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "blockTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint224",
          "name": "assetsPerShare",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestCheckpointsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestable",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Harvestable[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "invertedHarvestCheckpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "assetsPerShare",
              "type": "uint224"
            }
          ],
          "internalType": "struct HarvestCheckpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "selectHarvestCheckpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "assetsPerShare",
              "type": "uint224"
            }
          ],
          "internalType": "struct HarvestCheckpoint[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "selectInvertedHarvestCheckpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "assetsPerShare",
              "type": "uint224"
            }
          ],
          "internalType": "struct HarvestCheckpoint[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTaker",
          "type": "address"
        }
      ],
      "name": "setFeeTaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_harvestFee",
          "type": "uint256"
        }
      ],
      "name": "setHarvestFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxCollateralRatio",
          "type": "uint256"
        }
      ],
      "name": "setMaxCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTargetCollateralRatio",
          "type": "uint256"
        }
      ],
      "name": "setTargetCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalFee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "diffTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "diffAssetsPerShare",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa484881128264c78b4424f6251bd4f45543311e67e471c11843ef3675b34612a",
  "receipt": {
    "to": null,
    "from": "0xEB52920BB44E2802Ebb7d91417991D7EC418EaAA",
    "contractAddress": "0x4f6F3aAd9A82Bed611D74b2856200F52103Be9FE",
    "transactionIndex": 1,
    "gasUsed": "3657982",
    "logsBloom": "0x00000000000000000000400008000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000010000220000000000000000000000000000100000000001000800000000000000000000000000000000020000000000000000002800000000000000000000000000000000400000000000000000000004000800000000000000000000000000000000000000020000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000010000000000100000000000000000000100000000000000000000020000000",
    "blockHash": "0xe092d208b39ac3c5902412ea84e1cda4968180bb33cd397fd1570166305f2074",
    "transactionHash": "0xa484881128264c78b4424f6251bd4f45543311e67e471c11843ef3675b34612a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 24235035,
        "transactionHash": "0xa484881128264c78b4424f6251bd4f45543311e67e471c11843ef3675b34612a",
        "address": "0x4f6F3aAd9A82Bed611D74b2856200F52103Be9FE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000eb52920bb44e2802ebb7d91417991d7ec418eaaa"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe092d208b39ac3c5902412ea84e1cda4968180bb33cd397fd1570166305f2074"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 24235035,
        "transactionHash": "0xa484881128264c78b4424f6251bd4f45543311e67e471c11843ef3675b34612a",
        "address": "0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004f6f3aad9a82bed611d74b2856200f52103be9fe",
          "0x0000000000000000000000005e15d5e33d318dced84bfe3f4eace07909be6d9c"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0xe092d208b39ac3c5902412ea84e1cda4968180bb33cd397fd1570166305f2074"
      }
    ],
    "blockNumber": 24235035,
    "cumulativeGasUsed": "3900189",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d",
    "Citrus Agave Leveraged WXDAI Vault",
    "clvagWXDAI",
    "0x5E15d5E33d318dCEd84Bfe3F4EACe07909bE6d9c",
    "0xfa255f5104f129B78f477e9a6D050a02f31A5D86"
  ],
  "numDeployments": 2,
  "solcInputHash": "f7b69ae8a59114c3bb7fd2d2b9bb8aab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract ILendingPool\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"contract IAaveIncentivesController\",\"name\":\"_incentivesController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetsPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesToHarvester\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxCollateralRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"MaxCollateralRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTargetCollateralRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTargetCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"TargetCollateralRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"UpdateFeeExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"UpdateHarvestCallAuthorisation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowHarvestCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowedFromProtocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingProtocolBorrowCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingProtocolSupplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuppliedToProtocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct HarvestCall[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"harvestCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"assetsPerShare\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestCheckpointsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestable\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Harvestable[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"invertedHarvestCheckpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"assetsPerShare\",\"type\":\"uint224\"}],\"internalType\":\"struct HarvestCheckpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"selectHarvestCheckpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"assetsPerShare\",\"type\":\"uint224\"}],\"internalType\":\"struct HarvestCheckpoint[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"selectInvertedHarvestCheckpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"assetsPerShare\",\"type\":\"uint224\"}],\"internalType\":\"struct HarvestCheckpoint[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTaker\",\"type\":\"address\"}],\"name\":\"setFeeTaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvestFee\",\"type\":\"uint256\"}],\"name\":\"setHarvestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"setMaxCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTargetCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"setTargetCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"diffTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"diffAssetsPerShare\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBorrowedFromProtocol()\":{\"returns\":{\"_0\":\"Assets borrowed\"}},\"getProtocolLiquidity()\":{\"details\":\"ignored on this version\",\"returns\":{\"_0\":\"liquidity The diff\"}},\"getRemainingProtocolBorrowCap()\":{\"details\":\"ignored on this versionshould return 0 if the borrow cap is exhausted\",\"returns\":{\"_0\":\"remainingBorrowCap\"}},\"getRemainingProtocolSupplyCap()\":{\"details\":\"ignored on this versionshould return 0 if the supply cap is exhausted\",\"returns\":{\"_0\":\"remainingSupplyCap\"}},\"getSuppliedToProtocol()\":{\"returns\":{\"_0\":\"Assets supplied\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"getBorrowedFromProtocol()\":{\"notice\":\"Get amount of assets borrowed from the protocol by the vault\"},\"getProtocolLiquidity()\":{\"notice\":\"Get liquidity availailable in the protocol\"},\"getRemainingProtocolBorrowCap()\":{\"notice\":\"Get remaining borrow cap in the protocol\"},\"getRemainingProtocolSupplyCap()\":{\"notice\":\"Get remaining supply cap in the protocol\"},\"getSuppliedToProtocol()\":{\"notice\":\"Get amount of assets supplied to the protocol by the vault\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/citrus-vaults/src/Aave2LeveragedVault.sol\":\"Aave2LeveragedVault\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363633343931393034393736\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/citrus-vaults/lib/BoringSolidity/contracts/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Simplified by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5c95af9d26812f279c232d8908c3e2e4ab5054ec1a76275589be4b40857a281c\",\"license\":\"MIT\"},\"contracts/citrus-vaults/lib/BoringSolidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\\n    // By removing them you can't accidentally use them.\\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IStrictERC20 {\\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3ab46c194bf6ebcb4ae1b094c7e41061ef651ee1150d1a07beaf9db085dee0ee\",\"license\":\"MIT\"},\"contracts/citrus-vaults/lib/solmate/src/mixins/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa404f6f45bd53f24a90cc5ffe95e16b52e3f2dfd88f0d7a1edcb35f815919a7b\",\"license\":\"AGPL-3.0-only\"},\"contracts/citrus-vaults/lib/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"contracts/citrus-vaults/lib/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9faabac0803e077fb8d8950f5e2fec1984d3e6cd6ad5fc144609b5c9de83d169\",\"license\":\"AGPL-3.0-only\"},\"contracts/citrus-vaults/lib/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x333b56bef66ff71e3838910781df214acbeb6c2d6ace27a04ebb510f0e669300\",\"license\":\"AGPL-3.0-only\"},\"contracts/citrus-vaults/src/Aave2LeveragedVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"../lib/BoringSolidity/contracts/interfaces/IERC20.sol\\\";\\n\\nimport \\\"./external/aave-v2/IAToken.sol\\\";\\nimport \\\"./external/aave-v2/ILendingPool.sol\\\";\\nimport \\\"./external/aave-v2/IAaveIncentivesController.sol\\\";\\n\\nimport \\\"./mixins/LeveragedLendingVault.sol\\\";\\n\\n\\ncontract Aave2LeveragedVault is LeveragedLendingVault {\\n    ILendingPool lendingPool;\\n    \\n    IAaveIncentivesController incentivesController;\\n\\n    IERC20 aToken;\\n    \\n    IERC20 debtToken;\\n    \\n    constructor(\\n        ERC20 asset,\\n        string memory name,\\n        string memory symbol,\\n        ILendingPool _lendingPool,\\n        IAaveIncentivesController _incentivesController\\n    ) LeveragedLendingVault(asset, name, symbol) {\\n        lendingPool = _lendingPool;\\n        incentivesController = _incentivesController;\\n\\n        DataTypes.ReserveData memory data = lendingPool.getReserveData(address(asset));\\n\\n        aToken = IERC20(data.aTokenAddress);\\n        debtToken = IERC20(data.variableDebtTokenAddress);\\n\\n        asset.approve(address(lendingPool), type(uint256).max);\\n    }\\n\\n    function getSuppliedToProtocol() public override view returns (uint256) {\\n        return aToken.balanceOf(address(this));\\n    }\\n\\n    function getBorrowedFromProtocol() public override view returns (uint256) {\\n        return debtToken.balanceOf(address(this));\\n    }\\n\\n    function supplyToProtocol(uint256 amount) internal override {\\n        lendingPool.deposit(address(asset), amount, address(this), 0);\\n    }\\n\\n    function redeemFromProtocol(uint256 amount) internal override {\\n        lendingPool.withdraw(address(asset), amount, address(this));\\n    }\\n\\n    function borrowFromProtocol(uint256 amount) internal override {\\n        lendingPool.borrow(address(asset), amount, 2, 0, address(this));\\n    }\\n\\n    function repayToProtocol(uint256 amount) internal override {\\n        lendingPool.repay(address(asset), amount, 2, address(this));\\n    }\\n\\n    function getProtocolLiquidity() public override view returns (uint256) {\\n        return aToken.totalSupply() - debtToken.totalSupply();\\n    }\\n\\n    function getRemainingProtocolSupplyCap() public override pure returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function getRemainingProtocolBorrowCap() public override pure returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function collectHarvest() internal override {\\n        address[] memory assets = new address[](2);\\n        assets[0] = address(aToken);\\n        assets[1] = address(debtToken);\\n\\n        incentivesController.claimRewards(\\n            assets,\\n            incentivesController.getRewardsBalance(assets, address(this)),\\n            address(this)\\n        );\\n    }\\n\\n    function harvestable() public override view returns (Harvestable[] memory) {\\n        address[] memory assets = new address[](2);\\n        assets[0] = address(aToken);\\n        assets[1] = address(debtToken);\\n\\n        address rewardToken = incentivesController.REWARD_TOKEN();\\n        uint256 amount = incentivesController.getRewardsBalance(assets, address(this));\\n\\n        Harvestable[] memory arr = new Harvestable[](1);\\n        arr[0] = Harvestable({\\n            token: rewardToken,\\n            amount: amount\\n        });\\n        return arr;\\n    }\\n}\\n\",\"keccak256\":\"0x48587852fe1a6a7b0f6fb71f6e5ee0052d22368a0a54c86d1ed015a2801cc381\",\"license\":\"MIT\"},\"contracts/citrus-vaults/src/external/aave-v2/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\",\"keccak256\":\"0x20b0a0d44a1967dff6321de9c8147e41598035b95883a06923e9b25d48e5a380\",\"license\":\"agpl-3.0\"},\"contracts/citrus-vaults/src/external/aave-v2/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IAaveIncentivesController.sol\\\";\\n\\ninterface IAToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param value The amount being\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed from, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints `amount` aTokens to `user`\\n   * @param user The address receiving the minted tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address user,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted after aTokens are burned\\n   * @param from The owner of the aTokens, getting them burned\\n   * @param target The address that will receive the underlying\\n   * @param value The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @param user The owner of the aTokens, getting them burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address user,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n   * assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   * @return The amount transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev Invoked to execute actions on the aToken side after a repayment.\\n   * @param user The user executing the repayment\\n   * @param amount The amount getting repaid\\n   **/\\n  function handleRepayment(address user, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the address of the incentives controller contract\\n   **/\\n  function getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\",\"keccak256\":\"0x510dc89bc50e59e61ce542c25e7e848de955d62dc4f8f08f693e0b9956d910f0\",\"license\":\"agpl-3.0\"},\"contracts/citrus-vaults/src/external/aave-v2/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\ninterface IAaveIncentivesController {\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /*\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function getAssetData(address asset)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /*\\n   * LEGACY **************************\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function assets(address asset)\\n    external\\n    view\\n    returns (\\n      uint128,\\n      uint128,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @param asset The asset to incentivize\\n   * @return the user index for the asset\\n   */\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function PRECISION() external view returns (uint8);\\n\\n  /**\\n   * @dev Gets the distribution end timestamp of the emissions\\n   */\\n  function DISTRIBUTION_END() external view returns (uint256);\\n}\",\"keccak256\":\"0x11c0b903229aee9e7d11a9dcc43b7b99d6e1c74bc99699d42f71db97e8df67ac\",\"license\":\"agpl-3.0\"},\"contracts/citrus-vaults/src/external/aave-v2/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from './DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\",\"keccak256\":\"0xe82bc9265df3a2a12d7acb6a1aef6eafbbc195c731a51d3c5bffbfd612a26fc2\",\"license\":\"agpl-3.0\"},\"contracts/citrus-vaults/src/external/aave-v2/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\",\"keccak256\":\"0x9ed2c9cf47ec8d8ecc0bf17082dd177ebd81866f63ce62a17fcb0ed2504ee31c\",\"license\":\"agpl-3.0\"},\"contracts/citrus-vaults/src/mixins/LeveragedLendingVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./Vault.sol\\\";\\n\\nabstract contract LeveragedLendingVault is Vault {\\n    uint256 targetCollateralRatio;\\n\\n    uint256 maxCollateralRatio;\\n\\n    event TargetCollateralRatioUpdated(uint256 oldTargetCollateralRatio, uint256 newTargetCollateralRatio);\\n\\n    event MaxCollateralRatioUpdated(uint256 oldMaxCollateralRatio, uint256 newMaxCollateralRatio);\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) Vault(_asset, _name, _symbol) {}\\n\\n    /////  Leverage logic  /////\\n\\n    function rebalance(uint256 amountToFreeUp, bool totalRampUp) internal {\\n        uint256 assetBalance = asset.balanceOf(address(this));\\n\\n        if (assetBalance > 0) {\\n            supplyToProtocol(assetBalance);\\n        }\\n\\n        uint256 borrowed = getBorrowedFromProtocol();\\n        uint256 supplied = getSuppliedToProtocol();\\n        uint256 targetBorrow =  FixedPointMathLib.mulDivDown(targetCollateralRatio, supplied - borrowed - amountToFreeUp, 1e18 - targetCollateralRatio);\\n\\n        if (borrowed < targetBorrow) {\\n            // ramp up\\n            while(borrowed * 1e18 < targetBorrow * 0.995e18) {\\n                uint256 toBorrow = targetBorrow - borrowed;\\n                uint256 maxBorrow = FixedPointMathLib.mulDivDown(supplied, maxCollateralRatio, 1e18) - borrowed;\\n\\n                if (toBorrow > maxBorrow) {\\n                    toBorrow = maxBorrow;\\n                }\\n\\n                borrowFromProtocol(toBorrow);\\n                supplyToProtocol(toBorrow);\\n\\n                if (!totalRampUp) {\\n                    break;\\n                }\\n\\n                borrowed = getBorrowedFromProtocol();\\n                supplied = getSuppliedToProtocol();\\n            }\\n        } else if (borrowed > targetBorrow) {\\n            // ramp down\\n            while(borrowed * 1e18 > targetBorrow * 1.005e18) {\\n                uint256 toRepay = borrowed - targetBorrow;\\n                uint256 maxRepay = FixedPointMathLib.mulDivDown(supplied, maxCollateralRatio, 1e18) - borrowed;\\n\\n                if (toRepay > maxRepay) {\\n                    toRepay = maxRepay;\\n                }\\n                \\n                redeemFromProtocol(toRepay);\\n                repayToProtocol(toRepay);\\n\\n                borrowed = getBorrowedFromProtocol();\\n                supplied = getSuppliedToProtocol();\\n            }\\n        }\\n\\n        if (amountToFreeUp > 0) {\\n            redeemFromProtocol(amountToFreeUp);\\n        }\\n    }\\n\\n    function rebalance() public {\\n        rebalance(0, true);\\n    }\\n\\n    /////  Vault hooks  /////\\n\\n    function onDeposit(uint256) internal override {\\n        rebalance(0, false);\\n    }\\n\\n    function onWithdraw(uint256 assets) internal override {\\n        rebalance(assets, false);\\n    }\\n\\n    function totalAssets() public view override returns (uint256) {\\n        return asset.balanceOf(address(this)) + getSuppliedToProtocol() - getBorrowedFromProtocol();\\n    }\\n\\n    function onHarvest() internal override {\\n        collectHarvest();\\n    }\\n\\n    function afterHarvest() internal override {\\n        rebalance(0, true);\\n    }\\n\\n    /////  Collateral ratios  /////\\n\\n    function setMaxCollateralRatio(uint256 newMaxCollateralRatio) public onlyManagerOrOwner {\\n        uint oldMaxCollateralRatio = maxCollateralRatio;\\n\\n        require(msg.sender == owner || newMaxCollateralRatio < oldMaxCollateralRatio, \\\"Only Owner can raise maxCollateralRatio\\\");\\n\\n        maxCollateralRatio = newMaxCollateralRatio;\\n        emit MaxCollateralRatioUpdated(oldMaxCollateralRatio, newMaxCollateralRatio);\\n    }\\n\\n    function setTargetCollateralRatio(uint256 newTargetCollateralRatio) public onlyManagerOrOwner {\\n        require(newTargetCollateralRatio < maxCollateralRatio, \\\"Cannot set targetCollateralRatio over maxCollateralRatio\\\");\\n        emit TargetCollateralRatioUpdated(targetCollateralRatio, newTargetCollateralRatio);\\n        targetCollateralRatio = newTargetCollateralRatio;\\n    }\\n\\n    /////  Hooks  /////\\n\\n    /**\\n     * @notice Get amount of assets supplied to the protocol by the vault\\n     * @return Assets supplied\\n     */\\n    function getSuppliedToProtocol() public virtual view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of assets borrowed from the protocol by the vault\\n     * @return Assets borrowed\\n     */\\n    function getBorrowedFromProtocol() public virtual view returns (uint256);\\n\\n    /**\\n     * @notice Supply assets to protocol\\n     * @param amount Assets to supply to the protocol\\n     */\\n    function supplyToProtocol(uint256 amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw assets from protocol\\n     * @param amount Assets to redeem from the protocol\\n     */\\n    function redeemFromProtocol(uint256 amount) internal virtual;\\n\\n    /**\\n     * @notice Borrow assets from protocol\\n     * @param amount Assets to borrow from the protocol\\n     */\\n    function borrowFromProtocol(uint256 amount) internal virtual;\\n\\n    /**\\n     * @notice Repay debt to protocol\\n     * @param amount Assets to repay to the protocol\\n     */\\n    function repayToProtocol(uint256 amount) internal virtual;\\n\\n    /**\\n     * @notice Get liquidity availailable in the protocol\\n     * @return liquidity The diff\\n     * @dev ignored on this version\\n     */\\n    function getProtocolLiquidity() public virtual view returns (uint256);\\n\\n    /**\\n     * @notice Get remaining supply cap in the protocol\\n     * @return remainingSupplyCap\\n     * @dev ignored on this version\\n     * @dev should return 0 if the supply cap is exhausted\\n     */\\n    function getRemainingProtocolSupplyCap() public virtual view returns (uint256);\\n\\n    /**\\n     * @notice Get remaining borrow cap in the protocol\\n     * @return remainingBorrowCap\\n     * @dev ignored on this version\\n     * @dev should return 0 if the borrow cap is exhausted\\n     */\\n    function getRemainingProtocolBorrowCap() public virtual view returns (uint256);\\n\\n    /**\\n     * @notice Colect rewards token from protocol\\n     */\\n    function collectHarvest() internal virtual {}\\n}\",\"keccak256\":\"0x10d2a21c90411ad02162405d22fb6df6899f4816ce9257a8dae2f417a59ad0fb\",\"license\":\"MIT\"},\"contracts/citrus-vaults/src/mixins/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"../../lib/solmate/src/mixins/ERC4626.sol\\\";\\nimport {FixedPointMathLib} from \\\"../../lib/solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport \\\"../../lib/BoringSolidity/contracts/BoringOwnable.sol\\\";\\n\\nstruct HarvestCall {\\n    address target;\\n    bytes callData;\\n}\\n\\nstruct Harvestable {\\n    address token;\\n    uint256 amount;\\n}\\n\\nstruct HarvestCheckpoint {\\n    // rolling block timestamp\\n    uint32 blockTimestamp;\\n\\n    // rolling amount of assets per share\\n    uint224 assetsPerShare;\\n}\\n\\nabstract contract Vault is ERC4626, BoringOwnable {\\n    using FixedPointMathLib for uint256;\\n\\n    event UpdateFeeExclusion(address user, bool excluded);\\n    event UpdateHarvestCallAuthorisation(address target, bytes4 sig, bool allowed);\\n    event Harvest(uint assetsPerShare, uint sharesToHarvester);\\n\\n    // @notice The manager is allowed to perform some privileged actions on the vault, \\n    address public manager;\\n\\n    // @notice This address receive all fees captured by this vault\\n    address public feeTaker;\\n\\n    // @notice Percentage the user has to pay to withdraw. 1e18 is 100%\\n    uint256 public withdrawalFee;\\n\\n    // @notice Harvesting generate . 1e18 is 100%\\n    uint256 public harvestFee;\\n\\n    HarvestCheckpoint[] public harvestCheckpoints;\\n\\n    mapping(address => bool) public excludedFromFees;\\n\\n    mapping(address=> mapping(bytes4 => bool)) harvesAllowedCalls;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC4626(_asset, _name, _symbol) {\\n        harvestCheckpoints.push(HarvestCheckpoint({\\n            blockTimestamp: uint32(block.timestamp),\\n            assetsPerShare: uint224(convertToAssets(10 ** decimals))\\n        }));\\n    }\\n\\n    /////  Harvest  /////\\n\\n    // modified version of: https://github.com/makerdao/multicall/blob/1e1b44362640820bef92d0ccf5eeee25d9b41474/src/Multicall.sol#L17-L25\\n    // @dev The caller could steal the harvest but should not be able to steal any of the deposited funds.\\n    // Stealing the harvest would result in bad PR and users withdrawing their funds without losing their principal.\\n    function harvest(HarvestCall[] memory calls) public virtual onlyManager returns (bytes[] memory returnData) {\\n        uint256 balanceBefore = totalAssets();\\n\\n        onHarvest();\\n\\n        returnData = new bytes[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            require(harvesAllowedCalls[calls[i].target][bytes4(calls[i].callData)], \\\"method not whitelisted\\\");\\n\\n            bool success;\\n            bytes memory ret;\\n\\n            (success, ret) = calls[i].target.delegatecall(calls[i].callData);\\n            \\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (ret.length < 68) revert();\\n                assembly {\\n                    ret := add(ret, 0x04)\\n                }\\n                revert(abi.decode(ret, (string)));\\n            }\\n\\n            returnData[i] = ret;\\n        }\\n\\n        uint256 balanceAfter = totalAssets();\\n\\n        require(balanceAfter >= balanceBefore, \\\"negative harvest\\\");\\n        uint256 diffBalance;\\n        unchecked {\\n          diffBalance = balanceAfter - balanceBefore;\\n        }\\n\\n        uint256 denom = balanceBefore + (diffBalance.mulDivUp(1e18 - harvestFee, 1e18));\\n        uint256 harveterShares = totalSupply.mulDivDown(balanceAfter, denom) - totalSupply;\\n\\n        _mint(feeTaker, harveterShares);\\n\\n        uint256 assetsPerShare = convertToAssets(10 ** decimals);\\n        harvestCheckpoints.push(HarvestCheckpoint({\\n            blockTimestamp: uint32(block.timestamp),\\n            assetsPerShare: uint224(assetsPerShare)\\n        }));\\n        emit Harvest(assetsPerShare, harveterShares);\\n\\n        afterHarvest();\\n    }\\n\\n    function allowHarvestCall(address target, bytes4 sig, bool allowed) public onlyOwner {\\n        harvesAllowedCalls[target][sig] = allowed;\\n        emit UpdateHarvestCallAuthorisation(target, sig, allowed);\\n    }\\n\\n    function increaseAllowance(ERC20 token, address spender) public onlyOwner returns (bool) {\\n        return token.approve(spender, type(uint256).max);\\n    }\\n\\n    /////  Checkpoints  /////\\n\\n    function harvestCheckpointsLength() public view returns (uint256) {\\n        return harvestCheckpoints.length;\\n    }\\n\\n    function invertedHarvestCheckpoints(uint256 index) public view returns (HarvestCheckpoint memory) {\\n        return harvestCheckpoints[harvestCheckpoints.length - 1 - index];\\n    }\\n\\n    function selectHarvestCheckpoints(uint256 start, uint256 end) public view returns (HarvestCheckpoint[] memory) {\\n        uint256 length = end - start + 1;\\n\\n        HarvestCheckpoint[] memory arr = new HarvestCheckpoint[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            arr[i] = harvestCheckpoints[start + i];\\n        }\\n        return arr;\\n    }\\n\\n    function selectInvertedHarvestCheckpoints(uint256 start, uint256 end) public view returns (HarvestCheckpoint[] memory) {\\n        uint256 length = end - start + 1;\\n        uint256 lastIndex = harvestCheckpoints.length - 1;\\n\\n        HarvestCheckpoint[] memory arr = new HarvestCheckpoint[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            arr[i] = harvestCheckpoints[lastIndex - i];\\n        }\\n        return arr;\\n    }\\n\\n    function yield() public view virtual returns (uint256 diffTimestamp, int256 diffAssetsPerShare) {\\n        uint lastHarvestCheckpointsIndex = harvestCheckpoints.length - 1;\\n\\n        if (lastHarvestCheckpointsIndex < 1) {\\n            return (1 days, 0);\\n        }\\n\\n        HarvestCheckpoint memory lastCheckpoint = harvestCheckpoints[lastHarvestCheckpointsIndex];\\n        HarvestCheckpoint memory beforeLastCheckpoint = harvestCheckpoints[lastHarvestCheckpointsIndex - 1];\\n\\n        unchecked { // timestamp is allowed to overflow\\n            diffTimestamp = lastCheckpoint.blockTimestamp - beforeLastCheckpoint.blockTimestamp;\\n        }\\n        diffAssetsPerShare = int256(((int224(lastCheckpoint.assetsPerShare) - int224(beforeLastCheckpoint.assetsPerShare)) * 1e18) / int224(beforeLastCheckpoint.assetsPerShare));\\n    }\\n\\n    /////  Admin  /////\\n\\n    function setManager(address _manager) public onlyOwner {\\n        manager = _manager;\\n    }\\n\\n    /////  Fees  /////\\n\\n    function excludeFromFees(address user, bool exclude) public onlyOwner {\\n        excludedFromFees[user] = exclude;\\n        emit UpdateFeeExclusion(user, exclude);\\n    }\\n\\n    function setFeeTaker(address _feeTaker) public onlyOwner {\\n        feeTaker = _feeTaker;\\n    }\\n\\n    function setWithdrawalFee(uint256 _withdrawalFee) public onlyOwner {\\n        withdrawalFee = _withdrawalFee;\\n    }\\n\\n    function setHarvestFee(uint256 _harvestFee) public onlyOwner {\\n        harvestFee = _harvestFee;\\n    }\\n\\n    /////  ERC4626 hooks  /////\\n\\n    function afterDeposit(uint256 assets, uint256) internal override {\\n        onDeposit(assets);\\n    }\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal override {\\n        if (!excludedFromFees[msg.sender]) {\\n            _mint(feeTaker, shares.mulDivDown(withdrawalFee, 1e18));\\n        }\\n        onWithdraw(assets);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view override returns (uint256) {\\n        uint256 _withdrawalFee = withdrawalFee;\\n\\n        if (excludedFromFees[msg.sender]) {\\n            _withdrawalFee = 0;\\n        } \\n\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        uint shares = supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n        return shares.mulDivUp(1e18, 1e18 - _withdrawalFee);\\n    }\\n\\n    function previewRedeem(uint256 shares) public view override returns (uint256) {\\n        uint256 _withdrawalFee = withdrawalFee;\\n\\n        if (excludedFromFees[msg.sender]) {\\n            _withdrawalFee = 0;\\n        } \\n\\n        return convertToAssets(shares).mulDivDown(1e18 - _withdrawalFee, 1e18);\\n    }\\n\\n    ///// Modifiers  /////\\n\\n    modifier onlyManager() {\\n        require(msg.sender == manager, \\\"Only manager is allowed to call\\\");\\n        _;\\n    }\\n\\n    modifier onlyManagerOrOwner() {\\n        require(msg.sender == manager || msg.sender == owner, \\\"Only manager or Owner is allowed to call\\\");\\n        _;\\n    }\\n\\n    /////  Hooks  /////\\n\\n    function onDeposit(uint256 assets) internal virtual {}\\n\\n    function onWithdraw(uint256 assets) internal virtual {}\\n\\n    function onHarvest() internal virtual {}\\n\\n    function afterHarvest() internal virtual {}\\n\\n    function harvestable() public virtual view returns (Harvestable[] memory);\\n}\",\"keccak256\":\"0x7e55bd57e11555ad866a6aba1f67c8245cd2d86b7ba9037b4b882c2388790d62\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103a45760003560e01c80638bc7e8c4116101e9578063ba0876521161010f578063d505accf116100ad578063dbf2c98d1161007c578063dbf2c98d1461083c578063dd62ed3e14610844578063e30c39781461086f578063ef8b30f71461088257600080fd5b8063d505accf146107c8578063d905777e146107db578063dbbd47d414610804578063dbe66ca01461081957600080fd5b8063c63d75b6116100e9578063c63d75b61461055a578063c6e6f5921461078f578063ce96cb77146107a2578063d0ebdbe7146107b557600080fd5b8063ba08765214610756578063badd252614610769578063c02466681461077c57600080fd5b8063a9059cbb11610187578063b45bb10d11610156578063b45bb10d146106ff578063b460af941461071a578063b4adc4231461072d578063b59629171461074d57600080fd5b8063a9059cbb146106d9578063ac1e5025146106ec578063b0f58c61146106ff578063b3d7f6b91461070757600080fd5b806391b5fd5f116101c357806391b5fd5f146106ae57806394bf804d146106b657806395d89b41146106c9578063a0807ae1146106d157600080fd5b80638bc7e8c4146106725780638da5cb5b1461067b578063918195c51461068e57600080fd5b8063402d267d116102ce57806367a4c9441161026c578063749f10441161023b578063749f104414610624578063792b55b6146106375780637d7c2a1c1461064a5780637ecebe001461065257600080fd5b806367a4c944146105d65780636e553f65146105e957806370a08231146105fc578063725fd9201461061c57600080fd5b80634cdad506116102a85780634cdad506146105955780634e71e0c8146105a85780634ec5908d146105b057806367a263c8146105c357600080fd5b8063402d267d1461055a57806348023e261461056f578063481c6a751461058257600080fd5b806323b872dd11610346578063380e7e4211610315578063380e7e42146104b157806338d52e0f146104c457806338dbd5651461050357806339bad3dd1461052357600080fd5b806323b872dd146104405780632859398414610453578063313ce567146104705780633644e515146104a957600080fd5b806307a2d13a1161038257806307a2d13a146103ee578063095ea7b3146104015780630a28a4771461042457806318160ddd1461043757600080fd5b806301e1d114146103a957806306fdde03146103c4578063078dfbe7146103d9575b600080fd5b6103b1610895565b6040519081526020015b60405180910390f35b6103cc610948565b6040516103bb9190612ed1565b6103ec6103e7366004612f07565b6109d6565b005b6103b16103fc366004612f52565b610aef565b61041461040f366004612f6b565b610b1c565b60405190151581526020016103bb565b6103b1610432366004612f52565b610b89565b6103b160025481565b61041461044e366004612f97565b610bfa565b61045b610cda565b604080519283526020830191909152016103bb565b6104977f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016103bb565b6103b1610def565b6104146104bf366004612fd8565b610e45565b6104eb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016103bb565b610516610511366004613011565b610ee6565b6040516103bb9190613033565b610536610531366004612f52565b610ffe565b6040805163ffffffff90931683526001600160e01b039091166020830152016103bb565b6103b1610568366004613099565b5060001990565b61051661057d366004613011565b611036565b6008546104eb906001600160a01b031681565b6103b16105a3366004612f52565b611164565b6103ec6111b4565b6103ec6105be366004613099565b611272565b6103ec6105d13660046130b6565b6112be565b6103ec6105e4366004612f52565b611369565b6103b16105f73660046130f3565b611460565b6103b161060a366004613099565b60036020526000908152604090205481565b6103b161153a565b6009546104eb906001600160a01b031681565b6103ec610645366004612f52565b6115a8565b6103ec6115d7565b6103b1610660366004613099565b60056020526000908152604090205481565b6103b1600a5481565b6006546104eb906001600160a01b031681565b6106a161069c366004612f52565b6115e5565b6040516103bb9190613118565b6103b1611663565b6103b16106c43660046130f3565b611748565b6103cc6117e4565b600c546103b1565b6104146106e7366004612f6b565b6117f1565b6103ec6106fa366004612f52565b611857565b6000196103b1565b6103b1610715366004612f52565b611886565b6103b161072836600461313e565b6118a5565b61074061073b36600461320d565b6119b3565b6040516103bb919061335b565b6103b1600b5481565b6103b161076436600461313e565b611e16565b6103ec610777366004612f52565b611f62565b6103ec61078a3660046133bd565b61205b565b6103b161079d366004612f52565b6120e1565b6103b16107b0366004613099565b612101565b6103ec6107c3366004613099565b612123565b6103ec6107d63660046133eb565b61216f565b6103b16107e9366004613099565b6001600160a01b031660009081526003602052604090205490565b61080c6123b3565b6040516103bb9190613462565b610414610827366004613099565b600d6020526000908152604090205460ff1681565b6103b16125a8565b6103b1610852366004612fd8565b600460209081526000928352604080842090915290825290205481565b6007546104eb906001600160a01b031681565b6103b1610890366004612f52565b6125d9565b600061089f6125a8565b6108a761153a565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f91906134ad565b61093991906134dc565b61094391906134f4565b905090565b600080546109559061350b565b80601f01602080910402602001604051908101604052809291908181526020018280546109819061350b565b80156109ce5780601f106109a3576101008083540402835291602001916109ce565b820191906000526020600020905b8154815290600101906020018083116109b157829003601f168201915b505050505081565b6006546001600160a01b03163314610a095760405162461bcd60e51b8152600401610a0090613545565b60405180910390fd5b8115610acd576001600160a01b038316151580610a235750805b610a675760405162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b6044820152606401610a00565b6006546040516001600160a01b038086169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0385166001600160a01b031991821617909155600780549091169055505050565b600780546001600160a01b0385166001600160a01b0319909116179055505050565b6002546000908015610b1357610b0e610b06610895565b8490836125e4565b610b15565b825b9392505050565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b779086815260200190565b60405180910390a35060015b92915050565b600a54336000908152600d602052604081205490919060ff1615610bab575060005b60025460008115610bcf57610bca82610bc2610895565b879190612603565b610bd1565b845b9050610bf1670de0b6b3a7640000610be985826134f4565b839190612603565b95945050505050565b6001600160a01b03831660009081526004602090815260408083203384529091528120546000198114610c5657610c3183826134f4565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b03851660009081526003602052604081208054859290610c7e9084906134f4565b90915550506001600160a01b0380851660008181526003602052604090819020805487019055519091871690600080516020613a6f83398151915290610cc79087815260200190565b60405180910390a3506001949350505050565b60008060006001600c80549050610cf191906134f4565b90506001811015610d0a57506201518092600092509050565b6000600c8281548110610d1f57610d1f61357a565b600091825260208083206040805180820190915292015463ffffffff81168352600160201b90046001600160e01b0316908201529150600c610d626001856134f4565b81548110610d7257610d7261357a565b60009182526020918290206040805180820190915291015463ffffffff808216808452600160201b9092046001600160e01b031683850181905286519487015192909403169750909250610dc7908290613590565b610dd990670de0b6b3a76400006135e0565b610de39190613674565b601b0b93505050509091565b60007f00000000000000000000000000000000000000000000000000000000000000004614610e2057610943612631565b507f000000000000000000000000000000000000000000000000000000000000000090565b6006546000906001600160a01b03163314610e725760405162461bcd60e51b8152600401610a0090613545565b60405163095ea7b360e01b81526001600160a01b038381166004830152600019602483015284169063095ea7b3906044016020604051808303816000875af1158015610ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1591906136c0565b60606000610ef484846134f4565b610eff9060016134dc565b905060008167ffffffffffffffff811115610f1c57610f1c613175565b604051908082528060200260200182016040528015610f6157816020015b6040805180820190915260008082526020820152815260200190600190039081610f3a5790505b50905060005b82811015610ff557600c610f7b82886134dc565b81548110610f8b57610f8b61357a565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091528251839083908110610fd757610fd761357a565b60200260200101819052508080610fed906136dd565b915050610f67565b50949350505050565b600c818154811061100e57600080fd5b60009182526020909120015463ffffffff81169150600160201b90046001600160e01b031682565b6060600061104484846134f4565b61104f9060016134dc565b600c54909150600090611064906001906134f4565b905060008267ffffffffffffffff81111561108157611081613175565b6040519080825280602002602001820160405280156110c657816020015b604080518082019091526000808252602082015281526020019060019003908161109f5790505b50905060005b8381101561115a57600c6110e082856134f4565b815481106110f0576110f061357a565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b031691810191909152825183908390811061113c5761113c61357a565b60200260200101819052508080611152906136dd565b9150506110cc565b5095945050505050565b600a54336000908152600d602052604081205490919060ff1615611186575060005b610b1561119b82670de0b6b3a76400006134f4565b670de0b6b3a76400006111ad86610aef565b91906125e4565b6007546001600160a01b031633811461120f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e65726044820152606401610a00565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b039092166001600160a01b0319928316179055600780549091169055565b6006546001600160a01b0316331461129c5760405162461bcd60e51b8152600401610a0090613545565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031633146112e85760405162461bcd60e51b8152600401610a0090613545565b6001600160a01b0383166000818152600e602090815260408083206001600160e01b0319871680855290835292819020805460ff1916861515908117909155815194855291840192909252908201527fbd1eab6fc1cf76a15aec1801ee37ce6203b3790fc066de31c3373fb993d7a2919060600160405180910390a1505050565b6008546001600160a01b031633148061138c57506006546001600160a01b031633145b6113a85760405162461bcd60e51b8152600401610a00906136f6565b601054811061141f5760405162461bcd60e51b815260206004820152603860248201527f43616e6e6f742073657420746172676574436f6c6c61746572616c526174696f60448201527f206f766572206d6178436f6c6c61746572616c526174696f00000000000000006064820152608401610a00565b600f5460408051918252602082018390527f44b56064048acd7afec122889cc6faae3494866375d78c6b4b532f024718589f910160405180910390a1600f55565b600061146b836125d9565b9050806000036114ab5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b6044820152606401610a00565b6114e06001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330866126cb565b6114ea8282612755565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610b8383826127af565b6013546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024015b602060405180830381865afa158015611584573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094391906134ad565b6006546001600160a01b031633146115d25760405162461bcd60e51b8152600401610a0090613545565b600b55565b6115e3600060016127bc565b565b6040805180820190915260008082526020820152600c8054839061160b906001906134f4565b61161591906134f4565b815481106116255761162561357a565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b03169181019190915292915050565b601454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156116ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d191906134ad565b601360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611724573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093991906134ad565b600061175383611886565b905061178a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330846126cb565b6117948284612755565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610b8381846127af565b600180546109559061350b565b336000908152600360205260408120805483919083906118129084906134f4565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020613a6f83398151915290610b779086815260200190565b6006546001600160a01b031633146118815760405162461bcd60e51b8152600401610a0090613545565b600a55565b6002546000908015610b1357610b0e61189d610895565b849083612603565b60006118b084610b89565b9050336001600160a01b03831614611920576001600160a01b0382166000908152600460209081526040808320338452909152902054600019811461191e576118f982826134f4565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b61192a8482612a0f565b6119348282612a5c565b60408051858152602081018390526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610b156001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612abe565b6008546060906001600160a01b03163314611a105760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c79206d616e6167657220697320616c6c6f77656420746f2063616c6c006044820152606401610a00565b6000611a1a610895565b9050611a24612b3c565b825167ffffffffffffffff811115611a3e57611a3e613175565b604051908082528060200260200182016040528015611a7157816020015b6060815260200190600190039081611a5c5790505b50915060005b8351811015611c6457600e6000858381518110611a9657611a9661357a565b6020026020010151600001516001600160a01b03166001600160a01b031681526020019081526020016000206000858381518110611ad657611ad661357a565b602002602001015160200151611aeb9061373e565b6001600160e01b031916815260208101919091526040016000205460ff16611b4e5760405162461bcd60e51b81526020600482015260166024820152751b595d1a1bd9081b9bdd081dda1a5d195b1a5cdd195960521b6044820152606401610a00565b60006060858381518110611b6457611b6461357a565b6020026020010151600001516001600160a01b0316868481518110611b8b57611b8b61357a565b602002602001015160200151604051611ba49190613775565b600060405180830381855af49150503d8060008114611bdf576040519150601f19603f3d011682016040523d82523d6000602084013e611be4565b606091505b50909250905081611c3157604481511015611bfe57600080fd5b60048101905080806020019051810190611c189190613791565b60405162461bcd60e51b8152600401610a009190612ed1565b80858481518110611c4457611c4461357a565b602002602001018190525050508080611c5c906136dd565b915050611a77565b506000611c6f610895565b905081811015611cb45760405162461bcd60e51b815260206004820152601060248201526f1b9959d85d1a5d99481a185c9d995cdd60821b6044820152606401610a00565b600b5482820390600090611ce490611cd490670de0b6b3a76400006134f4565b8390670de0b6b3a7640000612603565b611cee90856134dc565b600254909150600090611d028186856125e4565b611d0c91906134f4565b600954909150611d25906001600160a01b031682612755565b6000611d556103fc7f0000000000000000000000000000000000000000000000000000000000000000600a6138e3565b60408051808201825263ffffffff42811682526001600160e01b0380851660208401908152600c805460018101825560009190915293519051909116600160201b029116177fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c790910155519091507f6c8433a8e155f0af04dba058d4e4695f7da554578963d876bdf4a6d8d6399d9c90611dfb9083908590918252602082015260400190565b60405180910390a1611e0b6115d7565b505050505050919050565b6000336001600160a01b03831614611e86576001600160a01b03821660009081526004602090815260408083203384529091529020546000198114611e8457611e5f85826134f4565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b611e8f84611164565b905080600003611ecf5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b6044820152606401610a00565b611ed98185612a0f565b611ee38285612a5c565b60408051828152602081018690526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610b156001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168483612abe565b6008546001600160a01b0316331480611f8557506006546001600160a01b031633145b611fa15760405162461bcd60e51b8152600401610a00906136f6565b6010546006546001600160a01b0316331480611fbc57508082105b6120185760405162461bcd60e51b815260206004820152602760248201527f4f6e6c79204f776e65722063616e207261697365206d6178436f6c6c61746572604482015266616c526174696f60c81b6064820152608401610a00565b601082905560408051828152602081018490527faa915560e9978e01b02ffd7ed7b18b60e842c2772bb4dab6ba9b141e7441693c91015b60405180910390a15050565b6006546001600160a01b031633146120855760405162461bcd60e51b8152600401610a0090613545565b6001600160a01b0382166000818152600d6020908152604091829020805460ff19168515159081179091558251938452908301527f13e65f4beb0eb8b8336d270aa4ac99e9fa961d9eb25a89ff945d8f1224bbbcda910161204f565b6002546000908015610b1357610b0e816120f9610895565b8591906125e4565b6001600160a01b038116600090815260036020526040812054610b8390610aef565b6006546001600160a01b0316331461214d5760405162461bcd60e51b8152600401610a0090613545565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b428410156121bf5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610a00565b600060016121cb610def565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156122d7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061230d5750876001600160a01b0316816001600160a01b0316145b61234a5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606401610a00565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b60408051600280825260608083018452926000929190602083019080368337505060135482519293506001600160a01b0316918391506000906123f8576123f861357a565b6001600160a01b0392831660209182029290920101526014548251911690829060019081106124295761242961357a565b6001600160a01b03928316602091820292909201810191909152601254604080516399248ea760e01b8152905160009492909216926399248ea7926004808401938290030181865afa158015612483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a791906138f2565b6012546040516345accf9360e11b81529192506000916001600160a01b0390911690638b599f26906124df9086903090600401613953565b602060405180830381865afa1580156124fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252091906134ad565b60408051600180825281830190925291925060009190816020015b604080518082019091526000808252602082015281526020019060019003908161253b5790505090506040518060400160405280846001600160a01b0316815260200183815250816000815181106125955761259561357a565b6020908102919091010152949350505050565b6014546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401611567565b6000610b83826120e1565b8282028115158415858304851417166125fc57600080fd5b0492915050565b82820281151584158583048514171661261b57600080fd5b6001826001830304018115150290509392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051612663919061397d565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d116001600051141617169150508061274e5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610a00565b5050505050565b806002600082825461276791906134dc565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020613a6f83398151915291015b60405180910390a35050565b6127b882612b44565b5050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612823573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284791906134ad565b905080156128585761285881612b52565b60006128626125a8565b9050600061286e61153a565b905060006128a9600f5487858561288591906134f4565b61288f91906134f4565b600f546128a490670de0b6b3a76400006134f4565b6125e4565b90508083101561295a575b6128c681670dcef33a6f838000613a1c565b6128d884670de0b6b3a7640000613a1c565b10156129555760006128ea84836134f4565b905060008461290485601054670de0b6b3a76400006125e4565b61290e91906134f4565b90508082111561291c578091505b61292582612be2565b61292e82612b52565b8661293a5750506129f8565b6129426125a8565b945061294c61153a565b935050506128b4565b6129f8565b808311156129f8575b61297581670df27a2cdf448000613a1c565b61298784670de0b6b3a7640000613a1c565b11156129f857600061299982856134f4565b90506000846129b385601054670de0b6b3a76400006125e4565b6129bd91906134f4565b9050808211156129cb578091505b6129d482612c4f565b6129dd82612ced565b6129e56125a8565b94506129ef61153a565b93505050612963565b8515612a0757612a0786612c4f565b505050505050565b336000908152600d602052604090205460ff16612a5357600954600a54612a53916001600160a01b031690612a4e908490670de0b6b3a76400006125e4565b612755565b6127b882612d53565b6001600160a01b03821660009081526003602052604081208054839290612a849084906134f4565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020613a6f833981519152906020016127a3565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080612b365760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610a00565b50505050565b6115e3612d5e565b612b4f6000806127bc565b50565b60115460405163e8eda9df60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052306044830152600060648301529091169063e8eda9df906084015b600060405180830381600087803b158015612bce57600080fd5b505af115801561274e573d6000803e3d6000fd5b60115460405163a415bcad60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905260026044830152600060648301523060848301529091169063a415bcad9060a401612bb4565b601154604051631a4ca37b60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052306044830152909116906369328dec906064015b6020604051808303816000875af1158015612cc9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b891906134ad565b60115460405163573ade8160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052600260448301523060648301529091169063573ade8190608401612caa565b612b4f8160006127bc565b604080516002808252606082018352600092602083019080368337505060135482519293506001600160a01b031691839150600090612d9f57612d9f61357a565b6001600160a01b039283166020918202929092010152601454825191169082906001908110612dd057612dd061357a565b6001600160a01b0392831660209182029290920101526012546040516345accf9360e11b8152911690633111e7b39083908390638b599f2690612e199084903090600401613953565b602060405180830381865afa158015612e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5a91906134ad565b306040518463ffffffff1660e01b8152600401612caa93929190613a3b565b60005b83811015612e94578181015183820152602001612e7c565b83811115612b365750506000910152565b60008151808452612ebd816020860160208601612e79565b601f01601f19169290920160200192915050565b602081526000610b156020830184612ea5565b6001600160a01b0381168114612b4f57600080fd5b8015158114612b4f57600080fd5b600080600060608486031215612f1c57600080fd5b8335612f2781612ee4565b92506020840135612f3781612ef9565b91506040840135612f4781612ef9565b809150509250925092565b600060208284031215612f6457600080fd5b5035919050565b60008060408385031215612f7e57600080fd5b8235612f8981612ee4565b946020939093013593505050565b600080600060608486031215612fac57600080fd5b8335612fb781612ee4565b92506020840135612fc781612ee4565b929592945050506040919091013590565b60008060408385031215612feb57600080fd5b8235612ff681612ee4565b9150602083013561300681612ee4565b809150509250929050565b6000806040838503121561302457600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b8281101561308c5761307c848351805163ffffffff1682526020908101516001600160e01b0316910152565b9284019290850190600101613050565b5091979650505050505050565b6000602082840312156130ab57600080fd5b8135610b1581612ee4565b6000806000606084860312156130cb57600080fd5b83356130d681612ee4565b925060208401356001600160e01b031981168114612f3757600080fd5b6000806040838503121561310657600080fd5b82359150602083013561300681612ee4565b815163ffffffff1681526020808301516001600160e01b03169082015260408101610b83565b60008060006060848603121561315357600080fd5b83359250602084013561316581612ee4565b91506040840135612f4781612ee4565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156131ae576131ae613175565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156131dd576131dd613175565b604052919050565b600067ffffffffffffffff8211156131ff576131ff613175565b50601f01601f191660200190565b6000602080838503121561322057600080fd5b823567ffffffffffffffff8082111561323857600080fd5b818501915085601f83011261324c57600080fd5b81358181111561325e5761325e613175565b8060051b61326d8582016131b4565b918252838101850191858101908984111561328757600080fd5b86860192505b8383101561334e578235858111156132a55760008081fd5b86016040818c03601f19018113156132bd5760008081fd5b6132c561318b565b898301356132d281612ee4565b815282820135888111156132e65760008081fd5b8084019350508c603f8401126132fc5760008081fd5b8983013561331161330c826131e5565b6131b4565b8181528e848387010111156133265760008081fd5b818486018d83013760009181018c0191909152818b015284525050918601919086019061328d565b9998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156133b057603f1988860301845261339e858351612ea5565b94509285019290850190600101613382565b5092979650505050505050565b600080604083850312156133d057600080fd5b82356133db81612ee4565b9150602083013561300681612ef9565b600080600080600080600060e0888a03121561340657600080fd5b873561341181612ee4565b9650602088013561342181612ee4565b95506040880135945060608801359350608088013560ff8116811461344557600080fd5b9699959850939692959460a0840135945060c09093013592915050565b602080825282518282018190526000919060409081850190868401855b8281101561308c57815180516001600160a01b0316855286015186850152928401929085019060010161347f565b6000602082840312156134bf57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156134ef576134ef6134c6565b500190565b600082821015613506576135066134c6565b500390565b600181811c9082168061351f57607f821691505b60208210810361353f57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600081601b0b83601b0b60008112816401ffffffff60df1b018312811516156135bb576135bb6134c6565b6001600160df1b03820183138116156135d6576135d66134c6565b5090039392505050565b6000601b82810b9084900b6001600160df1b038382138484138082168484048611161561360f5761360f6134c6565b6001600160df1b03196000851282811687830587121615613632576136326134c6565b6000871292508582058712848416161561364e5761364e6134c6565b85850587128184161615613664576136646134c6565b5050509290910295945050505050565b600081601b0b83601b0b8061369957634e487b7160e01b600052601260045260246000fd5b6001600160df1b03198214600019821416156136b7576136b76134c6565b90059392505050565b6000602082840312156136d257600080fd5b8151610b1581612ef9565b6000600182016136ef576136ef6134c6565b5060010190565b60208082526028908201527f4f6e6c79206d616e61676572206f72204f776e657220697320616c6c6f776564604082015267081d1bc818d85b1b60c21b606082015260800190565b805160208201516001600160e01b0319808216929190600483101561376d5780818460040360031b1b83161693505b505050919050565b60008251613787818460208701612e79565b9190910192915050565b6000602082840312156137a357600080fd5b815167ffffffffffffffff8111156137ba57600080fd5b8201601f810184136137cb57600080fd5b80516137d961330c826131e5565b8181528560208385010111156137ee57600080fd5b610bf1826020830160208601612e79565b600181815b8085111561383a578160001904821115613820576138206134c6565b8085161561382d57918102915b93841c9390800290613804565b509250929050565b60008261385157506001610b83565b8161385e57506000610b83565b8160018114613874576002811461387e5761389a565b6001915050610b83565b60ff84111561388f5761388f6134c6565b50506001821b610b83565b5060208310610133831016604e8410600b84101617156138bd575081810a610b83565b6138c783836137ff565b80600019048211156138db576138db6134c6565b029392505050565b6000610b1560ff841683613842565b60006020828403121561390457600080fd5b8151610b1581612ee4565b600081518084526020808501945080840160005b838110156139485781516001600160a01b031687529582019590820190600101613923565b509495945050505050565b604081526000613966604083018561390f565b905060018060a01b03831660208301529392505050565b600080835481600182811c91508083168061399957607f831692505b602080841082036139b857634e487b7160e01b86526022600452602486fd5b8180156139cc57600181146139e157613a0e565b60ff1986168952841515850289019650613a0e565b60008a81526020902060005b86811015613a065781548b8201529085019083016139ed565b505084890196505b509498975050505050505050565b6000816000190483118215151615613a3657613a366134c6565b500290565b606081526000613a4e606083018661390f565b6020830194909452506001600160a01b039190911660409091015291905056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220345ccc29bf4ab2a148c7ca04140aa8a03d25967977bbc995608440c7c23ac72564736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBorrowedFromProtocol()": {
        "returns": {
          "_0": "Assets borrowed"
        }
      },
      "getProtocolLiquidity()": {
        "details": "ignored on this version",
        "returns": {
          "_0": "liquidity The diff"
        }
      },
      "getRemainingProtocolBorrowCap()": {
        "details": "ignored on this versionshould return 0 if the borrow cap is exhausted",
        "returns": {
          "_0": "remainingBorrowCap"
        }
      },
      "getRemainingProtocolSupplyCap()": {
        "details": "ignored on this versionshould return 0 if the supply cap is exhausted",
        "returns": {
          "_0": "remainingSupplyCap"
        }
      },
      "getSuppliedToProtocol()": {
        "returns": {
          "_0": "Assets supplied"
        }
      },
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "getBorrowedFromProtocol()": {
        "notice": "Get amount of assets borrowed from the protocol by the vault"
      },
      "getProtocolLiquidity()": {
        "notice": "Get liquidity availailable in the protocol"
      },
      "getRemainingProtocolBorrowCap()": {
        "notice": "Get remaining borrow cap in the protocol"
      },
      "getRemainingProtocolSupplyCap()": {
        "notice": "Get remaining supply cap in the protocol"
      },
      "getSuppliedToProtocol()": {
        "notice": "Get amount of assets supplied to the protocol by the vault"
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11459,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 11461,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 11465,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11469,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11475,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "allowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 11483,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6331,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 6333,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 15432,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "manager",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 15434,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "feeTaker",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 15436,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "withdrawalFee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 15438,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "harvestFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 15442,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "harvestCheckpoints",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(HarvestCheckpoint)15403_storage)dyn_storage"
      },
      {
        "astId": 15446,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "excludedFromFees",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15452,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "harvesAllowedCalls",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_bytes4,t_bool))"
      },
      {
        "astId": 14981,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "targetCollateralRatio",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 14983,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "maxCollateralRatio",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 13230,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "lendingPool",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(ILendingPool)14565"
      },
      {
        "astId": 13233,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "incentivesController",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IAaveIncentivesController)14187"
      },
      {
        "astId": 13236,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "aToken",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IERC20)8319"
      },
      {
        "astId": 13239,
        "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
        "label": "debtToken",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IERC20)8319"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(HarvestCheckpoint)15403_storage)dyn_storage": {
        "base": "t_struct(HarvestCheckpoint)15403_storage",
        "encoding": "dynamic_array",
        "label": "struct HarvestCheckpoint[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IAaveIncentivesController)14187": {
        "encoding": "inplace",
        "label": "contract IAaveIncentivesController",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)8319": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)14565": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(HarvestCheckpoint)15403_storage": {
        "encoding": "inplace",
        "label": "struct HarvestCheckpoint",
        "members": [
          {
            "astId": 15400,
            "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 15402,
            "contract": "contracts/citrus-vaults/src/Aave2LeveragedVault.sol:Aave2LeveragedVault",
            "label": "assetsPerShare",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}